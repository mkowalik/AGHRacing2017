
D:\AGH_Racing\AGHRacing2017Local\02_Telemetry\Telemetry\Debug\Telemetry.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001aec  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08001ba8  08001ba8  00011ba8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001c00  08001c00  00011c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001c04  08001c04  00011c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08001c08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000234  20000004  08001c0c  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000238  08001c0c  00020238  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001922c  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000316a  00000000  00000000  00039258  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008442  00000000  00000000  0003c3c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000a28  00000000  00000000  00044808  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000ef0  00000000  00000000  00045230  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000068b5  00000000  00000000  00046120  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003cee  00000000  00000000  0004c9d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000506c3  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001efc  00000000  00000000  00050740  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000004 	.word	0x20000004
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08001b90 	.word	0x08001b90

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000008 	.word	0x20000008
 8000100:	08001b90 	.word	0x08001b90

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800021c:	b510      	push	{r4, lr}
 800021e:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000220:	f000 ff70 	bl	8001104 <HAL_RCC_GetHCLKFreq>
 8000224:	21fa      	movs	r1, #250	; 0xfa
 8000226:	0089      	lsls	r1, r1, #2
 8000228:	f7ff ff6c 	bl	8000104 <__udivsi3>
 800022c:	f000 fb54 	bl	80008d8 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000230:	2001      	movs	r0, #1
 8000232:	2200      	movs	r2, #0
 8000234:	0021      	movs	r1, r4
 8000236:	4240      	negs	r0, r0
 8000238:	f000 fb14 	bl	8000864 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 800023c:	2000      	movs	r0, #0
 800023e:	bd10      	pop	{r4, pc}

08000240 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000240:	2310      	movs	r3, #16
 8000242:	4a06      	ldr	r2, [pc, #24]	; (800025c <HAL_Init+0x1c>)
{
 8000244:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000246:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000248:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800024a:	430b      	orrs	r3, r1
 800024c:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800024e:	f7ff ffe5 	bl	800021c <HAL_InitTick>
  HAL_MspInit();
 8000252:	f001 fb21 	bl	8001898 <HAL_MspInit>
}
 8000256:	2000      	movs	r0, #0
 8000258:	bd10      	pop	{r4, pc}
 800025a:	46c0      	nop			; (mov r8, r8)
 800025c:	40022000 	.word	0x40022000

08000260 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000260:	4a02      	ldr	r2, [pc, #8]	; (800026c <HAL_IncTick+0xc>)
 8000262:	6813      	ldr	r3, [r2, #0]
 8000264:	3301      	adds	r3, #1
 8000266:	6013      	str	r3, [r2, #0]
}
 8000268:	4770      	bx	lr
 800026a:	46c0      	nop			; (mov r8, r8)
 800026c:	200000cc 	.word	0x200000cc

08000270 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000270:	4b01      	ldr	r3, [pc, #4]	; (8000278 <HAL_GetTick+0x8>)
 8000272:	6818      	ldr	r0, [r3, #0]
}
 8000274:	4770      	bx	lr
 8000276:	46c0      	nop			; (mov r8, r8)
 8000278:	200000cc 	.word	0x200000cc

0800027c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *             the configuration information for the specified CAN.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef* hcan)
{
 800027c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800027e:	0004      	movs	r4, r0
  uint32_t tickstart = 0U;
  
  /* Check CAN handle */
  if(hcan == NULL)
  {
     return HAL_ERROR;
 8000280:	2001      	movs	r0, #1
  if(hcan == NULL)
 8000282:	2c00      	cmp	r4, #0
 8000284:	d070      	beq.n	8000368 <HAL_CAN_Init+0xec>
  assert_param(IS_CAN_SJW(hcan->Init.SJW));
  assert_param(IS_CAN_BS1(hcan->Init.BS1));
  assert_param(IS_CAN_BS2(hcan->Init.BS2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
  
  if(hcan->State == HAL_CAN_STATE_RESET)
 8000286:	0025      	movs	r5, r4
 8000288:	353d      	adds	r5, #61	; 0x3d
 800028a:	782b      	ldrb	r3, [r5, #0]
 800028c:	b2db      	uxtb	r3, r3
 800028e:	2b00      	cmp	r3, #0
 8000290:	d105      	bne.n	800029e <HAL_CAN_Init+0x22>
  {
    /* Allocate lock resource and initialize it */
    hcan->Lock = HAL_UNLOCKED;
 8000292:	0022      	movs	r2, r4
 8000294:	323c      	adds	r2, #60	; 0x3c
 8000296:	7013      	strb	r3, [r2, #0]
    /* Init the low level hardware */
    HAL_CAN_MspInit(hcan);
 8000298:	0020      	movs	r0, r4
 800029a:	f001 f9e1 	bl	8001660 <HAL_CAN_MspInit>
  }
  
  /* Initialize the CAN state*/
  hcan->State = HAL_CAN_STATE_BUSY;
 800029e:	2102      	movs	r1, #2
  
  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80002a0:	2701      	movs	r7, #1
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80002a2:	6823      	ldr	r3, [r4, #0]
  hcan->State = HAL_CAN_STATE_BUSY;
 80002a4:	7029      	strb	r1, [r5, #0]
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80002a6:	681a      	ldr	r2, [r3, #0]
 80002a8:	438a      	bics	r2, r1
 80002aa:	601a      	str	r2, [r3, #0]
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80002ac:	681a      	ldr	r2, [r3, #0]
 80002ae:	433a      	orrs	r2, r7
 80002b0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();   
 80002b2:	f7ff ffdd 	bl	8000270 <HAL_GetTick>
 80002b6:	9001      	str	r0, [sp, #4]
  
  /* Wait the acknowledge */
  while(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 80002b8:	6823      	ldr	r3, [r4, #0]
 80002ba:	685e      	ldr	r6, [r3, #4]
 80002bc:	403e      	ands	r6, r7
 80002be:	d049      	beq.n	8000354 <HAL_CAN_Init+0xd8>
      return HAL_TIMEOUT;
    }
  }

  /* Check acknowledge */
  if (HAL_IS_BIT_SET(hcan->Instance->MSR, CAN_MSR_INAK))
 80002c0:	685a      	ldr	r2, [r3, #4]
 80002c2:	423a      	tst	r2, r7
 80002c4:	d100      	bne.n	80002c8 <HAL_CAN_Init+0x4c>
 80002c6:	e073      	b.n	80003b0 <HAL_CAN_Init+0x134>
  {
    /* Set the time triggered communication mode */
    if (hcan->Init.TTCM == ENABLE)
 80002c8:	69a1      	ldr	r1, [r4, #24]
 80002ca:	2280      	movs	r2, #128	; 0x80
 80002cc:	2901      	cmp	r1, #1
 80002ce:	d14c      	bne.n	800036a <HAL_CAN_Init+0xee>
    {
      SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80002d0:	6819      	ldr	r1, [r3, #0]
 80002d2:	430a      	orrs	r2, r1
 80002d4:	601a      	str	r2, [r3, #0]
    {
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
    }

    /* Set the automatic bus-off management */
    if (hcan->Init.ABOM == ENABLE)
 80002d6:	69e1      	ldr	r1, [r4, #28]
 80002d8:	2240      	movs	r2, #64	; 0x40
 80002da:	2901      	cmp	r1, #1
 80002dc:	d149      	bne.n	8000372 <HAL_CAN_Init+0xf6>
    {
      SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80002de:	6819      	ldr	r1, [r3, #0]
 80002e0:	430a      	orrs	r2, r1
 80002e2:	601a      	str	r2, [r3, #0]
    {
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
    }

    /* Set the automatic wake-up mode */
    if (hcan->Init.AWUM == ENABLE)
 80002e4:	6a21      	ldr	r1, [r4, #32]
 80002e6:	2220      	movs	r2, #32
 80002e8:	2901      	cmp	r1, #1
 80002ea:	d146      	bne.n	800037a <HAL_CAN_Init+0xfe>
    {
      SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80002ec:	6819      	ldr	r1, [r3, #0]
 80002ee:	430a      	orrs	r2, r1
 80002f0:	601a      	str	r2, [r3, #0]
    {
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
    }

    /* Set the no automatic retransmission */
    if (hcan->Init.NART == ENABLE)
 80002f2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80002f4:	2210      	movs	r2, #16
 80002f6:	2901      	cmp	r1, #1
 80002f8:	d143      	bne.n	8000382 <HAL_CAN_Init+0x106>
    {
      SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80002fa:	6819      	ldr	r1, [r3, #0]
 80002fc:	430a      	orrs	r2, r1
 80002fe:	601a      	str	r2, [r3, #0]
    {
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
    }

    /* Set the receive FIFO locked mode */
    if (hcan->Init.RFLM == ENABLE)
 8000300:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000302:	2208      	movs	r2, #8
 8000304:	2901      	cmp	r1, #1
 8000306:	d140      	bne.n	800038a <HAL_CAN_Init+0x10e>
    {
      SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000308:	6819      	ldr	r1, [r3, #0]
 800030a:	430a      	orrs	r2, r1
 800030c:	601a      	str	r2, [r3, #0]
    {
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
    }

    /* Set the transmit FIFO priority */
    if (hcan->Init.TXFP == ENABLE)
 800030e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000310:	2204      	movs	r2, #4
 8000312:	2901      	cmp	r1, #1
 8000314:	d13d      	bne.n	8000392 <HAL_CAN_Init+0x116>
    {
      SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000316:	6819      	ldr	r1, [r3, #0]
 8000318:	430a      	orrs	r2, r1
 800031a:	601a      	str	r2, [r3, #0]
                                              hcan->Init.BS1            |
                                              hcan->Init.BS2            |
                                              (hcan->Init.Prescaler - 1U) ));

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800031c:	2601      	movs	r6, #1
    WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800031e:	68e1      	ldr	r1, [r4, #12]
 8000320:	68a2      	ldr	r2, [r4, #8]
 8000322:	430a      	orrs	r2, r1
 8000324:	6921      	ldr	r1, [r4, #16]
 8000326:	430a      	orrs	r2, r1
 8000328:	6961      	ldr	r1, [r4, #20]
 800032a:	430a      	orrs	r2, r1
 800032c:	6861      	ldr	r1, [r4, #4]
 800032e:	3901      	subs	r1, #1
 8000330:	430a      	orrs	r2, r1
 8000332:	61da      	str	r2, [r3, #28]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000334:	681a      	ldr	r2, [r3, #0]
 8000336:	43b2      	bics	r2, r6
 8000338:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();   
 800033a:	f7ff ff99 	bl	8000270 <HAL_GetTick>
 800033e:	0007      	movs	r7, r0
   
    /* Wait the acknowledge */
    while(HAL_IS_BIT_SET(hcan->Instance->MSR, CAN_MSR_INAK))
 8000340:	6823      	ldr	r3, [r4, #0]
 8000342:	685a      	ldr	r2, [r3, #4]
 8000344:	4232      	tst	r2, r6
 8000346:	d128      	bne.n	800039a <HAL_CAN_Init+0x11e>
       return HAL_TIMEOUT;
      }
    }

    /* Check acknowledged */
    if(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 8000348:	6858      	ldr	r0, [r3, #4]
 800034a:	4030      	ands	r0, r6
 800034c:	d130      	bne.n	80003b0 <HAL_CAN_Init+0x134>
  }
 
  if(status == CAN_INITSTATUS_SUCCESS)
  {
    /* Set CAN error code to none */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800034e:	6420      	str	r0, [r4, #64]	; 0x40
    
    /* Initialize the CAN state */
    hcan->State = HAL_CAN_STATE_READY;
 8000350:	702e      	strb	r6, [r5, #0]
  
    /* Return function status */
    return HAL_OK;
 8000352:	e009      	b.n	8000368 <HAL_CAN_Init+0xec>
    if((HAL_GetTick()-tickstart) > CAN_TIMEOUT_VALUE)
 8000354:	f7ff ff8c 	bl	8000270 <HAL_GetTick>
 8000358:	9b01      	ldr	r3, [sp, #4]
 800035a:	1ac0      	subs	r0, r0, r3
 800035c:	280a      	cmp	r0, #10
 800035e:	d9ab      	bls.n	80002b8 <HAL_CAN_Init+0x3c>
      hcan->State= HAL_CAN_STATE_TIMEOUT;
 8000360:	2003      	movs	r0, #3
      __HAL_UNLOCK(hcan);
 8000362:	343c      	adds	r4, #60	; 0x3c
      hcan->State= HAL_CAN_STATE_TIMEOUT;
 8000364:	7028      	strb	r0, [r5, #0]
      __HAL_UNLOCK(hcan);
 8000366:	7026      	strb	r6, [r4, #0]
    hcan->State = HAL_CAN_STATE_ERROR;

    /* Return function status */
    return HAL_ERROR;
  }
}
 8000368:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800036a:	6819      	ldr	r1, [r3, #0]
 800036c:	4391      	bics	r1, r2
 800036e:	6019      	str	r1, [r3, #0]
 8000370:	e7b1      	b.n	80002d6 <HAL_CAN_Init+0x5a>
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000372:	6819      	ldr	r1, [r3, #0]
 8000374:	4391      	bics	r1, r2
 8000376:	6019      	str	r1, [r3, #0]
 8000378:	e7b4      	b.n	80002e4 <HAL_CAN_Init+0x68>
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800037a:	6819      	ldr	r1, [r3, #0]
 800037c:	4391      	bics	r1, r2
 800037e:	6019      	str	r1, [r3, #0]
 8000380:	e7b7      	b.n	80002f2 <HAL_CAN_Init+0x76>
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000382:	6819      	ldr	r1, [r3, #0]
 8000384:	4391      	bics	r1, r2
 8000386:	6019      	str	r1, [r3, #0]
 8000388:	e7ba      	b.n	8000300 <HAL_CAN_Init+0x84>
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800038a:	6819      	ldr	r1, [r3, #0]
 800038c:	4391      	bics	r1, r2
 800038e:	6019      	str	r1, [r3, #0]
 8000390:	e7bd      	b.n	800030e <HAL_CAN_Init+0x92>
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000392:	6819      	ldr	r1, [r3, #0]
 8000394:	4391      	bics	r1, r2
 8000396:	6019      	str	r1, [r3, #0]
 8000398:	e7c0      	b.n	800031c <HAL_CAN_Init+0xa0>
      if((HAL_GetTick()-tickstart) > CAN_TIMEOUT_VALUE)
 800039a:	f7ff ff69 	bl	8000270 <HAL_GetTick>
 800039e:	1bc0      	subs	r0, r0, r7
 80003a0:	280a      	cmp	r0, #10
 80003a2:	d9cd      	bls.n	8000340 <HAL_CAN_Init+0xc4>
         hcan->State= HAL_CAN_STATE_TIMEOUT;
 80003a4:	2003      	movs	r0, #3
       __HAL_UNLOCK(hcan);
 80003a6:	2300      	movs	r3, #0
 80003a8:	343c      	adds	r4, #60	; 0x3c
         hcan->State= HAL_CAN_STATE_TIMEOUT;
 80003aa:	7028      	strb	r0, [r5, #0]
       __HAL_UNLOCK(hcan);
 80003ac:	7023      	strb	r3, [r4, #0]
       return HAL_TIMEOUT;
 80003ae:	e7db      	b.n	8000368 <HAL_CAN_Init+0xec>
    hcan->State = HAL_CAN_STATE_ERROR;
 80003b0:	2304      	movs	r3, #4
    return HAL_ERROR;
 80003b2:	2001      	movs	r0, #1
    hcan->State = HAL_CAN_STATE_ERROR;
 80003b4:	702b      	strb	r3, [r5, #0]
    return HAL_ERROR;
 80003b6:	e7d7      	b.n	8000368 <HAL_CAN_Init+0xec>

080003b8 <HAL_CAN_Transmit_IT>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Transmit_IT(CAN_HandleTypeDef* hcan)
{
 80003b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_CAN_IDTYPE(hcan->pTxMsg->IDE));
  assert_param(IS_CAN_RTR(hcan->pTxMsg->RTR));
  assert_param(IS_CAN_DLC(hcan->pTxMsg->DLC));

  if(((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0) || \
 80003ba:	6804      	ldr	r4, [r0, #0]
{
 80003bc:	0001      	movs	r1, r0
  if(((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0) || \
 80003be:	68a3      	ldr	r3, [r4, #8]
 80003c0:	015b      	lsls	r3, r3, #5
 80003c2:	d406      	bmi.n	80003d2 <HAL_CAN_Transmit_IT+0x1a>
     ((hcan->Instance->TSR&CAN_TSR_TME1) == CAN_TSR_TME1) || \
 80003c4:	68a3      	ldr	r3, [r4, #8]
  if(((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0) || \
 80003c6:	011b      	lsls	r3, r3, #4
 80003c8:	d403      	bmi.n	80003d2 <HAL_CAN_Transmit_IT+0x1a>
     ((hcan->Instance->TSR&CAN_TSR_TME2) == CAN_TSR_TME2))
 80003ca:	68a3      	ldr	r3, [r4, #8]
     ((hcan->Instance->TSR&CAN_TSR_TME1) == CAN_TSR_TME1) || \
 80003cc:	00db      	lsls	r3, r3, #3
 80003ce:	d400      	bmi.n	80003d2 <HAL_CAN_Transmit_IT+0x1a>
 80003d0:	e06b      	b.n	80004aa <HAL_CAN_Transmit_IT+0xf2>
  {
    /* Process Locked */
    __HAL_LOCK(hcan);
 80003d2:	000b      	movs	r3, r1
 80003d4:	333c      	adds	r3, #60	; 0x3c
 80003d6:	781a      	ldrb	r2, [r3, #0]
 80003d8:	2002      	movs	r0, #2
 80003da:	2a01      	cmp	r2, #1
 80003dc:	d053      	beq.n	8000486 <HAL_CAN_Transmit_IT+0xce>
 80003de:	2201      	movs	r2, #1
 80003e0:	701a      	strb	r2, [r3, #0]
    
    /* Select one empty transmit mailbox */
    if(HAL_IS_BIT_SET(hcan->Instance->TSR, CAN_TSR_TME0))
 80003e2:	68a2      	ldr	r2, [r4, #8]
    {
      transmitmailbox = CAN_TXMAILBOX_0;
 80003e4:	2300      	movs	r3, #0
    if(HAL_IS_BIT_SET(hcan->Instance->TSR, CAN_TSR_TME0))
 80003e6:	0152      	lsls	r2, r2, #5
 80003e8:	d406      	bmi.n	80003f8 <HAL_CAN_Transmit_IT+0x40>
    }
    else if(HAL_IS_BIT_SET(hcan->Instance->TSR, CAN_TSR_TME1))
 80003ea:	2280      	movs	r2, #128	; 0x80
 80003ec:	68a3      	ldr	r3, [r4, #8]
 80003ee:	0512      	lsls	r2, r2, #20
 80003f0:	401a      	ands	r2, r3
    {
      transmitmailbox = CAN_TXMAILBOX_1;
    }
    else
    {
      transmitmailbox = CAN_TXMAILBOX_2;
 80003f2:	4253      	negs	r3, r2
 80003f4:	4153      	adcs	r3, r2
 80003f6:	3301      	adds	r3, #1
    }

    /* Set up the Id */
    hcan->Instance->sTxMailBox[transmitmailbox].TIR &= CAN_TI0R_TXRQ;
 80003f8:	26c0      	movs	r6, #192	; 0xc0
 80003fa:	2501      	movs	r5, #1
 80003fc:	011b      	lsls	r3, r3, #4
 80003fe:	18e2      	adds	r2, r4, r3
 8000400:	0076      	lsls	r6, r6, #1
 8000402:	5990      	ldr	r0, [r2, r6]
 8000404:	9300      	str	r3, [sp, #0]
 8000406:	4028      	ands	r0, r5
 8000408:	5190      	str	r0, [r2, r6]
    if(hcan->pTxMsg->IDE == CAN_ID_STD)
 800040a:	6b08      	ldr	r0, [r1, #48]	; 0x30
 800040c:	68c5      	ldr	r5, [r0, #12]
 800040e:	6887      	ldr	r7, [r0, #8]
 8000410:	46ac      	mov	ip, r5
 8000412:	2f00      	cmp	r7, #0
 8000414:	d138      	bne.n	8000488 <HAL_CAN_Transmit_IT+0xd0>
    {
      assert_param(IS_CAN_STDID(hcan->pTxMsg->StdId));
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->StdId << CAN_TI0R_STID_Pos) | \
 8000416:	4663      	mov	r3, ip
 8000418:	6807      	ldr	r7, [r0, #0]
 800041a:	5995      	ldr	r5, [r2, r6]
 800041c:	057f      	lsls	r7, r7, #21
 800041e:	431f      	orrs	r7, r3
 8000420:	432f      	orrs	r7, r5
 8000422:	5197      	str	r7, [r2, r6]
                                                           hcan->pTxMsg->RTR);
    }

    /* Set up the DLC */
    hcan->pTxMsg->DLC &= (uint8_t)0x0000000FU;
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR &= 0xFFFFFFF0U;
 8000424:	26c2      	movs	r6, #194	; 0xc2
    hcan->pTxMsg->DLC &= (uint8_t)0x0000000FU;
 8000426:	230f      	movs	r3, #15
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR &= 0xFFFFFFF0U;
 8000428:	0076      	lsls	r6, r6, #1
 800042a:	5997      	ldr	r7, [r2, r6]
    hcan->pTxMsg->DLC &= (uint8_t)0x0000000FU;
 800042c:	6905      	ldr	r5, [r0, #16]
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR &= 0xFFFFFFF0U;
 800042e:	439f      	bics	r7, r3
    hcan->pTxMsg->DLC &= (uint8_t)0x0000000FU;
 8000430:	401d      	ands	r5, r3
 8000432:	6105      	str	r5, [r0, #16]
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR &= 0xFFFFFFF0U;
 8000434:	5197      	str	r7, [r2, r6]
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR |= hcan->pTxMsg->DLC;
 8000436:	5997      	ldr	r7, [r2, r6]

    /* Set up the data field */
    WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR, ((uint32_t)hcan->pTxMsg->Data[3] << CAN_TDL0R_DATA3_Pos) |
 8000438:	9b00      	ldr	r3, [sp, #0]
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR |= hcan->pTxMsg->DLC;
 800043a:	433d      	orrs	r5, r7
    WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR, ((uint32_t)hcan->pTxMsg->Data[3] << CAN_TDL0R_DATA3_Pos) |
 800043c:	18e3      	adds	r3, r4, r3
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR |= hcan->pTxMsg->DLC;
 800043e:	5195      	str	r5, [r2, r6]
    WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR, ((uint32_t)hcan->pTxMsg->Data[3] << CAN_TDL0R_DATA3_Pos) |
 8000440:	001d      	movs	r5, r3
 8000442:	6946      	ldr	r6, [r0, #20]
 8000444:	3589      	adds	r5, #137	; 0x89
 8000446:	35ff      	adds	r5, #255	; 0xff
 8000448:	602e      	str	r6, [r5, #0]
                                                                ((uint32_t)hcan->pTxMsg->Data[2] << CAN_TDL0R_DATA2_Pos) |
                                                                ((uint32_t)hcan->pTxMsg->Data[1] << CAN_TDL0R_DATA1_Pos) |
                                                                ((uint32_t)hcan->pTxMsg->Data[0] << CAN_TDL0R_DATA0_Pos));
    WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR, ((uint32_t)hcan->pTxMsg->Data[7] << CAN_TDL0R_DATA3_Pos) |
 800044a:	6980      	ldr	r0, [r0, #24]
 800044c:	338d      	adds	r3, #141	; 0x8d
 800044e:	33ff      	adds	r3, #255	; 0xff
 8000450:	6018      	str	r0, [r3, #0]
                                                                ((uint32_t)hcan->pTxMsg->Data[6] << CAN_TDL0R_DATA2_Pos) |
                                                                ((uint32_t)hcan->pTxMsg->Data[5] << CAN_TDL0R_DATA1_Pos) |
                                                                ((uint32_t)hcan->pTxMsg->Data[4] << CAN_TDL0R_DATA0_Pos));

    /* Change CAN state */
    switch(hcan->State)
 8000452:	000b      	movs	r3, r1
 8000454:	333d      	adds	r3, #61	; 0x3d
 8000456:	7818      	ldrb	r0, [r3, #0]
 8000458:	b2c0      	uxtb	r0, r0
 800045a:	2832      	cmp	r0, #50	; 0x32
 800045c:	d01f      	beq.n	800049e <HAL_CAN_Transmit_IT+0xe6>
 800045e:	2862      	cmp	r0, #98	; 0x62
 8000460:	d01f      	beq.n	80004a2 <HAL_CAN_Transmit_IT+0xea>
 8000462:	2822      	cmp	r0, #34	; 0x22
 8000464:	d11f      	bne.n	80004a6 <HAL_CAN_Transmit_IT+0xee>
    {
      case(HAL_CAN_STATE_BUSY_RX0):
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX0;
 8000466:	3020      	adds	r0, #32
          break;
      case(HAL_CAN_STATE_BUSY_RX0_RX1):
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX0_RX1;
          break;
      default: /* HAL_CAN_STATE_READY */
          hcan->State = HAL_CAN_STATE_BUSY_TX;
 8000468:	7018      	strb	r0, [r3, #0]
          break;
    }

    /* Set CAN error code to none */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800046a:	2000      	movs	r0, #0

    /* Process Unlocked */
    __HAL_UNLOCK(hcan);
 800046c:	313c      	adds	r1, #60	; 0x3c
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800046e:	6048      	str	r0, [r1, #4]
    __HAL_UNLOCK(hcan);
 8000470:	7008      	strb	r0, [r1, #0]

    /* Request transmission */
    hcan->Instance->sTxMailBox[transmitmailbox].TIR |= CAN_TI0R_TXRQ;
 8000472:	21c0      	movs	r1, #192	; 0xc0
 8000474:	2301      	movs	r3, #1
 8000476:	0049      	lsls	r1, r1, #1
 8000478:	5855      	ldr	r5, [r2, r1]
 800047a:	432b      	orrs	r3, r5
 800047c:	5053      	str	r3, [r2, r1]
    /*  - Enable Error passive Interrupt */
    /*  - Enable Bus-off Interrupt */
    /*  - Enable Last error code Interrupt */
    /*  - Enable Error Interrupt */
    /*  - Enable Transmit mailbox empty Interrupt */
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_EWG |
 800047e:	6962      	ldr	r2, [r4, #20]
 8000480:	4b0c      	ldr	r3, [pc, #48]	; (80004b4 <HAL_CAN_Transmit_IT+0xfc>)
 8000482:	4313      	orrs	r3, r2
 8000484:	6163      	str	r3, [r4, #20]
    /* Return function status */
    return HAL_ERROR;
  }
  
  return HAL_OK;
}
 8000486:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << CAN_TI0R_EXID_Pos) | \
 8000488:	5993      	ldr	r3, [r2, r6]
 800048a:	9301      	str	r3, [sp, #4]
 800048c:	6843      	ldr	r3, [r0, #4]
 800048e:	00dd      	lsls	r5, r3, #3
                                                           hcan->pTxMsg->IDE |                         \
 8000490:	4663      	mov	r3, ip
 8000492:	431f      	orrs	r7, r3
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << CAN_TI0R_EXID_Pos) | \
 8000494:	9b01      	ldr	r3, [sp, #4]
                                                           hcan->pTxMsg->IDE |                         \
 8000496:	433d      	orrs	r5, r7
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << CAN_TI0R_EXID_Pos) | \
 8000498:	431d      	orrs	r5, r3
 800049a:	5195      	str	r5, [r2, r6]
 800049c:	e7c2      	b.n	8000424 <HAL_CAN_Transmit_IT+0x6c>
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX1;
 800049e:	2052      	movs	r0, #82	; 0x52
 80004a0:	e7e2      	b.n	8000468 <HAL_CAN_Transmit_IT+0xb0>
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX0_RX1;
 80004a2:	2072      	movs	r0, #114	; 0x72
 80004a4:	e7e0      	b.n	8000468 <HAL_CAN_Transmit_IT+0xb0>
          hcan->State = HAL_CAN_STATE_BUSY_TX;
 80004a6:	2012      	movs	r0, #18
 80004a8:	e7de      	b.n	8000468 <HAL_CAN_Transmit_IT+0xb0>
    hcan->State = HAL_CAN_STATE_ERROR;
 80004aa:	2304      	movs	r3, #4
 80004ac:	313d      	adds	r1, #61	; 0x3d
 80004ae:	700b      	strb	r3, [r1, #0]
    return HAL_ERROR;
 80004b0:	2001      	movs	r0, #1
 80004b2:	e7e8      	b.n	8000486 <HAL_CAN_Transmit_IT+0xce>
 80004b4:	00008f01 	.word	0x00008f01

080004b8 <HAL_CAN_Receive_IT>:
  *         the configuration information for the specified CAN.  
  * @param  FIFONumber    FIFO number.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Receive_IT(CAN_HandleTypeDef* hcan, uint8_t FIFONumber)
{
 80004b8:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_CAN_FIFO(FIFONumber));

  /* Process locked */
  __HAL_LOCK(hcan);
 80004ba:	0004      	movs	r4, r0
 80004bc:	343c      	adds	r4, #60	; 0x3c
 80004be:	7823      	ldrb	r3, [r4, #0]
{
 80004c0:	0005      	movs	r5, r0
  __HAL_LOCK(hcan);
 80004c2:	2002      	movs	r0, #2
 80004c4:	2b01      	cmp	r3, #1
 80004c6:	d014      	beq.n	80004f2 <HAL_CAN_Receive_IT+0x3a>
 80004c8:	2301      	movs	r3, #1
 80004ca:	7023      	strb	r3, [r4, #0]
 80004cc:	002b      	movs	r3, r5
 80004ce:	333d      	adds	r3, #61	; 0x3d

  /* Check if CAN state is not busy for RX FIFO0 */
  if ((FIFONumber == CAN_FIFO0) && ((hcan->State == HAL_CAN_STATE_BUSY_RX0) ||        \
 80004d0:	2900      	cmp	r1, #0
 80004d2:	d10f      	bne.n	80004f4 <HAL_CAN_Receive_IT+0x3c>
 80004d4:	781a      	ldrb	r2, [r3, #0]
 80004d6:	2a22      	cmp	r2, #34	; 0x22
 80004d8:	d008      	beq.n	80004ec <HAL_CAN_Receive_IT+0x34>
                                    (hcan->State == HAL_CAN_STATE_BUSY_TX_RX0) ||      \
 80004da:	781a      	ldrb	r2, [r3, #0]
  if ((FIFONumber == CAN_FIFO0) && ((hcan->State == HAL_CAN_STATE_BUSY_RX0) ||        \
 80004dc:	2a42      	cmp	r2, #66	; 0x42
 80004de:	d005      	beq.n	80004ec <HAL_CAN_Receive_IT+0x34>
                                    (hcan->State == HAL_CAN_STATE_BUSY_RX0_RX1) ||     \
 80004e0:	781a      	ldrb	r2, [r3, #0]
                                    (hcan->State == HAL_CAN_STATE_BUSY_TX_RX0) ||      \
 80004e2:	2a62      	cmp	r2, #98	; 0x62
 80004e4:	d002      	beq.n	80004ec <HAL_CAN_Receive_IT+0x34>
                                    (hcan->State == HAL_CAN_STATE_BUSY_TX_RX0_RX1)))
 80004e6:	781a      	ldrb	r2, [r3, #0]
                                    (hcan->State == HAL_CAN_STATE_BUSY_RX0_RX1) ||     \
 80004e8:	2a72      	cmp	r2, #114	; 0x72
 80004ea:	d11b      	bne.n	8000524 <HAL_CAN_Receive_IT+0x6c>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hcan);
 80004ec:	2300      	movs	r3, #0

    return HAL_BUSY;
 80004ee:	2002      	movs	r0, #2
    __HAL_UNLOCK(hcan);
 80004f0:	7023      	strb	r3, [r4, #0]
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FOV1 | CAN_IT_FMP1);
  }
  
  /* Return function status */
  return HAL_OK;
}
 80004f2:	bd30      	pop	{r4, r5, pc}
  if ((FIFONumber == CAN_FIFO1) && ((hcan->State == HAL_CAN_STATE_BUSY_RX1) ||        \
 80004f4:	2901      	cmp	r1, #1
 80004f6:	d10b      	bne.n	8000510 <HAL_CAN_Receive_IT+0x58>
 80004f8:	781a      	ldrb	r2, [r3, #0]
 80004fa:	2a32      	cmp	r2, #50	; 0x32
 80004fc:	d0f6      	beq.n	80004ec <HAL_CAN_Receive_IT+0x34>
                                    (hcan->State == HAL_CAN_STATE_BUSY_TX_RX1) ||      \
 80004fe:	781a      	ldrb	r2, [r3, #0]
  if ((FIFONumber == CAN_FIFO1) && ((hcan->State == HAL_CAN_STATE_BUSY_RX1) ||        \
 8000500:	2a52      	cmp	r2, #82	; 0x52
 8000502:	d0f3      	beq.n	80004ec <HAL_CAN_Receive_IT+0x34>
                                    (hcan->State == HAL_CAN_STATE_BUSY_RX0_RX1) ||     \
 8000504:	781a      	ldrb	r2, [r3, #0]
                                    (hcan->State == HAL_CAN_STATE_BUSY_TX_RX1) ||      \
 8000506:	2a62      	cmp	r2, #98	; 0x62
 8000508:	d0f0      	beq.n	80004ec <HAL_CAN_Receive_IT+0x34>
                                    (hcan->State == HAL_CAN_STATE_BUSY_TX_RX0_RX1)))
 800050a:	781a      	ldrb	r2, [r3, #0]
                                    (hcan->State == HAL_CAN_STATE_BUSY_RX0_RX1) ||     \
 800050c:	2a72      	cmp	r2, #114	; 0x72
 800050e:	d0ed      	beq.n	80004ec <HAL_CAN_Receive_IT+0x34>
    switch(hcan->State)
 8000510:	781a      	ldrb	r2, [r3, #0]
 8000512:	b2d2      	uxtb	r2, r2
 8000514:	2a22      	cmp	r2, #34	; 0x22
 8000516:	d022      	beq.n	800055e <HAL_CAN_Receive_IT+0xa6>
 8000518:	2a42      	cmp	r2, #66	; 0x42
 800051a:	d022      	beq.n	8000562 <HAL_CAN_Receive_IT+0xaa>
 800051c:	2a12      	cmp	r2, #18
 800051e:	d122      	bne.n	8000566 <HAL_CAN_Receive_IT+0xae>
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX1;
 8000520:	3240      	adds	r2, #64	; 0x40
 8000522:	e008      	b.n	8000536 <HAL_CAN_Receive_IT+0x7e>
    switch(hcan->State)
 8000524:	781a      	ldrb	r2, [r3, #0]
 8000526:	b2d2      	uxtb	r2, r2
 8000528:	2a32      	cmp	r2, #50	; 0x32
 800052a:	d018      	beq.n	800055e <HAL_CAN_Receive_IT+0xa6>
 800052c:	2a52      	cmp	r2, #82	; 0x52
 800052e:	d018      	beq.n	8000562 <HAL_CAN_Receive_IT+0xaa>
 8000530:	2a12      	cmp	r2, #18
 8000532:	d112      	bne.n	800055a <HAL_CAN_Receive_IT+0xa2>
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0;
 8000534:	3230      	adds	r2, #48	; 0x30
        hcan->State = HAL_CAN_STATE_BUSY_RX1;
 8000536:	701a      	strb	r2, [r3, #0]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000538:	2300      	movs	r3, #0
  __HAL_CAN_ENABLE_IT(hcan, CAN_IT_EWG |
 800053a:	208f      	movs	r0, #143	; 0x8f
 800053c:	682a      	ldr	r2, [r5, #0]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800053e:	642b      	str	r3, [r5, #64]	; 0x40
  __HAL_CAN_ENABLE_IT(hcan, CAN_IT_EWG |
 8000540:	6955      	ldr	r5, [r2, #20]
 8000542:	0200      	lsls	r0, r0, #8
 8000544:	4328      	orrs	r0, r5
 8000546:	6150      	str	r0, [r2, #20]
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FOV0 | CAN_IT_FMP0);
 8000548:	6950      	ldr	r0, [r2, #20]
  __HAL_UNLOCK(hcan);
 800054a:	7023      	strb	r3, [r4, #0]
  if(FIFONumber == CAN_FIFO0)
 800054c:	4299      	cmp	r1, r3
 800054e:	d10c      	bne.n	800056a <HAL_CAN_Receive_IT+0xb2>
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FOV0 | CAN_IT_FMP0);
 8000550:	330a      	adds	r3, #10
 8000552:	4303      	orrs	r3, r0
 8000554:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 8000556:	0008      	movs	r0, r1
 8000558:	e7cb      	b.n	80004f2 <HAL_CAN_Receive_IT+0x3a>
        hcan->State = HAL_CAN_STATE_BUSY_RX0;
 800055a:	2222      	movs	r2, #34	; 0x22
 800055c:	e7eb      	b.n	8000536 <HAL_CAN_Receive_IT+0x7e>
        hcan->State = HAL_CAN_STATE_BUSY_RX0_RX1;
 800055e:	2262      	movs	r2, #98	; 0x62
 8000560:	e7e9      	b.n	8000536 <HAL_CAN_Receive_IT+0x7e>
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0_RX1;
 8000562:	2272      	movs	r2, #114	; 0x72
 8000564:	e7e7      	b.n	8000536 <HAL_CAN_Receive_IT+0x7e>
        hcan->State = HAL_CAN_STATE_BUSY_RX1;
 8000566:	2232      	movs	r2, #50	; 0x32
 8000568:	e7e5      	b.n	8000536 <HAL_CAN_Receive_IT+0x7e>
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FOV1 | CAN_IT_FMP1);
 800056a:	2150      	movs	r1, #80	; 0x50
 800056c:	4301      	orrs	r1, r0
 800056e:	6151      	str	r1, [r2, #20]
  return HAL_OK;
 8000570:	0018      	movs	r0, r3
 8000572:	e7be      	b.n	80004f2 <HAL_CAN_Receive_IT+0x3a>

08000574 <CAN_Receive_IT>:
  * @param  FIFONumber Specify the FIFO number    
  * @retval HAL status
  * @retval None
  */
static HAL_StatusTypeDef CAN_Receive_IT(CAN_HandleTypeDef* hcan, uint8_t FIFONumber)
{
 8000574:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  CanRxMsgTypeDef* pRxMsg = NULL;

  /* Set RxMsg pointer */
  if(FIFONumber == CAN_FIFO0)
 8000576:	2900      	cmp	r1, #0
 8000578:	d161      	bne.n	800063e <CAN_Receive_IT+0xca>
  {
    pRxMsg = hcan->pRxMsg;
 800057a:	6b43      	ldr	r3, [r0, #52]	; 0x34
  {
    pRxMsg = hcan->pRx1Msg;
  }

  /* Get the Id */
  pRxMsg->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
 800057c:	26d8      	movs	r6, #216	; 0xd8
 800057e:	6802      	ldr	r2, [r0, #0]
 8000580:	010c      	lsls	r4, r1, #4
 8000582:	1915      	adds	r5, r2, r4
 8000584:	9401      	str	r4, [sp, #4]
 8000586:	2404      	movs	r4, #4
 8000588:	0076      	lsls	r6, r6, #1
 800058a:	59af      	ldr	r7, [r5, r6]
 800058c:	4027      	ands	r7, r4
 800058e:	609f      	str	r7, [r3, #8]
  if (pRxMsg->IDE == CAN_ID_STD)
 8000590:	d157      	bne.n	8000642 <CAN_Receive_IT+0xce>
  {
    pRxMsg->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[FIFONumber].RIR) >> CAN_TI0R_STID_Pos;
 8000592:	59af      	ldr	r7, [r5, r6]
 8000594:	0d7f      	lsrs	r7, r7, #21
 8000596:	601f      	str	r7, [r3, #0]
  {
    pRxMsg->ExtId = (0xFFFFFFF8U & hcan->Instance->sFIFOMailBox[FIFONumber].RIR) >> CAN_RI0R_EXID_Pos;
  }
  pRxMsg->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[FIFONumber].RIR) >> CAN_RI0R_RTR_Pos;
  /* Get the DLC */
  pRxMsg->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000598:	27da      	movs	r7, #218	; 0xda
 800059a:	240f      	movs	r4, #15
  pRxMsg->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[FIFONumber].RIR) >> CAN_RI0R_RTR_Pos;
 800059c:	59ae      	ldr	r6, [r5, r6]
  pRxMsg->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR) >> CAN_RDT0R_DLC_Pos;
 800059e:	007f      	lsls	r7, r7, #1
  pRxMsg->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[FIFONumber].RIR) >> CAN_RI0R_RTR_Pos;
 80005a0:	07b6      	lsls	r6, r6, #30
 80005a2:	0ff6      	lsrs	r6, r6, #31
 80005a4:	60de      	str	r6, [r3, #12]
  pRxMsg->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR) >> CAN_RDT0R_DLC_Pos;
 80005a6:	59ee      	ldr	r6, [r5, r7]
  /* Get the FMI */
  pRxMsg->FMI = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR) >> CAN_RDT0R_FMI_Pos;
 80005a8:	59ed      	ldr	r5, [r5, r7]
  pRxMsg->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR) >> CAN_RDT0R_DLC_Pos;
 80005aa:	4026      	ands	r6, r4
  pRxMsg->FMI = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR) >> CAN_RDT0R_FMI_Pos;
 80005ac:	0a2d      	lsrs	r5, r5, #8
  /* Get the FIFONumber */
  pRxMsg->FIFONumber = FIFONumber;
  /* Get the data field */
  pRxMsg->Data[0] = (CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA0_Pos;
 80005ae:	010c      	lsls	r4, r1, #4
  pRxMsg->FMI = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR) >> CAN_RDT0R_FMI_Pos;
 80005b0:	b2ed      	uxtb	r5, r5
  pRxMsg->Data[0] = (CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA0_Pos;
 80005b2:	1914      	adds	r4, r2, r4
  pRxMsg->FMI = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR) >> CAN_RDT0R_FMI_Pos;
 80005b4:	61dd      	str	r5, [r3, #28]
  pRxMsg->Data[0] = (CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA0_Pos;
 80005b6:	0025      	movs	r5, r4
 80005b8:	35b9      	adds	r5, #185	; 0xb9
 80005ba:	35ff      	adds	r5, #255	; 0xff
  pRxMsg->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR) >> CAN_RDT0R_DLC_Pos;
 80005bc:	611e      	str	r6, [r3, #16]
  pRxMsg->Data[0] = (CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA0_Pos;
 80005be:	682e      	ldr	r6, [r5, #0]
  pRxMsg->Data[1] = (CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA1_Pos;
  pRxMsg->Data[2] = (CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA2_Pos;
  pRxMsg->Data[3] = (CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA3_Pos;
  pRxMsg->Data[4] = (CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR) >> CAN_RDH0R_DATA4_Pos;
 80005c0:	34bd      	adds	r4, #189	; 0xbd
  pRxMsg->Data[0] = (CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA0_Pos;
 80005c2:	751e      	strb	r6, [r3, #20]
  pRxMsg->Data[1] = (CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA1_Pos;
 80005c4:	682e      	ldr	r6, [r5, #0]
  pRxMsg->Data[4] = (CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR) >> CAN_RDH0R_DATA4_Pos;
 80005c6:	34ff      	adds	r4, #255	; 0xff
  pRxMsg->Data[1] = (CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA1_Pos;
 80005c8:	0a36      	lsrs	r6, r6, #8
 80005ca:	755e      	strb	r6, [r3, #21]
  pRxMsg->Data[2] = (CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA2_Pos;
 80005cc:	682e      	ldr	r6, [r5, #0]
  pRxMsg->FIFONumber = FIFONumber;
 80005ce:	6219      	str	r1, [r3, #32]
  pRxMsg->Data[2] = (CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA2_Pos;
 80005d0:	0c36      	lsrs	r6, r6, #16
 80005d2:	759e      	strb	r6, [r3, #22]
  pRxMsg->Data[3] = (CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA3_Pos;
 80005d4:	682d      	ldr	r5, [r5, #0]
 80005d6:	0e2d      	lsrs	r5, r5, #24
 80005d8:	75dd      	strb	r5, [r3, #23]
  pRxMsg->Data[4] = (CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR) >> CAN_RDH0R_DATA4_Pos;
 80005da:	6825      	ldr	r5, [r4, #0]
 80005dc:	761d      	strb	r5, [r3, #24]
  pRxMsg->Data[5] = (CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR) >> CAN_RDH0R_DATA5_Pos;
 80005de:	6825      	ldr	r5, [r4, #0]
 80005e0:	0a2d      	lsrs	r5, r5, #8
 80005e2:	765d      	strb	r5, [r3, #25]
  pRxMsg->Data[6] = (CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR) >> CAN_RDH0R_DATA6_Pos;
 80005e4:	6825      	ldr	r5, [r4, #0]
 80005e6:	0c2d      	lsrs	r5, r5, #16
 80005e8:	769d      	strb	r5, [r3, #26]
  pRxMsg->Data[7] = (CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR) >> CAN_RDH0R_DATA7_Pos;
 80005ea:	6824      	ldr	r4, [r4, #0]
 80005ec:	0e24      	lsrs	r4, r4, #24
 80005ee:	76dc      	strb	r4, [r3, #27]
 80005f0:	2320      	movs	r3, #32

  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 80005f2:	2900      	cmp	r1, #0
 80005f4:	d129      	bne.n	800064a <CAN_Receive_IT+0xd6>
  {
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO0);
 80005f6:	68d4      	ldr	r4, [r2, #12]
 80005f8:	4323      	orrs	r3, r4
    
    /* Disable FIFO 0 overrun and message pending Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FOV0 | CAN_IT_FMP0);
 80005fa:	240a      	movs	r4, #10
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO0);
 80005fc:	60d3      	str	r3, [r2, #12]
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FOV0 | CAN_IT_FMP0);
 80005fe:	6953      	ldr	r3, [r2, #20]
  else /* FIFONumber == CAN_FIFO1 */
  {
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO1);
    
    /* Disable FIFO 1 overrun and message pending Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FOV1 | CAN_IT_FMP1);
 8000600:	43a3      	bics	r3, r4
 8000602:	6153      	str	r3, [r2, #20]
  }
  
  if((hcan->State == HAL_CAN_STATE_BUSY_RX0) || (hcan->State == HAL_CAN_STATE_BUSY_RX1))
 8000604:	0003      	movs	r3, r0
 8000606:	333d      	adds	r3, #61	; 0x3d
 8000608:	781a      	ldrb	r2, [r3, #0]
 800060a:	2a22      	cmp	r2, #34	; 0x22
 800060c:	d002      	beq.n	8000614 <CAN_Receive_IT+0xa0>
 800060e:	781a      	ldrb	r2, [r3, #0]
 8000610:	2a32      	cmp	r2, #50	; 0x32
 8000612:	d104      	bne.n	800061e <CAN_Receive_IT+0xaa>
    /*  - Disable Error warning Interrupt */
    /*  - Disable Error passive Interrupt */
    /*  - Disable Bus-off Interrupt */
    /*  - Disable Last error code Interrupt */
    /*  - Disable Error Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG |
 8000614:	6804      	ldr	r4, [r0, #0]
 8000616:	4d19      	ldr	r5, [pc, #100]	; (800067c <CAN_Receive_IT+0x108>)
 8000618:	6962      	ldr	r2, [r4, #20]
 800061a:	402a      	ands	r2, r5
 800061c:	6162      	str	r2, [r4, #20]
  }

  /* Change CAN state */
  if (FIFONumber == CAN_FIFO0)
  {
    switch(hcan->State)
 800061e:	781a      	ldrb	r2, [r3, #0]
 8000620:	b2d2      	uxtb	r2, r2
  if (FIFONumber == CAN_FIFO0)
 8000622:	2900      	cmp	r1, #0
 8000624:	d11b      	bne.n	800065e <CAN_Receive_IT+0xea>
    switch(hcan->State)
 8000626:	2a62      	cmp	r2, #98	; 0x62
 8000628:	d015      	beq.n	8000656 <CAN_Receive_IT+0xe2>
 800062a:	2a72      	cmp	r2, #114	; 0x72
 800062c:	d015      	beq.n	800065a <CAN_Receive_IT+0xe6>
 800062e:	2a42      	cmp	r2, #66	; 0x42
 8000630:	d121      	bne.n	8000676 <CAN_Receive_IT+0x102>
    {
      case(HAL_CAN_STATE_BUSY_TX_RX0):
        hcan->State = HAL_CAN_STATE_BUSY_TX;
 8000632:	3a30      	subs	r2, #48	; 0x30
        break;
      case(HAL_CAN_STATE_BUSY_TX_RX0_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0;
        break;
      default: /* HAL_CAN_STATE_BUSY_RX1 */
        hcan->State = HAL_CAN_STATE_READY;
 8000634:	701a      	strb	r2, [r3, #0]
        break;
    }
  }

  /* Receive complete callback */ 
  HAL_CAN_RxCpltCallback(hcan);
 8000636:	f000 ff13 	bl	8001460 <HAL_CAN_RxCpltCallback>

  /* Return function status */
  return HAL_OK;
}
 800063a:	2000      	movs	r0, #0
 800063c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    pRxMsg = hcan->pRx1Msg;
 800063e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8000640:	e79c      	b.n	800057c <CAN_Receive_IT+0x8>
    pRxMsg->ExtId = (0xFFFFFFF8U & hcan->Instance->sFIFOMailBox[FIFONumber].RIR) >> CAN_RI0R_EXID_Pos;
 8000642:	59af      	ldr	r7, [r5, r6]
 8000644:	08ff      	lsrs	r7, r7, #3
 8000646:	605f      	str	r7, [r3, #4]
 8000648:	e7a6      	b.n	8000598 <CAN_Receive_IT+0x24>
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO1);
 800064a:	6914      	ldr	r4, [r2, #16]
 800064c:	4323      	orrs	r3, r4
 800064e:	6113      	str	r3, [r2, #16]
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FOV1 | CAN_IT_FMP1);
 8000650:	6953      	ldr	r3, [r2, #20]
 8000652:	2450      	movs	r4, #80	; 0x50
 8000654:	e7d4      	b.n	8000600 <CAN_Receive_IT+0x8c>
        hcan->State = HAL_CAN_STATE_BUSY_RX1;
 8000656:	2232      	movs	r2, #50	; 0x32
 8000658:	e7ec      	b.n	8000634 <CAN_Receive_IT+0xc0>
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX1;
 800065a:	2252      	movs	r2, #82	; 0x52
 800065c:	e7ea      	b.n	8000634 <CAN_Receive_IT+0xc0>
    switch(hcan->State)
 800065e:	2a62      	cmp	r2, #98	; 0x62
 8000660:	d005      	beq.n	800066e <CAN_Receive_IT+0xfa>
 8000662:	2a72      	cmp	r2, #114	; 0x72
 8000664:	d005      	beq.n	8000672 <CAN_Receive_IT+0xfe>
 8000666:	2a52      	cmp	r2, #82	; 0x52
 8000668:	d105      	bne.n	8000676 <CAN_Receive_IT+0x102>
        hcan->State = HAL_CAN_STATE_BUSY_TX;
 800066a:	3a40      	subs	r2, #64	; 0x40
 800066c:	e7e2      	b.n	8000634 <CAN_Receive_IT+0xc0>
        hcan->State = HAL_CAN_STATE_BUSY_RX0;
 800066e:	2222      	movs	r2, #34	; 0x22
 8000670:	e7e0      	b.n	8000634 <CAN_Receive_IT+0xc0>
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0;
 8000672:	2242      	movs	r2, #66	; 0x42
 8000674:	e7de      	b.n	8000634 <CAN_Receive_IT+0xc0>
        hcan->State = HAL_CAN_STATE_READY;
 8000676:	2201      	movs	r2, #1
 8000678:	e7dc      	b.n	8000634 <CAN_Receive_IT+0xc0>
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	ffff70ff 	.word	0xffff70ff

08000680 <HAL_CAN_IRQHandler>:
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_FOV0))    &&
 8000680:	2210      	movs	r2, #16
 8000682:	6803      	ldr	r3, [r0, #0]
{
 8000684:	b570      	push	{r4, r5, r6, lr}
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_FOV0))    &&
 8000686:	68d9      	ldr	r1, [r3, #12]
{
 8000688:	0004      	movs	r4, r0
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800068a:	2500      	movs	r5, #0
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_FOV0))    &&
 800068c:	4211      	tst	r1, r2
 800068e:	d005      	beq.n	800069c <HAL_CAN_IRQHandler+0x1c>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FOV0)))
 8000690:	6959      	ldr	r1, [r3, #20]
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_FOV0))    &&
 8000692:	0709      	lsls	r1, r1, #28
 8000694:	d502      	bpl.n	800069c <HAL_CAN_IRQHandler+0x1c>
    errorcode |= HAL_CAN_ERROR_FOV0;
 8000696:	2580      	movs	r5, #128	; 0x80
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000698:	60da      	str	r2, [r3, #12]
    errorcode |= HAL_CAN_ERROR_FOV0;
 800069a:	00ad      	lsls	r5, r5, #2
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_FOV1))    &&
 800069c:	2210      	movs	r2, #16
 800069e:	6919      	ldr	r1, [r3, #16]
 80006a0:	4211      	tst	r1, r2
 80006a2:	d006      	beq.n	80006b2 <HAL_CAN_IRQHandler+0x32>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FOV1)))
 80006a4:	6959      	ldr	r1, [r3, #20]
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_FOV1))    &&
 80006a6:	0649      	lsls	r1, r1, #25
 80006a8:	d503      	bpl.n	80006b2 <HAL_CAN_IRQHandler+0x32>
    errorcode |= HAL_CAN_ERROR_FOV1;
 80006aa:	2180      	movs	r1, #128	; 0x80
 80006ac:	00c9      	lsls	r1, r1, #3
 80006ae:	430d      	orrs	r5, r1
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80006b0:	611a      	str	r2, [r3, #16]
  if(__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_TME))
 80006b2:	695a      	ldr	r2, [r3, #20]
 80006b4:	07d2      	lsls	r2, r2, #31
 80006b6:	d53a      	bpl.n	800072e <HAL_CAN_IRQHandler+0xae>
    if((__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_0)) ||
 80006b8:	689a      	ldr	r2, [r3, #8]
 80006ba:	4964      	ldr	r1, [pc, #400]	; (800084c <HAL_CAN_IRQHandler+0x1cc>)
 80006bc:	400a      	ands	r2, r1
 80006be:	428a      	cmp	r2, r1
 80006c0:	d009      	beq.n	80006d6 <HAL_CAN_IRQHandler+0x56>
       (__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_1)) ||
 80006c2:	689a      	ldr	r2, [r3, #8]
 80006c4:	4962      	ldr	r1, [pc, #392]	; (8000850 <HAL_CAN_IRQHandler+0x1d0>)
 80006c6:	400a      	ands	r2, r1
    if((__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_0)) ||
 80006c8:	428a      	cmp	r2, r1
 80006ca:	d004      	beq.n	80006d6 <HAL_CAN_IRQHandler+0x56>
       (__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_2)))
 80006cc:	689a      	ldr	r2, [r3, #8]
 80006ce:	4961      	ldr	r1, [pc, #388]	; (8000854 <HAL_CAN_IRQHandler+0x1d4>)
 80006d0:	400a      	ands	r2, r1
       (__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_1)) ||
 80006d2:	428a      	cmp	r2, r1
 80006d4:	d12b      	bne.n	800072e <HAL_CAN_IRQHandler+0xae>
      if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_TXOK0)) ||
 80006d6:	689a      	ldr	r2, [r3, #8]
 80006d8:	0792      	lsls	r2, r2, #30
 80006da:	d406      	bmi.n	80006ea <HAL_CAN_IRQHandler+0x6a>
         (__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_TXOK1)) ||
 80006dc:	689a      	ldr	r2, [r3, #8]
      if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_TXOK0)) ||
 80006de:	0592      	lsls	r2, r2, #22
 80006e0:	d403      	bmi.n	80006ea <HAL_CAN_IRQHandler+0x6a>
         (__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_TXOK2)))
 80006e2:	689a      	ldr	r2, [r3, #8]
         (__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_TXOK1)) ||
 80006e4:	0392      	lsls	r2, r2, #14
 80006e6:	d400      	bmi.n	80006ea <HAL_CAN_IRQHandler+0x6a>
 80006e8:	e092      	b.n	8000810 <HAL_CAN_IRQHandler+0x190>
  __HAL_CAN_DISABLE_IT(hcan, CAN_IT_TME);
 80006ea:	2101      	movs	r1, #1
 80006ec:	695a      	ldr	r2, [r3, #20]
 80006ee:	438a      	bics	r2, r1
 80006f0:	615a      	str	r2, [r3, #20]
  if(hcan->State == HAL_CAN_STATE_BUSY_TX)
 80006f2:	0022      	movs	r2, r4
 80006f4:	323d      	adds	r2, #61	; 0x3d
 80006f6:	7811      	ldrb	r1, [r2, #0]
 80006f8:	2912      	cmp	r1, #18
 80006fa:	d103      	bne.n	8000704 <HAL_CAN_IRQHandler+0x84>
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG |
 80006fc:	6959      	ldr	r1, [r3, #20]
 80006fe:	4856      	ldr	r0, [pc, #344]	; (8000858 <HAL_CAN_IRQHandler+0x1d8>)
 8000700:	4001      	ands	r1, r0
 8000702:	6159      	str	r1, [r3, #20]
  switch(hcan->State)
 8000704:	7813      	ldrb	r3, [r2, #0]
 8000706:	b2db      	uxtb	r3, r3
 8000708:	2b52      	cmp	r3, #82	; 0x52
 800070a:	d100      	bne.n	800070e <HAL_CAN_IRQHandler+0x8e>
 800070c:	e07a      	b.n	8000804 <HAL_CAN_IRQHandler+0x184>
 800070e:	2b72      	cmp	r3, #114	; 0x72
 8000710:	d100      	bne.n	8000714 <HAL_CAN_IRQHandler+0x94>
 8000712:	e079      	b.n	8000808 <HAL_CAN_IRQHandler+0x188>
 8000714:	2b42      	cmp	r3, #66	; 0x42
 8000716:	d000      	beq.n	800071a <HAL_CAN_IRQHandler+0x9a>
 8000718:	e078      	b.n	800080c <HAL_CAN_IRQHandler+0x18c>
      hcan->State = HAL_CAN_STATE_BUSY_RX0;
 800071a:	3b20      	subs	r3, #32
      hcan->State = HAL_CAN_STATE_READY;
 800071c:	7013      	strb	r3, [r2, #0]
  HAL_CAN_TxCpltCallback(hcan);
 800071e:	0020      	movs	r0, r4
 8000720:	f000 ff0a 	bl	8001538 <HAL_CAN_TxCpltCallback>
      SET_BIT(hcan->Instance->TSR, CAN_TSR_RQCP0  | CAN_TSR_RQCP1  | CAN_TSR_RQCP2 | \
 8000724:	6822      	ldr	r2, [r4, #0]
 8000726:	4b4d      	ldr	r3, [pc, #308]	; (800085c <HAL_CAN_IRQHandler+0x1dc>)
 8000728:	6891      	ldr	r1, [r2, #8]
 800072a:	430b      	orrs	r3, r1
 800072c:	6093      	str	r3, [r2, #8]
  if((__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP0)) &&
 800072e:	6823      	ldr	r3, [r4, #0]
 8000730:	695a      	ldr	r2, [r3, #20]
 8000732:	0792      	lsls	r2, r2, #30
 8000734:	d506      	bpl.n	8000744 <HAL_CAN_IRQHandler+0xc4>
     (__HAL_CAN_MSG_PENDING(hcan, CAN_FIFO0) != 0U))
 8000736:	68db      	ldr	r3, [r3, #12]
  if((__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP0)) &&
 8000738:	079b      	lsls	r3, r3, #30
 800073a:	d003      	beq.n	8000744 <HAL_CAN_IRQHandler+0xc4>
    CAN_Receive_IT(hcan, CAN_FIFO0);
 800073c:	2100      	movs	r1, #0
 800073e:	0020      	movs	r0, r4
 8000740:	f7ff ff18 	bl	8000574 <CAN_Receive_IT>
  if((__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP1)) &&
 8000744:	6823      	ldr	r3, [r4, #0]
 8000746:	695a      	ldr	r2, [r3, #20]
 8000748:	06d2      	lsls	r2, r2, #27
 800074a:	d506      	bpl.n	800075a <HAL_CAN_IRQHandler+0xda>
     (__HAL_CAN_MSG_PENDING(hcan, CAN_FIFO1) != 0U))
 800074c:	691b      	ldr	r3, [r3, #16]
  if((__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP1)) &&
 800074e:	079b      	lsls	r3, r3, #30
 8000750:	d003      	beq.n	800075a <HAL_CAN_IRQHandler+0xda>
    CAN_Receive_IT(hcan, CAN_FIFO1);
 8000752:	2101      	movs	r1, #1
 8000754:	0020      	movs	r0, r4
 8000756:	f7ff ff0d 	bl	8000574 <CAN_Receive_IT>
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EWG))    &&
 800075a:	2201      	movs	r2, #1
  hcan->ErrorCode |= errorcode;
 800075c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800075e:	431d      	orrs	r5, r3
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EWG))    &&
 8000760:	6823      	ldr	r3, [r4, #0]
  hcan->ErrorCode |= errorcode;
 8000762:	6425      	str	r5, [r4, #64]	; 0x40
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EWG))    &&
 8000764:	6999      	ldr	r1, [r3, #24]
 8000766:	4211      	tst	r1, r2
 8000768:	d008      	beq.n	800077c <HAL_CAN_IRQHandler+0xfc>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EWG)) &&
 800076a:	6959      	ldr	r1, [r3, #20]
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EWG))    &&
 800076c:	05c9      	lsls	r1, r1, #23
 800076e:	d505      	bpl.n	800077c <HAL_CAN_IRQHandler+0xfc>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
 8000770:	6959      	ldr	r1, [r3, #20]
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EWG)) &&
 8000772:	0409      	lsls	r1, r1, #16
 8000774:	d502      	bpl.n	800077c <HAL_CAN_IRQHandler+0xfc>
    hcan->ErrorCode |= HAL_CAN_ERROR_EWG;
 8000776:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000778:	430a      	orrs	r2, r1
 800077a:	6422      	str	r2, [r4, #64]	; 0x40
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EPV))    &&
 800077c:	2202      	movs	r2, #2
 800077e:	6999      	ldr	r1, [r3, #24]
 8000780:	4211      	tst	r1, r2
 8000782:	d008      	beq.n	8000796 <HAL_CAN_IRQHandler+0x116>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EPV)) &&
 8000784:	6959      	ldr	r1, [r3, #20]
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EPV))    &&
 8000786:	0589      	lsls	r1, r1, #22
 8000788:	d505      	bpl.n	8000796 <HAL_CAN_IRQHandler+0x116>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
 800078a:	6959      	ldr	r1, [r3, #20]
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EPV)) &&
 800078c:	0409      	lsls	r1, r1, #16
 800078e:	d502      	bpl.n	8000796 <HAL_CAN_IRQHandler+0x116>
    hcan->ErrorCode |= HAL_CAN_ERROR_EPV;
 8000790:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000792:	430a      	orrs	r2, r1
 8000794:	6422      	str	r2, [r4, #64]	; 0x40
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_BOF))    &&
 8000796:	2204      	movs	r2, #4
 8000798:	6999      	ldr	r1, [r3, #24]
 800079a:	4211      	tst	r1, r2
 800079c:	d008      	beq.n	80007b0 <HAL_CAN_IRQHandler+0x130>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_BOF)) &&
 800079e:	6959      	ldr	r1, [r3, #20]
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_BOF))    &&
 80007a0:	0549      	lsls	r1, r1, #21
 80007a2:	d505      	bpl.n	80007b0 <HAL_CAN_IRQHandler+0x130>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
 80007a4:	6959      	ldr	r1, [r3, #20]
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_BOF)) &&
 80007a6:	0409      	lsls	r1, r1, #16
 80007a8:	d502      	bpl.n	80007b0 <HAL_CAN_IRQHandler+0x130>
    hcan->ErrorCode |= HAL_CAN_ERROR_BOF;
 80007aa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80007ac:	430a      	orrs	r2, r1
 80007ae:	6422      	str	r2, [r4, #64]	; 0x40
  if((!HAL_IS_BIT_CLR(hcan->Instance->ESR, CAN_ESR_LEC)) &&
 80007b0:	2170      	movs	r1, #112	; 0x70
 80007b2:	699a      	ldr	r2, [r3, #24]
 80007b4:	420a      	tst	r2, r1
 80007b6:	d012      	beq.n	80007de <HAL_CAN_IRQHandler+0x15e>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_LEC))         &&
 80007b8:	695a      	ldr	r2, [r3, #20]
  if((!HAL_IS_BIT_CLR(hcan->Instance->ESR, CAN_ESR_LEC)) &&
 80007ba:	0512      	lsls	r2, r2, #20
 80007bc:	d50f      	bpl.n	80007de <HAL_CAN_IRQHandler+0x15e>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
 80007be:	695a      	ldr	r2, [r3, #20]
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_LEC))         &&
 80007c0:	0412      	lsls	r2, r2, #16
 80007c2:	d50c      	bpl.n	80007de <HAL_CAN_IRQHandler+0x15e>
    switch(hcan->Instance->ESR & CAN_ESR_LEC)
 80007c4:	699a      	ldr	r2, [r3, #24]
 80007c6:	400a      	ands	r2, r1
 80007c8:	2a30      	cmp	r2, #48	; 0x30
 80007ca:	d035      	beq.n	8000838 <HAL_CAN_IRQHandler+0x1b8>
 80007cc:	d824      	bhi.n	8000818 <HAL_CAN_IRQHandler+0x198>
 80007ce:	2a10      	cmp	r2, #16
 80007d0:	d02a      	beq.n	8000828 <HAL_CAN_IRQHandler+0x1a8>
 80007d2:	2a20      	cmp	r2, #32
 80007d4:	d02d      	beq.n	8000832 <HAL_CAN_IRQHandler+0x1b2>
    CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80007d6:	2170      	movs	r1, #112	; 0x70
 80007d8:	699a      	ldr	r2, [r3, #24]
 80007da:	438a      	bics	r2, r1
 80007dc:	619a      	str	r2, [r3, #24]
  if(hcan->ErrorCode != HAL_CAN_ERROR_NONE)
 80007de:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80007e0:	2a00      	cmp	r2, #0
 80007e2:	d00e      	beq.n	8000802 <HAL_CAN_IRQHandler+0x182>
    SET_BIT(hcan->Instance->MSR, CAN_MSR_ERRI);
 80007e4:	2204      	movs	r2, #4
 80007e6:	6859      	ldr	r1, [r3, #4]
    HAL_CAN_ErrorCallback(hcan);
 80007e8:	0020      	movs	r0, r4
    SET_BIT(hcan->Instance->MSR, CAN_MSR_ERRI);
 80007ea:	430a      	orrs	r2, r1
 80007ec:	605a      	str	r2, [r3, #4]
    hcan->State = HAL_CAN_STATE_READY;
 80007ee:	0022      	movs	r2, r4
 80007f0:	2101      	movs	r1, #1
 80007f2:	323d      	adds	r2, #61	; 0x3d
 80007f4:	7011      	strb	r1, [r2, #0]
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG |
 80007f6:	695a      	ldr	r2, [r3, #20]
 80007f8:	4919      	ldr	r1, [pc, #100]	; (8000860 <HAL_CAN_IRQHandler+0x1e0>)
 80007fa:	400a      	ands	r2, r1
 80007fc:	615a      	str	r2, [r3, #20]
    HAL_CAN_ErrorCallback(hcan);
 80007fe:	f000 febb 	bl	8001578 <HAL_CAN_ErrorCallback>
}
 8000802:	bd70      	pop	{r4, r5, r6, pc}
      hcan->State = HAL_CAN_STATE_BUSY_RX1;
 8000804:	2332      	movs	r3, #50	; 0x32
 8000806:	e789      	b.n	800071c <HAL_CAN_IRQHandler+0x9c>
      hcan->State = HAL_CAN_STATE_BUSY_RX0_RX1;
 8000808:	2362      	movs	r3, #98	; 0x62
 800080a:	e787      	b.n	800071c <HAL_CAN_IRQHandler+0x9c>
      hcan->State = HAL_CAN_STATE_READY;
 800080c:	2301      	movs	r3, #1
 800080e:	e785      	b.n	800071c <HAL_CAN_IRQHandler+0x9c>
        errorcode |= HAL_CAN_ERROR_TXFAIL;
 8000810:	2380      	movs	r3, #128	; 0x80
 8000812:	011b      	lsls	r3, r3, #4
 8000814:	431d      	orrs	r5, r3
 8000816:	e785      	b.n	8000724 <HAL_CAN_IRQHandler+0xa4>
    switch(hcan->Instance->ESR & CAN_ESR_LEC)
 8000818:	2a50      	cmp	r2, #80	; 0x50
 800081a:	d010      	beq.n	800083e <HAL_CAN_IRQHandler+0x1be>
 800081c:	2a60      	cmp	r2, #96	; 0x60
 800081e:	d011      	beq.n	8000844 <HAL_CAN_IRQHandler+0x1c4>
 8000820:	2a40      	cmp	r2, #64	; 0x40
 8000822:	d1d8      	bne.n	80007d6 <HAL_CAN_IRQHandler+0x156>
          hcan->ErrorCode |= HAL_CAN_ERROR_BR;
 8000824:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000826:	e001      	b.n	800082c <HAL_CAN_IRQHandler+0x1ac>
          hcan->ErrorCode |= HAL_CAN_ERROR_STF;
 8000828:	2208      	movs	r2, #8
 800082a:	6c21      	ldr	r1, [r4, #64]	; 0x40
          hcan->ErrorCode |= HAL_CAN_ERROR_CRC;
 800082c:	430a      	orrs	r2, r1
 800082e:	6422      	str	r2, [r4, #64]	; 0x40
          break;
 8000830:	e7d1      	b.n	80007d6 <HAL_CAN_IRQHandler+0x156>
          hcan->ErrorCode |= HAL_CAN_ERROR_FOR;
 8000832:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000834:	2210      	movs	r2, #16
 8000836:	e7f9      	b.n	800082c <HAL_CAN_IRQHandler+0x1ac>
          hcan->ErrorCode |= HAL_CAN_ERROR_ACK;
 8000838:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800083a:	2220      	movs	r2, #32
 800083c:	e7f6      	b.n	800082c <HAL_CAN_IRQHandler+0x1ac>
          hcan->ErrorCode |= HAL_CAN_ERROR_BD;
 800083e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000840:	2280      	movs	r2, #128	; 0x80
 8000842:	e7f3      	b.n	800082c <HAL_CAN_IRQHandler+0x1ac>
          hcan->ErrorCode |= HAL_CAN_ERROR_CRC;
 8000844:	2280      	movs	r2, #128	; 0x80
 8000846:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000848:	0052      	lsls	r2, r2, #1
 800084a:	e7ef      	b.n	800082c <HAL_CAN_IRQHandler+0x1ac>
 800084c:	04000001 	.word	0x04000001
 8000850:	08000100 	.word	0x08000100
 8000854:	10010000 	.word	0x10010000
 8000858:	ffff70ff 	.word	0xffff70ff
 800085c:	00010519 	.word	0x00010519
 8000860:	ffff70a4 	.word	0xffff70a4

08000864 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000864:	b570      	push	{r4, r5, r6, lr}
 8000866:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000868:	2800      	cmp	r0, #0
 800086a:	da14      	bge.n	8000896 <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800086c:	230f      	movs	r3, #15
 800086e:	b2c0      	uxtb	r0, r0
 8000870:	4003      	ands	r3, r0
 8000872:	3b08      	subs	r3, #8
 8000874:	4a11      	ldr	r2, [pc, #68]	; (80008bc <HAL_NVIC_SetPriority+0x58>)
 8000876:	089b      	lsrs	r3, r3, #2
 8000878:	009b      	lsls	r3, r3, #2
 800087a:	189b      	adds	r3, r3, r2
 800087c:	2203      	movs	r2, #3
 800087e:	4010      	ands	r0, r2
 8000880:	4090      	lsls	r0, r2
 8000882:	32fc      	adds	r2, #252	; 0xfc
 8000884:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000886:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000888:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800088a:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800088c:	69dc      	ldr	r4, [r3, #28]
 800088e:	43ac      	bics	r4, r5
 8000890:	4321      	orrs	r1, r4
 8000892:	61d9      	str	r1, [r3, #28]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000894:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000896:	2503      	movs	r5, #3
 8000898:	0883      	lsrs	r3, r0, #2
 800089a:	4028      	ands	r0, r5
 800089c:	40a8      	lsls	r0, r5
 800089e:	35fc      	adds	r5, #252	; 0xfc
 80008a0:	002e      	movs	r6, r5
 80008a2:	4a07      	ldr	r2, [pc, #28]	; (80008c0 <HAL_NVIC_SetPriority+0x5c>)
 80008a4:	009b      	lsls	r3, r3, #2
 80008a6:	189b      	adds	r3, r3, r2
 80008a8:	22c0      	movs	r2, #192	; 0xc0
 80008aa:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008ac:	4029      	ands	r1, r5
 80008ae:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008b0:	0092      	lsls	r2, r2, #2
 80008b2:	589c      	ldr	r4, [r3, r2]
 80008b4:	43b4      	bics	r4, r6
 80008b6:	4321      	orrs	r1, r4
 80008b8:	5099      	str	r1, [r3, r2]
 80008ba:	e7eb      	b.n	8000894 <HAL_NVIC_SetPriority+0x30>
 80008bc:	e000ed00 	.word	0xe000ed00
 80008c0:	e000e100 	.word	0xe000e100

080008c4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80008c4:	231f      	movs	r3, #31
 80008c6:	4018      	ands	r0, r3
 80008c8:	3b1e      	subs	r3, #30
 80008ca:	4083      	lsls	r3, r0
 80008cc:	4a01      	ldr	r2, [pc, #4]	; (80008d4 <HAL_NVIC_EnableIRQ+0x10>)
 80008ce:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80008d0:	4770      	bx	lr
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	e000e100 	.word	0xe000e100

080008d8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008d8:	4a09      	ldr	r2, [pc, #36]	; (8000900 <HAL_SYSTICK_Config+0x28>)
 80008da:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 80008dc:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d80d      	bhi.n	80008fe <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008e2:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008e4:	4a07      	ldr	r2, [pc, #28]	; (8000904 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008e6:	4808      	ldr	r0, [pc, #32]	; (8000908 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008e8:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008ea:	6a03      	ldr	r3, [r0, #32]
 80008ec:	0609      	lsls	r1, r1, #24
 80008ee:	021b      	lsls	r3, r3, #8
 80008f0:	0a1b      	lsrs	r3, r3, #8
 80008f2:	430b      	orrs	r3, r1
 80008f4:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008f6:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008f8:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008fa:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008fc:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80008fe:	4770      	bx	lr
 8000900:	00ffffff 	.word	0x00ffffff
 8000904:	e000e010 	.word	0xe000e010
 8000908:	e000ed00 	.word	0xe000ed00

0800090c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800090c:	4b05      	ldr	r3, [pc, #20]	; (8000924 <HAL_SYSTICK_CLKSourceConfig+0x18>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800090e:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000910:	2804      	cmp	r0, #4
 8000912:	d102      	bne.n	800091a <HAL_SYSTICK_CLKSourceConfig+0xe>
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000914:	4310      	orrs	r0, r2
 8000916:	6018      	str	r0, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000918:	4770      	bx	lr
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800091a:	2104      	movs	r1, #4
 800091c:	438a      	bics	r2, r1
 800091e:	601a      	str	r2, [r3, #0]
}
 8000920:	e7fa      	b.n	8000918 <HAL_SYSTICK_CLKSourceConfig+0xc>
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	e000e010 	.word	0xe000e010

08000928 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000928:	4770      	bx	lr

0800092a <HAL_SYSTICK_IRQHandler>:
{
 800092a:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 800092c:	f7ff fffc 	bl	8000928 <HAL_SYSTICK_Callback>
}
 8000930:	bd10      	pop	{r4, pc}
	...

08000934 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000934:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000936:	4a56      	ldr	r2, [pc, #344]	; (8000a90 <HAL_GPIO_Init+0x15c>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000938:	680b      	ldr	r3, [r1, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800093a:	1882      	adds	r2, r0, r2
 800093c:	1e54      	subs	r4, r2, #1
 800093e:	41a2      	sbcs	r2, r4
{ 
 8000940:	b089      	sub	sp, #36	; 0x24
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000942:	9303      	str	r3, [sp, #12]
  uint32_t position = 0x00U;
 8000944:	2300      	movs	r3, #0
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000946:	3204      	adds	r2, #4
 8000948:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 800094a:	9a03      	ldr	r2, [sp, #12]
 800094c:	40da      	lsrs	r2, r3
 800094e:	d101      	bne.n	8000954 <HAL_GPIO_Init+0x20>
      }
    }
    
    position++;
  } 
}
 8000950:	b009      	add	sp, #36	; 0x24
 8000952:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000954:	2201      	movs	r2, #1
 8000956:	409a      	lsls	r2, r3
 8000958:	4694      	mov	ip, r2
 800095a:	4664      	mov	r4, ip
 800095c:	9a03      	ldr	r2, [sp, #12]
 800095e:	4022      	ands	r2, r4
 8000960:	9202      	str	r2, [sp, #8]
    if(iocurrent)
 8000962:	d100      	bne.n	8000966 <HAL_GPIO_Init+0x32>
 8000964:	e092      	b.n	8000a8c <HAL_GPIO_Init+0x158>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000966:	684a      	ldr	r2, [r1, #4]
 8000968:	9201      	str	r2, [sp, #4]
 800096a:	2210      	movs	r2, #16
 800096c:	9e01      	ldr	r6, [sp, #4]
 800096e:	4396      	bics	r6, r2
 8000970:	2e02      	cmp	r6, #2
 8000972:	d10d      	bne.n	8000990 <HAL_GPIO_Init+0x5c>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000974:	2407      	movs	r4, #7
 8000976:	270f      	movs	r7, #15
 8000978:	401c      	ands	r4, r3
 800097a:	00a4      	lsls	r4, r4, #2
 800097c:	40a7      	lsls	r7, r4
        temp = GPIOx->AFR[position >> 3];
 800097e:	08da      	lsrs	r2, r3, #3
 8000980:	0092      	lsls	r2, r2, #2
 8000982:	1882      	adds	r2, r0, r2
 8000984:	6a15      	ldr	r5, [r2, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000986:	43bd      	bics	r5, r7
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8000988:	690f      	ldr	r7, [r1, #16]
 800098a:	40a7      	lsls	r7, r4
 800098c:	433d      	orrs	r5, r7
        GPIOx->AFR[position >> 3U] = temp;
 800098e:	6215      	str	r5, [r2, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000990:	2203      	movs	r2, #3
 8000992:	0014      	movs	r4, r2
 8000994:	005d      	lsls	r5, r3, #1
 8000996:	40ac      	lsls	r4, r5
 8000998:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 800099a:	6807      	ldr	r7, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800099c:	3e01      	subs	r6, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 800099e:	4027      	ands	r7, r4
 80009a0:	9704      	str	r7, [sp, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009a2:	9f01      	ldr	r7, [sp, #4]
 80009a4:	403a      	ands	r2, r7
 80009a6:	40aa      	lsls	r2, r5
 80009a8:	9f04      	ldr	r7, [sp, #16]
 80009aa:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;
 80009ac:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009ae:	2e01      	cmp	r6, #1
 80009b0:	d80e      	bhi.n	80009d0 <HAL_GPIO_Init+0x9c>
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80009b2:	68ca      	ldr	r2, [r1, #12]
        temp = GPIOx->OSPEEDR; 
 80009b4:	6886      	ldr	r6, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80009b6:	40aa      	lsls	r2, r5
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80009b8:	4026      	ands	r6, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80009ba:	4332      	orrs	r2, r6
        GPIOx->OSPEEDR = temp;
 80009bc:	6082      	str	r2, [r0, #8]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80009be:	4662      	mov	r2, ip
        temp = GPIOx->OTYPER;
 80009c0:	6846      	ldr	r6, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80009c2:	4396      	bics	r6, r2
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80009c4:	9a01      	ldr	r2, [sp, #4]
 80009c6:	06d2      	lsls	r2, r2, #27
 80009c8:	0fd2      	lsrs	r2, r2, #31
 80009ca:	409a      	lsls	r2, r3
 80009cc:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 80009ce:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 80009d0:	68c2      	ldr	r2, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 80009d2:	4014      	ands	r4, r2
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80009d4:	688a      	ldr	r2, [r1, #8]
 80009d6:	40aa      	lsls	r2, r5
 80009d8:	4314      	orrs	r4, r2
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80009da:	9a01      	ldr	r2, [sp, #4]
      GPIOx->PUPDR = temp;
 80009dc:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80009de:	00d2      	lsls	r2, r2, #3
 80009e0:	d554      	bpl.n	8000a8c <HAL_GPIO_Init+0x158>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e2:	2601      	movs	r6, #1
 80009e4:	4a2b      	ldr	r2, [pc, #172]	; (8000a94 <HAL_GPIO_Init+0x160>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80009e6:	001d      	movs	r5, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e8:	6994      	ldr	r4, [r2, #24]
 80009ea:	4334      	orrs	r4, r6
 80009ec:	6194      	str	r4, [r2, #24]
 80009ee:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2];
 80009f0:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f2:	4032      	ands	r2, r6
 80009f4:	9207      	str	r2, [sp, #28]
 80009f6:	9a07      	ldr	r2, [sp, #28]
 80009f8:	4a27      	ldr	r2, [pc, #156]	; (8000a98 <HAL_GPIO_Init+0x164>)
 80009fa:	00a4      	lsls	r4, r4, #2
 80009fc:	18a4      	adds	r4, r4, r2
        temp = SYSCFG->EXTICR[position >> 2];
 80009fe:	68a2      	ldr	r2, [r4, #8]
 8000a00:	4694      	mov	ip, r2
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000a02:	2203      	movs	r2, #3
 8000a04:	4015      	ands	r5, r2
 8000a06:	00ad      	lsls	r5, r5, #2
 8000a08:	320c      	adds	r2, #12
 8000a0a:	40aa      	lsls	r2, r5
 8000a0c:	4667      	mov	r7, ip
 8000a0e:	4397      	bics	r7, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a10:	2290      	movs	r2, #144	; 0x90
 8000a12:	05d2      	lsls	r2, r2, #23
 8000a14:	4694      	mov	ip, r2
 8000a16:	2200      	movs	r2, #0
 8000a18:	4560      	cmp	r0, ip
 8000a1a:	d00d      	beq.n	8000a38 <HAL_GPIO_Init+0x104>
 8000a1c:	4a1f      	ldr	r2, [pc, #124]	; (8000a9c <HAL_GPIO_Init+0x168>)
 8000a1e:	4694      	mov	ip, r2
 8000a20:	0032      	movs	r2, r6
 8000a22:	4560      	cmp	r0, ip
 8000a24:	d008      	beq.n	8000a38 <HAL_GPIO_Init+0x104>
 8000a26:	4e1e      	ldr	r6, [pc, #120]	; (8000aa0 <HAL_GPIO_Init+0x16c>)
 8000a28:	1892      	adds	r2, r2, r2
 8000a2a:	42b0      	cmp	r0, r6
 8000a2c:	d004      	beq.n	8000a38 <HAL_GPIO_Init+0x104>
 8000a2e:	4e1d      	ldr	r6, [pc, #116]	; (8000aa4 <HAL_GPIO_Init+0x170>)
 8000a30:	3201      	adds	r2, #1
 8000a32:	42b0      	cmp	r0, r6
 8000a34:	d000      	beq.n	8000a38 <HAL_GPIO_Init+0x104>
 8000a36:	9a05      	ldr	r2, [sp, #20]
 8000a38:	40aa      	lsls	r2, r5
 8000a3a:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8000a3c:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 8000a3e:	4a1a      	ldr	r2, [pc, #104]	; (8000aa8 <HAL_GPIO_Init+0x174>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000a40:	9c02      	ldr	r4, [sp, #8]
        temp = EXTI->IMR;
 8000a42:	6816      	ldr	r6, [r2, #0]
          SET_BIT(temp, iocurrent); 
 8000a44:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a46:	9f01      	ldr	r7, [sp, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000a48:	43e4      	mvns	r4, r4
          SET_BIT(temp, iocurrent); 
 8000a4a:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a4c:	03ff      	lsls	r7, r7, #15
 8000a4e:	d401      	bmi.n	8000a54 <HAL_GPIO_Init+0x120>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000a50:	0035      	movs	r5, r6
 8000a52:	4025      	ands	r5, r4
        EXTI->IMR = temp;
 8000a54:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000a56:	6856      	ldr	r6, [r2, #4]
          SET_BIT(temp, iocurrent); 
 8000a58:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a5a:	9f01      	ldr	r7, [sp, #4]
          SET_BIT(temp, iocurrent); 
 8000a5c:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a5e:	03bf      	lsls	r7, r7, #14
 8000a60:	d401      	bmi.n	8000a66 <HAL_GPIO_Init+0x132>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000a62:	0035      	movs	r5, r6
 8000a64:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 8000a66:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000a68:	6896      	ldr	r6, [r2, #8]
          SET_BIT(temp, iocurrent); 
 8000a6a:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a6c:	9f01      	ldr	r7, [sp, #4]
          SET_BIT(temp, iocurrent); 
 8000a6e:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a70:	02ff      	lsls	r7, r7, #11
 8000a72:	d401      	bmi.n	8000a78 <HAL_GPIO_Init+0x144>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000a74:	0035      	movs	r5, r6
 8000a76:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 8000a78:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000a7a:	68d5      	ldr	r5, [r2, #12]
          SET_BIT(temp, iocurrent); 
 8000a7c:	9e02      	ldr	r6, [sp, #8]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a7e:	9f01      	ldr	r7, [sp, #4]
          SET_BIT(temp, iocurrent); 
 8000a80:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a82:	02bf      	lsls	r7, r7, #10
 8000a84:	d401      	bmi.n	8000a8a <HAL_GPIO_Init+0x156>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000a86:	4025      	ands	r5, r4
 8000a88:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 8000a8a:	60d6      	str	r6, [r2, #12]
    position++;
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	e75c      	b.n	800094a <HAL_GPIO_Init+0x16>
 8000a90:	b7fff000 	.word	0xb7fff000
 8000a94:	40021000 	.word	0x40021000
 8000a98:	40010000 	.word	0x40010000
 8000a9c:	48000400 	.word	0x48000400
 8000aa0:	48000800 	.word	0x48000800
 8000aa4:	48000c00 	.word	0x48000c00
 8000aa8:	40010400 	.word	0x40010400

08000aac <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000aac:	2a00      	cmp	r2, #0
 8000aae:	d001      	beq.n	8000ab4 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ab0:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ab2:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ab4:	6281      	str	r1, [r0, #40]	; 0x28
}
 8000ab6:	e7fc      	b.n	8000ab2 <HAL_GPIO_WritePin+0x6>

08000ab8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000aba:	6803      	ldr	r3, [r0, #0]
{
 8000abc:	b085      	sub	sp, #20
 8000abe:	0005      	movs	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ac0:	07db      	lsls	r3, r3, #31
 8000ac2:	d433      	bmi.n	8000b2c <HAL_RCC_OscConfig+0x74>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ac4:	682b      	ldr	r3, [r5, #0]
 8000ac6:	079b      	lsls	r3, r3, #30
 8000ac8:	d500      	bpl.n	8000acc <HAL_RCC_OscConfig+0x14>
 8000aca:	e08a      	b.n	8000be2 <HAL_RCC_OscConfig+0x12a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000acc:	682b      	ldr	r3, [r5, #0]
 8000ace:	071b      	lsls	r3, r3, #28
 8000ad0:	d500      	bpl.n	8000ad4 <HAL_RCC_OscConfig+0x1c>
 8000ad2:	e0ca      	b.n	8000c6a <HAL_RCC_OscConfig+0x1b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ad4:	682b      	ldr	r3, [r5, #0]
 8000ad6:	075b      	lsls	r3, r3, #29
 8000ad8:	d500      	bpl.n	8000adc <HAL_RCC_OscConfig+0x24>
 8000ada:	e0ed      	b.n	8000cb8 <HAL_RCC_OscConfig+0x200>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000adc:	682b      	ldr	r3, [r5, #0]
 8000ade:	06db      	lsls	r3, r3, #27
 8000ae0:	d51a      	bpl.n	8000b18 <HAL_RCC_OscConfig+0x60>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000ae2:	696a      	ldr	r2, [r5, #20]
 8000ae4:	4cbc      	ldr	r4, [pc, #752]	; (8000dd8 <HAL_RCC_OscConfig+0x320>)
 8000ae6:	2304      	movs	r3, #4
 8000ae8:	2a01      	cmp	r2, #1
 8000aea:	d000      	beq.n	8000aee <HAL_RCC_OscConfig+0x36>
 8000aec:	e159      	b.n	8000da2 <HAL_RCC_OscConfig+0x2ea>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000aee:	6b61      	ldr	r1, [r4, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000af0:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000af2:	430b      	orrs	r3, r1
 8000af4:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8000af6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000af8:	431a      	orrs	r2, r3
 8000afa:	6362      	str	r2, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000afc:	f7ff fbb8 	bl	8000270 <HAL_GetTick>
 8000b00:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000b02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000b04:	4233      	tst	r3, r6
 8000b06:	d100      	bne.n	8000b0a <HAL_RCC_OscConfig+0x52>
 8000b08:	e144      	b.n	8000d94 <HAL_RCC_OscConfig+0x2dc>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000b0a:	21f8      	movs	r1, #248	; 0xf8
 8000b0c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000b0e:	69ab      	ldr	r3, [r5, #24]
 8000b10:	438a      	bics	r2, r1
 8000b12:	00db      	lsls	r3, r3, #3
 8000b14:	4313      	orrs	r3, r2
 8000b16:	6363      	str	r3, [r4, #52]	; 0x34
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000b18:	682b      	ldr	r3, [r5, #0]
 8000b1a:	069b      	lsls	r3, r3, #26
 8000b1c:	d500      	bpl.n	8000b20 <HAL_RCC_OscConfig+0x68>
 8000b1e:	e167      	b.n	8000df0 <HAL_RCC_OscConfig+0x338>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b20:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000b22:	2900      	cmp	r1, #0
 8000b24:	d000      	beq.n	8000b28 <HAL_RCC_OscConfig+0x70>
 8000b26:	e1a4      	b.n	8000e72 <HAL_RCC_OscConfig+0x3ba>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000b28:	2000      	movs	r0, #0
 8000b2a:	e018      	b.n	8000b5e <HAL_RCC_OscConfig+0xa6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000b2c:	210c      	movs	r1, #12
 8000b2e:	4caa      	ldr	r4, [pc, #680]	; (8000dd8 <HAL_RCC_OscConfig+0x320>)
 8000b30:	6862      	ldr	r2, [r4, #4]
 8000b32:	400a      	ands	r2, r1
 8000b34:	2a04      	cmp	r2, #4
 8000b36:	d00b      	beq.n	8000b50 <HAL_RCC_OscConfig+0x98>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b38:	6863      	ldr	r3, [r4, #4]
 8000b3a:	400b      	ands	r3, r1
 8000b3c:	2b08      	cmp	r3, #8
 8000b3e:	d110      	bne.n	8000b62 <HAL_RCC_OscConfig+0xaa>
 8000b40:	22c0      	movs	r2, #192	; 0xc0
 8000b42:	6863      	ldr	r3, [r4, #4]
 8000b44:	0252      	lsls	r2, r2, #9
 8000b46:	4013      	ands	r3, r2
 8000b48:	2280      	movs	r2, #128	; 0x80
 8000b4a:	0252      	lsls	r2, r2, #9
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d108      	bne.n	8000b62 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b50:	6823      	ldr	r3, [r4, #0]
 8000b52:	039b      	lsls	r3, r3, #14
 8000b54:	d5b6      	bpl.n	8000ac4 <HAL_RCC_OscConfig+0xc>
 8000b56:	686b      	ldr	r3, [r5, #4]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d1b3      	bne.n	8000ac4 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000b5c:	2001      	movs	r0, #1
}
 8000b5e:	b005      	add	sp, #20
 8000b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b62:	686b      	ldr	r3, [r5, #4]
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d113      	bne.n	8000b90 <HAL_RCC_OscConfig+0xd8>
 8000b68:	2380      	movs	r3, #128	; 0x80
 8000b6a:	6822      	ldr	r2, [r4, #0]
 8000b6c:	025b      	lsls	r3, r3, #9
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b72:	f7ff fb7d 	bl	8000270 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b76:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000b78:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b7a:	02b6      	lsls	r6, r6, #10
 8000b7c:	6823      	ldr	r3, [r4, #0]
 8000b7e:	4233      	tst	r3, r6
 8000b80:	d1a0      	bne.n	8000ac4 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b82:	f7ff fb75 	bl	8000270 <HAL_GetTick>
 8000b86:	1bc0      	subs	r0, r0, r7
 8000b88:	2864      	cmp	r0, #100	; 0x64
 8000b8a:	d9f7      	bls.n	8000b7c <HAL_RCC_OscConfig+0xc4>
            return HAL_TIMEOUT;
 8000b8c:	2003      	movs	r0, #3
 8000b8e:	e7e6      	b.n	8000b5e <HAL_RCC_OscConfig+0xa6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d116      	bne.n	8000bc2 <HAL_RCC_OscConfig+0x10a>
 8000b94:	6823      	ldr	r3, [r4, #0]
 8000b96:	4a91      	ldr	r2, [pc, #580]	; (8000ddc <HAL_RCC_OscConfig+0x324>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b98:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	6023      	str	r3, [r4, #0]
 8000b9e:	6823      	ldr	r3, [r4, #0]
 8000ba0:	4a8f      	ldr	r2, [pc, #572]	; (8000de0 <HAL_RCC_OscConfig+0x328>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ba2:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000ba8:	f7ff fb62 	bl	8000270 <HAL_GetTick>
 8000bac:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bae:	6823      	ldr	r3, [r4, #0]
 8000bb0:	4233      	tst	r3, r6
 8000bb2:	d100      	bne.n	8000bb6 <HAL_RCC_OscConfig+0xfe>
 8000bb4:	e786      	b.n	8000ac4 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bb6:	f7ff fb5b 	bl	8000270 <HAL_GetTick>
 8000bba:	1bc0      	subs	r0, r0, r7
 8000bbc:	2864      	cmp	r0, #100	; 0x64
 8000bbe:	d9f6      	bls.n	8000bae <HAL_RCC_OscConfig+0xf6>
 8000bc0:	e7e4      	b.n	8000b8c <HAL_RCC_OscConfig+0xd4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bc2:	2b05      	cmp	r3, #5
 8000bc4:	d105      	bne.n	8000bd2 <HAL_RCC_OscConfig+0x11a>
 8000bc6:	2380      	movs	r3, #128	; 0x80
 8000bc8:	6822      	ldr	r2, [r4, #0]
 8000bca:	02db      	lsls	r3, r3, #11
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	6023      	str	r3, [r4, #0]
 8000bd0:	e7ca      	b.n	8000b68 <HAL_RCC_OscConfig+0xb0>
 8000bd2:	6823      	ldr	r3, [r4, #0]
 8000bd4:	4a81      	ldr	r2, [pc, #516]	; (8000ddc <HAL_RCC_OscConfig+0x324>)
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	6023      	str	r3, [r4, #0]
 8000bda:	6823      	ldr	r3, [r4, #0]
 8000bdc:	4a80      	ldr	r2, [pc, #512]	; (8000de0 <HAL_RCC_OscConfig+0x328>)
 8000bde:	4013      	ands	r3, r2
 8000be0:	e7c6      	b.n	8000b70 <HAL_RCC_OscConfig+0xb8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000be2:	220c      	movs	r2, #12
 8000be4:	4c7c      	ldr	r4, [pc, #496]	; (8000dd8 <HAL_RCC_OscConfig+0x320>)
 8000be6:	6863      	ldr	r3, [r4, #4]
 8000be8:	4213      	tst	r3, r2
 8000bea:	d00b      	beq.n	8000c04 <HAL_RCC_OscConfig+0x14c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000bec:	6863      	ldr	r3, [r4, #4]
 8000bee:	4013      	ands	r3, r2
 8000bf0:	2b08      	cmp	r3, #8
 8000bf2:	d115      	bne.n	8000c20 <HAL_RCC_OscConfig+0x168>
 8000bf4:	22c0      	movs	r2, #192	; 0xc0
 8000bf6:	6863      	ldr	r3, [r4, #4]
 8000bf8:	0252      	lsls	r2, r2, #9
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	2280      	movs	r2, #128	; 0x80
 8000bfe:	0212      	lsls	r2, r2, #8
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d10d      	bne.n	8000c20 <HAL_RCC_OscConfig+0x168>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c04:	6823      	ldr	r3, [r4, #0]
 8000c06:	079b      	lsls	r3, r3, #30
 8000c08:	d502      	bpl.n	8000c10 <HAL_RCC_OscConfig+0x158>
 8000c0a:	68eb      	ldr	r3, [r5, #12]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d1a5      	bne.n	8000b5c <HAL_RCC_OscConfig+0xa4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c10:	21f8      	movs	r1, #248	; 0xf8
 8000c12:	6822      	ldr	r2, [r4, #0]
 8000c14:	692b      	ldr	r3, [r5, #16]
 8000c16:	438a      	bics	r2, r1
 8000c18:	00db      	lsls	r3, r3, #3
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	6023      	str	r3, [r4, #0]
 8000c1e:	e755      	b.n	8000acc <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c20:	68ea      	ldr	r2, [r5, #12]
 8000c22:	2301      	movs	r3, #1
 8000c24:	2a00      	cmp	r2, #0
 8000c26:	d00f      	beq.n	8000c48 <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_ENABLE();
 8000c28:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c2a:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000c30:	f7ff fb1e 	bl	8000270 <HAL_GetTick>
 8000c34:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c36:	6823      	ldr	r3, [r4, #0]
 8000c38:	4233      	tst	r3, r6
 8000c3a:	d1e9      	bne.n	8000c10 <HAL_RCC_OscConfig+0x158>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c3c:	f7ff fb18 	bl	8000270 <HAL_GetTick>
 8000c40:	1bc0      	subs	r0, r0, r7
 8000c42:	2802      	cmp	r0, #2
 8000c44:	d9f7      	bls.n	8000c36 <HAL_RCC_OscConfig+0x17e>
 8000c46:	e7a1      	b.n	8000b8c <HAL_RCC_OscConfig+0xd4>
        __HAL_RCC_HSI_DISABLE();
 8000c48:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c4a:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8000c4c:	439a      	bics	r2, r3
 8000c4e:	6022      	str	r2, [r4, #0]
        tickstart = HAL_GetTick();
 8000c50:	f7ff fb0e 	bl	8000270 <HAL_GetTick>
 8000c54:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c56:	6823      	ldr	r3, [r4, #0]
 8000c58:	4233      	tst	r3, r6
 8000c5a:	d100      	bne.n	8000c5e <HAL_RCC_OscConfig+0x1a6>
 8000c5c:	e736      	b.n	8000acc <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c5e:	f7ff fb07 	bl	8000270 <HAL_GetTick>
 8000c62:	1bc0      	subs	r0, r0, r7
 8000c64:	2802      	cmp	r0, #2
 8000c66:	d9f6      	bls.n	8000c56 <HAL_RCC_OscConfig+0x19e>
 8000c68:	e790      	b.n	8000b8c <HAL_RCC_OscConfig+0xd4>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c6a:	69ea      	ldr	r2, [r5, #28]
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	4c5a      	ldr	r4, [pc, #360]	; (8000dd8 <HAL_RCC_OscConfig+0x320>)
 8000c70:	2a00      	cmp	r2, #0
 8000c72:	d010      	beq.n	8000c96 <HAL_RCC_OscConfig+0x1de>
      __HAL_RCC_LSI_ENABLE();
 8000c74:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c76:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	6263      	str	r3, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000c7c:	f7ff faf8 	bl	8000270 <HAL_GetTick>
 8000c80:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000c84:	4233      	tst	r3, r6
 8000c86:	d000      	beq.n	8000c8a <HAL_RCC_OscConfig+0x1d2>
 8000c88:	e724      	b.n	8000ad4 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c8a:	f7ff faf1 	bl	8000270 <HAL_GetTick>
 8000c8e:	1bc0      	subs	r0, r0, r7
 8000c90:	2802      	cmp	r0, #2
 8000c92:	d9f6      	bls.n	8000c82 <HAL_RCC_OscConfig+0x1ca>
 8000c94:	e77a      	b.n	8000b8c <HAL_RCC_OscConfig+0xd4>
      __HAL_RCC_LSI_DISABLE();
 8000c96:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c98:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 8000c9a:	439a      	bics	r2, r3
 8000c9c:	6262      	str	r2, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000c9e:	f7ff fae7 	bl	8000270 <HAL_GetTick>
 8000ca2:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ca4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000ca6:	4233      	tst	r3, r6
 8000ca8:	d100      	bne.n	8000cac <HAL_RCC_OscConfig+0x1f4>
 8000caa:	e713      	b.n	8000ad4 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000cac:	f7ff fae0 	bl	8000270 <HAL_GetTick>
 8000cb0:	1bc0      	subs	r0, r0, r7
 8000cb2:	2802      	cmp	r0, #2
 8000cb4:	d9f6      	bls.n	8000ca4 <HAL_RCC_OscConfig+0x1ec>
 8000cb6:	e769      	b.n	8000b8c <HAL_RCC_OscConfig+0xd4>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000cb8:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000cba:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000cbc:	4c46      	ldr	r4, [pc, #280]	; (8000dd8 <HAL_RCC_OscConfig+0x320>)
 8000cbe:	0552      	lsls	r2, r2, #21
 8000cc0:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000cc2:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000cc4:	4213      	tst	r3, r2
 8000cc6:	d108      	bne.n	8000cda <HAL_RCC_OscConfig+0x222>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000cc8:	69e3      	ldr	r3, [r4, #28]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	61e3      	str	r3, [r4, #28]
 8000cce:	69e3      	ldr	r3, [r4, #28]
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	9303      	str	r3, [sp, #12]
 8000cd4:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cda:	2780      	movs	r7, #128	; 0x80
 8000cdc:	4e41      	ldr	r6, [pc, #260]	; (8000de4 <HAL_RCC_OscConfig+0x32c>)
 8000cde:	007f      	lsls	r7, r7, #1
 8000ce0:	6833      	ldr	r3, [r6, #0]
 8000ce2:	423b      	tst	r3, r7
 8000ce4:	d006      	beq.n	8000cf4 <HAL_RCC_OscConfig+0x23c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ce6:	68ab      	ldr	r3, [r5, #8]
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d113      	bne.n	8000d14 <HAL_RCC_OscConfig+0x25c>
 8000cec:	6a22      	ldr	r2, [r4, #32]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	6223      	str	r3, [r4, #32]
 8000cf2:	e030      	b.n	8000d56 <HAL_RCC_OscConfig+0x29e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000cf4:	6833      	ldr	r3, [r6, #0]
 8000cf6:	433b      	orrs	r3, r7
 8000cf8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000cfa:	f7ff fab9 	bl	8000270 <HAL_GetTick>
 8000cfe:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d00:	6833      	ldr	r3, [r6, #0]
 8000d02:	423b      	tst	r3, r7
 8000d04:	d1ef      	bne.n	8000ce6 <HAL_RCC_OscConfig+0x22e>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d06:	f7ff fab3 	bl	8000270 <HAL_GetTick>
 8000d0a:	9b01      	ldr	r3, [sp, #4]
 8000d0c:	1ac0      	subs	r0, r0, r3
 8000d0e:	2864      	cmp	r0, #100	; 0x64
 8000d10:	d9f6      	bls.n	8000d00 <HAL_RCC_OscConfig+0x248>
 8000d12:	e73b      	b.n	8000b8c <HAL_RCC_OscConfig+0xd4>
 8000d14:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d114      	bne.n	8000d44 <HAL_RCC_OscConfig+0x28c>
 8000d1a:	6a23      	ldr	r3, [r4, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d1c:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d1e:	4393      	bics	r3, r2
 8000d20:	6223      	str	r3, [r4, #32]
 8000d22:	6a23      	ldr	r3, [r4, #32]
 8000d24:	3203      	adds	r2, #3
 8000d26:	4393      	bics	r3, r2
 8000d28:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000d2a:	f7ff faa1 	bl	8000270 <HAL_GetTick>
 8000d2e:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d30:	6a23      	ldr	r3, [r4, #32]
 8000d32:	423b      	tst	r3, r7
 8000d34:	d025      	beq.n	8000d82 <HAL_RCC_OscConfig+0x2ca>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d36:	f7ff fa9b 	bl	8000270 <HAL_GetTick>
 8000d3a:	4b2b      	ldr	r3, [pc, #172]	; (8000de8 <HAL_RCC_OscConfig+0x330>)
 8000d3c:	1b80      	subs	r0, r0, r6
 8000d3e:	4298      	cmp	r0, r3
 8000d40:	d9f6      	bls.n	8000d30 <HAL_RCC_OscConfig+0x278>
 8000d42:	e723      	b.n	8000b8c <HAL_RCC_OscConfig+0xd4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d44:	2b05      	cmp	r3, #5
 8000d46:	d10b      	bne.n	8000d60 <HAL_RCC_OscConfig+0x2a8>
 8000d48:	6a21      	ldr	r1, [r4, #32]
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	430b      	orrs	r3, r1
 8000d4e:	6223      	str	r3, [r4, #32]
 8000d50:	6a23      	ldr	r3, [r4, #32]
 8000d52:	431a      	orrs	r2, r3
 8000d54:	6222      	str	r2, [r4, #32]
      tickstart = HAL_GetTick();
 8000d56:	f7ff fa8b 	bl	8000270 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d5a:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8000d5c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d5e:	e00d      	b.n	8000d7c <HAL_RCC_OscConfig+0x2c4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d60:	6a23      	ldr	r3, [r4, #32]
 8000d62:	4393      	bics	r3, r2
 8000d64:	2204      	movs	r2, #4
 8000d66:	6223      	str	r3, [r4, #32]
 8000d68:	6a23      	ldr	r3, [r4, #32]
 8000d6a:	4393      	bics	r3, r2
 8000d6c:	e7c0      	b.n	8000cf0 <HAL_RCC_OscConfig+0x238>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d6e:	f7ff fa7f 	bl	8000270 <HAL_GetTick>
 8000d72:	4b1d      	ldr	r3, [pc, #116]	; (8000de8 <HAL_RCC_OscConfig+0x330>)
 8000d74:	1b80      	subs	r0, r0, r6
 8000d76:	4298      	cmp	r0, r3
 8000d78:	d900      	bls.n	8000d7c <HAL_RCC_OscConfig+0x2c4>
 8000d7a:	e707      	b.n	8000b8c <HAL_RCC_OscConfig+0xd4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d7c:	6a23      	ldr	r3, [r4, #32]
 8000d7e:	423b      	tst	r3, r7
 8000d80:	d0f5      	beq.n	8000d6e <HAL_RCC_OscConfig+0x2b6>
    if(pwrclkchanged == SET)
 8000d82:	9b00      	ldr	r3, [sp, #0]
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d000      	beq.n	8000d8a <HAL_RCC_OscConfig+0x2d2>
 8000d88:	e6a8      	b.n	8000adc <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d8a:	69e3      	ldr	r3, [r4, #28]
 8000d8c:	4a17      	ldr	r2, [pc, #92]	; (8000dec <HAL_RCC_OscConfig+0x334>)
 8000d8e:	4013      	ands	r3, r2
 8000d90:	61e3      	str	r3, [r4, #28]
 8000d92:	e6a3      	b.n	8000adc <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000d94:	f7ff fa6c 	bl	8000270 <HAL_GetTick>
 8000d98:	1bc0      	subs	r0, r0, r7
 8000d9a:	2802      	cmp	r0, #2
 8000d9c:	d800      	bhi.n	8000da0 <HAL_RCC_OscConfig+0x2e8>
 8000d9e:	e6b0      	b.n	8000b02 <HAL_RCC_OscConfig+0x4a>
 8000da0:	e6f4      	b.n	8000b8c <HAL_RCC_OscConfig+0xd4>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000da2:	3205      	adds	r2, #5
 8000da4:	d103      	bne.n	8000dae <HAL_RCC_OscConfig+0x2f6>
      __HAL_RCC_HSI14ADC_ENABLE();
 8000da6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000da8:	439a      	bics	r2, r3
 8000daa:	6362      	str	r2, [r4, #52]	; 0x34
 8000dac:	e6ad      	b.n	8000b0a <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000dae:	6b62      	ldr	r2, [r4, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000db0:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000db2:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8000db4:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8000db6:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8000db8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000dba:	4393      	bics	r3, r2
 8000dbc:	6363      	str	r3, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000dbe:	f7ff fa57 	bl	8000270 <HAL_GetTick>
 8000dc2:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000dc4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000dc6:	4233      	tst	r3, r6
 8000dc8:	d100      	bne.n	8000dcc <HAL_RCC_OscConfig+0x314>
 8000dca:	e6a5      	b.n	8000b18 <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000dcc:	f7ff fa50 	bl	8000270 <HAL_GetTick>
 8000dd0:	1bc0      	subs	r0, r0, r7
 8000dd2:	2802      	cmp	r0, #2
 8000dd4:	d9f6      	bls.n	8000dc4 <HAL_RCC_OscConfig+0x30c>
 8000dd6:	e6d9      	b.n	8000b8c <HAL_RCC_OscConfig+0xd4>
 8000dd8:	40021000 	.word	0x40021000
 8000ddc:	fffeffff 	.word	0xfffeffff
 8000de0:	fffbffff 	.word	0xfffbffff
 8000de4:	40007000 	.word	0x40007000
 8000de8:	00001388 	.word	0x00001388
 8000dec:	efffffff 	.word	0xefffffff
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8000df0:	210c      	movs	r1, #12
 8000df2:	4c46      	ldr	r4, [pc, #280]	; (8000f0c <HAL_RCC_OscConfig+0x454>)
 8000df4:	6862      	ldr	r2, [r4, #4]
 8000df6:	400a      	ands	r2, r1
 8000df8:	428a      	cmp	r2, r1
 8000dfa:	d009      	beq.n	8000e10 <HAL_RCC_OscConfig+0x358>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8000dfc:	6863      	ldr	r3, [r4, #4]
 8000dfe:	400b      	ands	r3, r1
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8000e00:	2b08      	cmp	r3, #8
 8000e02:	d10e      	bne.n	8000e22 <HAL_RCC_OscConfig+0x36a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8000e04:	22c0      	movs	r2, #192	; 0xc0
 8000e06:	6863      	ldr	r3, [r4, #4]
 8000e08:	0252      	lsls	r2, r2, #9
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d108      	bne.n	8000e22 <HAL_RCC_OscConfig+0x36a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8000e10:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000e12:	03db      	lsls	r3, r3, #15
 8000e14:	d400      	bmi.n	8000e18 <HAL_RCC_OscConfig+0x360>
 8000e16:	e683      	b.n	8000b20 <HAL_RCC_OscConfig+0x68>
 8000e18:	6a2b      	ldr	r3, [r5, #32]
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d000      	beq.n	8000e20 <HAL_RCC_OscConfig+0x368>
 8000e1e:	e69d      	b.n	8000b5c <HAL_RCC_OscConfig+0xa4>
 8000e20:	e67e      	b.n	8000b20 <HAL_RCC_OscConfig+0x68>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000e22:	6a2b      	ldr	r3, [r5, #32]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d011      	beq.n	8000e4c <HAL_RCC_OscConfig+0x394>
        __HAL_RCC_HSI48_ENABLE();
 8000e28:	2680      	movs	r6, #128	; 0x80
 8000e2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000e2c:	0276      	lsls	r6, r6, #9
 8000e2e:	4333      	orrs	r3, r6
 8000e30:	6363      	str	r3, [r4, #52]	; 0x34
        tickstart = HAL_GetTick();
 8000e32:	f7ff fa1d 	bl	8000270 <HAL_GetTick>
 8000e36:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000e38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000e3a:	4233      	tst	r3, r6
 8000e3c:	d000      	beq.n	8000e40 <HAL_RCC_OscConfig+0x388>
 8000e3e:	e66f      	b.n	8000b20 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000e40:	f7ff fa16 	bl	8000270 <HAL_GetTick>
 8000e44:	1bc0      	subs	r0, r0, r7
 8000e46:	2802      	cmp	r0, #2
 8000e48:	d9f6      	bls.n	8000e38 <HAL_RCC_OscConfig+0x380>
 8000e4a:	e69f      	b.n	8000b8c <HAL_RCC_OscConfig+0xd4>
        __HAL_RCC_HSI48_DISABLE();
 8000e4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000e4e:	4a30      	ldr	r2, [pc, #192]	; (8000f10 <HAL_RCC_OscConfig+0x458>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8000e50:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_HSI48_DISABLE();
 8000e52:	4013      	ands	r3, r2
 8000e54:	6363      	str	r3, [r4, #52]	; 0x34
        tickstart = HAL_GetTick();
 8000e56:	f7ff fa0b 	bl	8000270 <HAL_GetTick>
 8000e5a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8000e5c:	0276      	lsls	r6, r6, #9
 8000e5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000e60:	4233      	tst	r3, r6
 8000e62:	d100      	bne.n	8000e66 <HAL_RCC_OscConfig+0x3ae>
 8000e64:	e65c      	b.n	8000b20 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000e66:	f7ff fa03 	bl	8000270 <HAL_GetTick>
 8000e6a:	1bc0      	subs	r0, r0, r7
 8000e6c:	2802      	cmp	r0, #2
 8000e6e:	d9f6      	bls.n	8000e5e <HAL_RCC_OscConfig+0x3a6>
 8000e70:	e68c      	b.n	8000b8c <HAL_RCC_OscConfig+0xd4>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e72:	220c      	movs	r2, #12
 8000e74:	4c25      	ldr	r4, [pc, #148]	; (8000f0c <HAL_RCC_OscConfig+0x454>)
 8000e76:	6863      	ldr	r3, [r4, #4]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	2b08      	cmp	r3, #8
 8000e7c:	d100      	bne.n	8000e80 <HAL_RCC_OscConfig+0x3c8>
 8000e7e:	e66d      	b.n	8000b5c <HAL_RCC_OscConfig+0xa4>
        __HAL_RCC_PLL_DISABLE();
 8000e80:	6823      	ldr	r3, [r4, #0]
 8000e82:	4a24      	ldr	r2, [pc, #144]	; (8000f14 <HAL_RCC_OscConfig+0x45c>)
 8000e84:	4013      	ands	r3, r2
 8000e86:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e88:	2902      	cmp	r1, #2
 8000e8a:	d12f      	bne.n	8000eec <HAL_RCC_OscConfig+0x434>
        tickstart = HAL_GetTick();
 8000e8c:	f7ff f9f0 	bl	8000270 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e90:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000e92:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e94:	04b6      	lsls	r6, r6, #18
 8000e96:	6823      	ldr	r3, [r4, #0]
 8000e98:	4233      	tst	r3, r6
 8000e9a:	d121      	bne.n	8000ee0 <HAL_RCC_OscConfig+0x428>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e9c:	220f      	movs	r2, #15
 8000e9e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000ea0:	4393      	bics	r3, r2
 8000ea2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000ea8:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8000eaa:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000eac:	6862      	ldr	r2, [r4, #4]
 8000eae:	430b      	orrs	r3, r1
 8000eb0:	4919      	ldr	r1, [pc, #100]	; (8000f18 <HAL_RCC_OscConfig+0x460>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000eb2:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000eb4:	400a      	ands	r2, r1
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000eba:	2380      	movs	r3, #128	; 0x80
 8000ebc:	6822      	ldr	r2, [r4, #0]
 8000ebe:	045b      	lsls	r3, r3, #17
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000ec4:	f7ff f9d4 	bl	8000270 <HAL_GetTick>
 8000ec8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000eca:	04ad      	lsls	r5, r5, #18
 8000ecc:	6823      	ldr	r3, [r4, #0]
 8000ece:	422b      	tst	r3, r5
 8000ed0:	d000      	beq.n	8000ed4 <HAL_RCC_OscConfig+0x41c>
 8000ed2:	e629      	b.n	8000b28 <HAL_RCC_OscConfig+0x70>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ed4:	f7ff f9cc 	bl	8000270 <HAL_GetTick>
 8000ed8:	1b80      	subs	r0, r0, r6
 8000eda:	2802      	cmp	r0, #2
 8000edc:	d9f6      	bls.n	8000ecc <HAL_RCC_OscConfig+0x414>
 8000ede:	e655      	b.n	8000b8c <HAL_RCC_OscConfig+0xd4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ee0:	f7ff f9c6 	bl	8000270 <HAL_GetTick>
 8000ee4:	1bc0      	subs	r0, r0, r7
 8000ee6:	2802      	cmp	r0, #2
 8000ee8:	d9d5      	bls.n	8000e96 <HAL_RCC_OscConfig+0x3de>
 8000eea:	e64f      	b.n	8000b8c <HAL_RCC_OscConfig+0xd4>
        tickstart = HAL_GetTick();
 8000eec:	f7ff f9c0 	bl	8000270 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ef0:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8000ef2:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ef4:	04ad      	lsls	r5, r5, #18
 8000ef6:	6823      	ldr	r3, [r4, #0]
 8000ef8:	422b      	tst	r3, r5
 8000efa:	d100      	bne.n	8000efe <HAL_RCC_OscConfig+0x446>
 8000efc:	e614      	b.n	8000b28 <HAL_RCC_OscConfig+0x70>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000efe:	f7ff f9b7 	bl	8000270 <HAL_GetTick>
 8000f02:	1b80      	subs	r0, r0, r6
 8000f04:	2802      	cmp	r0, #2
 8000f06:	d9f6      	bls.n	8000ef6 <HAL_RCC_OscConfig+0x43e>
 8000f08:	e640      	b.n	8000b8c <HAL_RCC_OscConfig+0xd4>
 8000f0a:	46c0      	nop			; (mov r8, r8)
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	fffeffff 	.word	0xfffeffff
 8000f14:	feffffff 	.word	0xfeffffff
 8000f18:	ffc27fff 	.word	0xffc27fff

08000f1c <HAL_RCC_EnableCSS>:
  *         the Cortex-M0 NMI (Non-Maskable Interrupt) exception vector.  
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8000f1c:	2380      	movs	r3, #128	; 0x80
 8000f1e:	4a03      	ldr	r2, [pc, #12]	; (8000f2c <HAL_RCC_EnableCSS+0x10>)
 8000f20:	031b      	lsls	r3, r3, #12
 8000f22:	6811      	ldr	r1, [r2, #0]
 8000f24:	430b      	orrs	r3, r1
 8000f26:	6013      	str	r3, [r2, #0]
}
 8000f28:	4770      	bx	lr
 8000f2a:	46c0      	nop			; (mov r8, r8)
 8000f2c:	40021000 	.word	0x40021000

08000f30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000f30:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000f32:	4c19      	ldr	r4, [pc, #100]	; (8000f98 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000f34:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000f36:	2210      	movs	r2, #16
 8000f38:	0021      	movs	r1, r4
 8000f3a:	4668      	mov	r0, sp
 8000f3c:	f000 fe1e 	bl	8001b7c <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8000f40:	0021      	movs	r1, r4
 8000f42:	ad04      	add	r5, sp, #16
 8000f44:	2210      	movs	r2, #16
 8000f46:	3110      	adds	r1, #16
 8000f48:	0028      	movs	r0, r5
 8000f4a:	f000 fe17 	bl	8001b7c <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000f4e:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8000f50:	4e12      	ldr	r6, [pc, #72]	; (8000f9c <HAL_RCC_GetSysClockFreq+0x6c>)
 8000f52:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000f54:	401a      	ands	r2, r3
 8000f56:	2a08      	cmp	r2, #8
 8000f58:	d004      	beq.n	8000f64 <HAL_RCC_GetSysClockFreq+0x34>
 8000f5a:	2a0c      	cmp	r2, #12
 8000f5c:	d11a      	bne.n	8000f94 <HAL_RCC_GetSysClockFreq+0x64>
      break;
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8000f5e:	4810      	ldr	r0, [pc, #64]	; (8000fa0 <HAL_RCC_GetSysClockFreq+0x70>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000f60:	b008      	add	sp, #32
 8000f62:	bd70      	pop	{r4, r5, r6, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000f64:	200f      	movs	r0, #15
 8000f66:	466a      	mov	r2, sp
 8000f68:	0c99      	lsrs	r1, r3, #18
 8000f6a:	4001      	ands	r1, r0
 8000f6c:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000f6e:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8000f70:	4002      	ands	r2, r0
 8000f72:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8000f74:	22c0      	movs	r2, #192	; 0xc0
 8000f76:	2080      	movs	r0, #128	; 0x80
 8000f78:	0252      	lsls	r2, r2, #9
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	0240      	lsls	r0, r0, #9
 8000f7e:	4283      	cmp	r3, r0
 8000f80:	d101      	bne.n	8000f86 <HAL_RCC_GetSysClockFreq+0x56>
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8000f82:	4808      	ldr	r0, [pc, #32]	; (8000fa4 <HAL_RCC_GetSysClockFreq+0x74>)
 8000f84:	e002      	b.n	8000f8c <HAL_RCC_GetSysClockFreq+0x5c>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d1fb      	bne.n	8000f82 <HAL_RCC_GetSysClockFreq+0x52>
        pllclk = (HSI48_VALUE / prediv) * pllmul;
 8000f8a:	4805      	ldr	r0, [pc, #20]	; (8000fa0 <HAL_RCC_GetSysClockFreq+0x70>)
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8000f8c:	f7ff f8ba 	bl	8000104 <__udivsi3>
 8000f90:	4360      	muls	r0, r4
 8000f92:	e7e5      	b.n	8000f60 <HAL_RCC_GetSysClockFreq+0x30>
      sysclockfreq = HSE_VALUE;
 8000f94:	4803      	ldr	r0, [pc, #12]	; (8000fa4 <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 8000f96:	e7e3      	b.n	8000f60 <HAL_RCC_GetSysClockFreq+0x30>
 8000f98:	08001ba8 	.word	0x08001ba8
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	02dc6c00 	.word	0x02dc6c00
 8000fa4:	007a1200 	.word	0x007a1200

08000fa8 <HAL_RCC_ClockConfig>:
{
 8000fa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000faa:	2201      	movs	r2, #1
 8000fac:	4c4f      	ldr	r4, [pc, #316]	; (80010ec <HAL_RCC_ClockConfig+0x144>)
{
 8000fae:	0006      	movs	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000fb0:	6823      	ldr	r3, [r4, #0]
{
 8000fb2:	9101      	str	r1, [sp, #4]
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d31f      	bcc.n	8000ffa <HAL_RCC_ClockConfig+0x52>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000fba:	6832      	ldr	r2, [r6, #0]
 8000fbc:	0793      	lsls	r3, r2, #30
 8000fbe:	d428      	bmi.n	8001012 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000fc0:	07d3      	lsls	r3, r2, #31
 8000fc2:	d42e      	bmi.n	8001022 <HAL_RCC_ClockConfig+0x7a>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	6822      	ldr	r2, [r4, #0]
 8000fc8:	9901      	ldr	r1, [sp, #4]
 8000fca:	401a      	ands	r2, r3
 8000fcc:	4291      	cmp	r1, r2
 8000fce:	d200      	bcs.n	8000fd2 <HAL_RCC_ClockConfig+0x2a>
 8000fd0:	e07e      	b.n	80010d0 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fd2:	6833      	ldr	r3, [r6, #0]
 8000fd4:	4c46      	ldr	r4, [pc, #280]	; (80010f0 <HAL_RCC_ClockConfig+0x148>)
 8000fd6:	075b      	lsls	r3, r3, #29
 8000fd8:	d500      	bpl.n	8000fdc <HAL_RCC_ClockConfig+0x34>
 8000fda:	e080      	b.n	80010de <HAL_RCC_ClockConfig+0x136>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000fdc:	f7ff ffa8 	bl	8000f30 <HAL_RCC_GetSysClockFreq>
 8000fe0:	6863      	ldr	r3, [r4, #4]
 8000fe2:	4a44      	ldr	r2, [pc, #272]	; (80010f4 <HAL_RCC_ClockConfig+0x14c>)
 8000fe4:	061b      	lsls	r3, r3, #24
 8000fe6:	0f1b      	lsrs	r3, r3, #28
 8000fe8:	5cd3      	ldrb	r3, [r2, r3]
 8000fea:	40d8      	lsrs	r0, r3
 8000fec:	4b42      	ldr	r3, [pc, #264]	; (80010f8 <HAL_RCC_ClockConfig+0x150>)
 8000fee:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000ff0:	2000      	movs	r0, #0
 8000ff2:	f7ff f913 	bl	800021c <HAL_InitTick>
  return HAL_OK;
 8000ff6:	2000      	movs	r0, #0
 8000ff8:	e00a      	b.n	8001010 <HAL_RCC_ClockConfig+0x68>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ffa:	6823      	ldr	r3, [r4, #0]
 8000ffc:	9901      	ldr	r1, [sp, #4]
 8000ffe:	4393      	bics	r3, r2
 8001000:	430b      	orrs	r3, r1
 8001002:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001004:	6823      	ldr	r3, [r4, #0]
 8001006:	4013      	ands	r3, r2
 8001008:	9a01      	ldr	r2, [sp, #4]
 800100a:	429a      	cmp	r2, r3
 800100c:	d0d5      	beq.n	8000fba <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 800100e:	2001      	movs	r0, #1
}
 8001010:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001012:	20f0      	movs	r0, #240	; 0xf0
 8001014:	4936      	ldr	r1, [pc, #216]	; (80010f0 <HAL_RCC_ClockConfig+0x148>)
 8001016:	684b      	ldr	r3, [r1, #4]
 8001018:	4383      	bics	r3, r0
 800101a:	68b0      	ldr	r0, [r6, #8]
 800101c:	4303      	orrs	r3, r0
 800101e:	604b      	str	r3, [r1, #4]
 8001020:	e7ce      	b.n	8000fc0 <HAL_RCC_ClockConfig+0x18>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001022:	6872      	ldr	r2, [r6, #4]
 8001024:	4d32      	ldr	r5, [pc, #200]	; (80010f0 <HAL_RCC_ClockConfig+0x148>)
 8001026:	2a01      	cmp	r2, #1
 8001028:	d11a      	bne.n	8001060 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800102a:	682b      	ldr	r3, [r5, #0]
 800102c:	039b      	lsls	r3, r3, #14
 800102e:	d5ee      	bpl.n	800100e <HAL_RCC_ClockConfig+0x66>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001030:	2103      	movs	r1, #3
 8001032:	686b      	ldr	r3, [r5, #4]
 8001034:	438b      	bics	r3, r1
 8001036:	4313      	orrs	r3, r2
 8001038:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 800103a:	f7ff f919 	bl	8000270 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800103e:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001040:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001042:	2b01      	cmp	r3, #1
 8001044:	d11c      	bne.n	8001080 <HAL_RCC_ClockConfig+0xd8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001046:	220c      	movs	r2, #12
 8001048:	686b      	ldr	r3, [r5, #4]
 800104a:	4013      	ands	r3, r2
 800104c:	2b04      	cmp	r3, #4
 800104e:	d0b9      	beq.n	8000fc4 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001050:	f7ff f90e 	bl	8000270 <HAL_GetTick>
 8001054:	4b29      	ldr	r3, [pc, #164]	; (80010fc <HAL_RCC_ClockConfig+0x154>)
 8001056:	1bc0      	subs	r0, r0, r7
 8001058:	4298      	cmp	r0, r3
 800105a:	d9f4      	bls.n	8001046 <HAL_RCC_ClockConfig+0x9e>
          return HAL_TIMEOUT;
 800105c:	2003      	movs	r0, #3
 800105e:	e7d7      	b.n	8001010 <HAL_RCC_ClockConfig+0x68>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001060:	2a02      	cmp	r2, #2
 8001062:	d103      	bne.n	800106c <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001064:	682b      	ldr	r3, [r5, #0]
 8001066:	019b      	lsls	r3, r3, #6
 8001068:	d4e2      	bmi.n	8001030 <HAL_RCC_ClockConfig+0x88>
 800106a:	e7d0      	b.n	800100e <HAL_RCC_ClockConfig+0x66>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800106c:	2a03      	cmp	r2, #3
 800106e:	d103      	bne.n	8001078 <HAL_RCC_ClockConfig+0xd0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001070:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001072:	03db      	lsls	r3, r3, #15
 8001074:	d4dc      	bmi.n	8001030 <HAL_RCC_ClockConfig+0x88>
 8001076:	e7ca      	b.n	800100e <HAL_RCC_ClockConfig+0x66>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001078:	682b      	ldr	r3, [r5, #0]
 800107a:	079b      	lsls	r3, r3, #30
 800107c:	d4d8      	bmi.n	8001030 <HAL_RCC_ClockConfig+0x88>
 800107e:	e7c6      	b.n	800100e <HAL_RCC_ClockConfig+0x66>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001080:	2b02      	cmp	r3, #2
 8001082:	d10b      	bne.n	800109c <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001084:	220c      	movs	r2, #12
 8001086:	686b      	ldr	r3, [r5, #4]
 8001088:	4013      	ands	r3, r2
 800108a:	2b08      	cmp	r3, #8
 800108c:	d09a      	beq.n	8000fc4 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800108e:	f7ff f8ef 	bl	8000270 <HAL_GetTick>
 8001092:	4b1a      	ldr	r3, [pc, #104]	; (80010fc <HAL_RCC_ClockConfig+0x154>)
 8001094:	1bc0      	subs	r0, r0, r7
 8001096:	4298      	cmp	r0, r3
 8001098:	d9f4      	bls.n	8001084 <HAL_RCC_ClockConfig+0xdc>
 800109a:	e7df      	b.n	800105c <HAL_RCC_ClockConfig+0xb4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800109c:	2b03      	cmp	r3, #3
 800109e:	d011      	beq.n	80010c4 <HAL_RCC_ClockConfig+0x11c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80010a0:	220c      	movs	r2, #12
 80010a2:	686b      	ldr	r3, [r5, #4]
 80010a4:	4213      	tst	r3, r2
 80010a6:	d100      	bne.n	80010aa <HAL_RCC_ClockConfig+0x102>
 80010a8:	e78c      	b.n	8000fc4 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010aa:	f7ff f8e1 	bl	8000270 <HAL_GetTick>
 80010ae:	4b13      	ldr	r3, [pc, #76]	; (80010fc <HAL_RCC_ClockConfig+0x154>)
 80010b0:	1bc0      	subs	r0, r0, r7
 80010b2:	4298      	cmp	r0, r3
 80010b4:	d9f4      	bls.n	80010a0 <HAL_RCC_ClockConfig+0xf8>
 80010b6:	e7d1      	b.n	800105c <HAL_RCC_ClockConfig+0xb4>
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010b8:	f7ff f8da 	bl	8000270 <HAL_GetTick>
 80010bc:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <HAL_RCC_ClockConfig+0x154>)
 80010be:	1bc0      	subs	r0, r0, r7
 80010c0:	4298      	cmp	r0, r3
 80010c2:	d8cb      	bhi.n	800105c <HAL_RCC_ClockConfig+0xb4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 80010c4:	220c      	movs	r2, #12
 80010c6:	686b      	ldr	r3, [r5, #4]
 80010c8:	4013      	ands	r3, r2
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d1f4      	bne.n	80010b8 <HAL_RCC_ClockConfig+0x110>
 80010ce:	e779      	b.n	8000fc4 <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010d0:	6822      	ldr	r2, [r4, #0]
 80010d2:	439a      	bics	r2, r3
 80010d4:	6022      	str	r2, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80010d6:	6822      	ldr	r2, [r4, #0]
 80010d8:	421a      	tst	r2, r3
 80010da:	d198      	bne.n	800100e <HAL_RCC_ClockConfig+0x66>
 80010dc:	e779      	b.n	8000fd2 <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80010de:	6863      	ldr	r3, [r4, #4]
 80010e0:	4a07      	ldr	r2, [pc, #28]	; (8001100 <HAL_RCC_ClockConfig+0x158>)
 80010e2:	4013      	ands	r3, r2
 80010e4:	68f2      	ldr	r2, [r6, #12]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	6063      	str	r3, [r4, #4]
 80010ea:	e777      	b.n	8000fdc <HAL_RCC_ClockConfig+0x34>
 80010ec:	40022000 	.word	0x40022000
 80010f0:	40021000 	.word	0x40021000
 80010f4:	08001be2 	.word	0x08001be2
 80010f8:	20000000 	.word	0x20000000
 80010fc:	00001388 	.word	0x00001388
 8001100:	fffff8ff 	.word	0xfffff8ff

08001104 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8001104:	4b01      	ldr	r3, [pc, #4]	; (800110c <HAL_RCC_GetHCLKFreq+0x8>)
 8001106:	6818      	ldr	r0, [r3, #0]
}
 8001108:	4770      	bx	lr
 800110a:	46c0      	nop			; (mov r8, r8)
 800110c:	20000000 	.word	0x20000000

08001110 <HAL_RCC_CSSCallback>:
__weak void HAL_RCC_CSSCallback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */ 
}
 8001110:	4770      	bx	lr
	...

08001114 <HAL_RCC_NMI_IRQHandler>:
{
 8001114:	b510      	push	{r4, lr}
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8001116:	2480      	movs	r4, #128	; 0x80
 8001118:	4b04      	ldr	r3, [pc, #16]	; (800112c <HAL_RCC_NMI_IRQHandler+0x18>)
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	4223      	tst	r3, r4
 800111e:	d003      	beq.n	8001128 <HAL_RCC_NMI_IRQHandler+0x14>
    HAL_RCC_CSSCallback();
 8001120:	f7ff fff6 	bl	8001110 <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8001124:	4b02      	ldr	r3, [pc, #8]	; (8001130 <HAL_RCC_NMI_IRQHandler+0x1c>)
 8001126:	701c      	strb	r4, [r3, #0]
}
 8001128:	bd10      	pop	{r4, pc}
 800112a:	46c0      	nop			; (mov r8, r8)
 800112c:	40021000 	.word	0x40021000
 8001130:	4002100a 	.word	0x4002100a

08001134 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001136:	0004      	movs	r4, r0
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
  {
    return HAL_ERROR;
 8001138:	2001      	movs	r0, #1
  if (hspi == NULL)
 800113a:	2c00      	cmp	r4, #0
 800113c:	d04b      	beq.n	80011d6 <HAL_SPI_Init+0xa2>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800113e:	2300      	movs	r3, #0
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001140:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001142:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001144:	355d      	adds	r5, #93	; 0x5d
 8001146:	782b      	ldrb	r3, [r5, #0]
 8001148:	b2db      	uxtb	r3, r3
 800114a:	2b00      	cmp	r3, #0
 800114c:	d105      	bne.n	800115a <HAL_SPI_Init+0x26>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800114e:	0022      	movs	r2, r4
 8001150:	325c      	adds	r2, #92	; 0x5c
 8001152:	7013      	strb	r3, [r2, #0]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001154:	0020      	movs	r0, r4
 8001156:	f000 fb7b 	bl	8001850 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800115a:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800115c:	2240      	movs	r2, #64	; 0x40
 800115e:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001160:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8001162:	680b      	ldr	r3, [r1, #0]
 8001164:	2000      	movs	r0, #0
 8001166:	4393      	bics	r3, r2
 8001168:	600b      	str	r3, [r1, #0]
 800116a:	23e0      	movs	r3, #224	; 0xe0

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800116c:	68e2      	ldr	r2, [r4, #12]
 800116e:	00db      	lsls	r3, r3, #3
 8001170:	429a      	cmp	r2, r3
 8001172:	d931      	bls.n	80011d8 <HAL_SPI_Init+0xa4>
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001174:	26f0      	movs	r6, #240	; 0xf0
 8001176:	0136      	lsls	r6, r6, #4
 8001178:	42b2      	cmp	r2, r6
 800117a:	d133      	bne.n	80011e4 <HAL_SPI_Init+0xb0>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800117c:	0006      	movs	r6, r0
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800117e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001180:	2800      	cmp	r0, #0
 8001182:	d103      	bne.n	800118c <HAL_SPI_Init+0x58>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001184:	429a      	cmp	r2, r3
 8001186:	d92f      	bls.n	80011e8 <HAL_SPI_Init+0xb4>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001188:	2302      	movs	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800118a:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800118c:	68a7      	ldr	r7, [r4, #8]
 800118e:	6863      	ldr	r3, [r4, #4]
 8001190:	69a0      	ldr	r0, [r4, #24]
 8001192:	433b      	orrs	r3, r7
 8001194:	6927      	ldr	r7, [r4, #16]
 8001196:	433b      	orrs	r3, r7
 8001198:	6967      	ldr	r7, [r4, #20]
 800119a:	433b      	orrs	r3, r7
 800119c:	69e7      	ldr	r7, [r4, #28]
 800119e:	433b      	orrs	r3, r7
 80011a0:	6a27      	ldr	r7, [r4, #32]
 80011a2:	433b      	orrs	r3, r7
 80011a4:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 80011a6:	433b      	orrs	r3, r7
 80011a8:	2780      	movs	r7, #128	; 0x80
 80011aa:	00bf      	lsls	r7, r7, #2
 80011ac:	4007      	ands	r7, r0
 80011ae:	433b      	orrs	r3, r7
 80011b0:	600b      	str	r3, [r1, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80011b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80011b4:	0c00      	lsrs	r0, r0, #16
 80011b6:	431a      	orrs	r2, r3
 80011b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80011ba:	431a      	orrs	r2, r3
 80011bc:	2304      	movs	r3, #4
 80011be:	4018      	ands	r0, r3
 80011c0:	4310      	orrs	r0, r2
 80011c2:	4306      	orrs	r6, r0
 80011c4:	604e      	str	r6, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80011c6:	69cb      	ldr	r3, [r1, #28]
 80011c8:	4a08      	ldr	r2, [pc, #32]	; (80011ec <HAL_SPI_Init+0xb8>)
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80011ca:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80011cc:	4013      	ands	r3, r2
 80011ce:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 80011d0:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80011d2:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80011d4:	702b      	strb	r3, [r5, #0]

  return HAL_OK;
}
 80011d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80011d8:	2680      	movs	r6, #128	; 0x80
 80011da:	0176      	lsls	r6, r6, #5
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80011dc:	429a      	cmp	r2, r3
 80011de:	d0ce      	beq.n	800117e <HAL_SPI_Init+0x4a>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011e0:	62a0      	str	r0, [r4, #40]	; 0x28
 80011e2:	e7cc      	b.n	800117e <HAL_SPI_Init+0x4a>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80011e4:	0006      	movs	r6, r0
 80011e6:	e7fb      	b.n	80011e0 <HAL_SPI_Init+0xac>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e7ce      	b.n	800118a <HAL_SPI_Init+0x56>
 80011ec:	fffff7ff 	.word	0xfffff7ff

080011f0 <HAL_TIM_OC_DelayElapsedCallback>:
 80011f0:	4770      	bx	lr

080011f2 <HAL_TIM_IC_CaptureCallback>:
 80011f2:	4770      	bx	lr

080011f4 <HAL_TIM_PWM_PulseFinishedCallback>:
 80011f4:	4770      	bx	lr

080011f6 <HAL_TIM_TriggerCallback>:
 80011f6:	4770      	bx	lr

080011f8 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80011f8:	2202      	movs	r2, #2
 80011fa:	6803      	ldr	r3, [r0, #0]
{
 80011fc:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80011fe:	6919      	ldr	r1, [r3, #16]
{
 8001200:	0004      	movs	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001202:	4211      	tst	r1, r2
 8001204:	d00e      	beq.n	8001224 <HAL_TIM_IRQHandler+0x2c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001206:	68d9      	ldr	r1, [r3, #12]
 8001208:	4211      	tst	r1, r2
 800120a:	d00b      	beq.n	8001224 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800120c:	3a05      	subs	r2, #5
 800120e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001210:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001212:	3204      	adds	r2, #4
 8001214:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001216:	079b      	lsls	r3, r3, #30
 8001218:	d100      	bne.n	800121c <HAL_TIM_IRQHandler+0x24>
 800121a:	e079      	b.n	8001310 <HAL_TIM_IRQHandler+0x118>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 800121c:	f7ff ffe9 	bl	80011f2 <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001220:	2300      	movs	r3, #0
 8001222:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001224:	2204      	movs	r2, #4
 8001226:	6823      	ldr	r3, [r4, #0]
 8001228:	6919      	ldr	r1, [r3, #16]
 800122a:	4211      	tst	r1, r2
 800122c:	d010      	beq.n	8001250 <HAL_TIM_IRQHandler+0x58>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800122e:	68d9      	ldr	r1, [r3, #12]
 8001230:	4211      	tst	r1, r2
 8001232:	d00d      	beq.n	8001250 <HAL_TIM_IRQHandler+0x58>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001234:	3a09      	subs	r2, #9
 8001236:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001238:	3207      	adds	r2, #7
 800123a:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800123c:	699a      	ldr	r2, [r3, #24]
 800123e:	23c0      	movs	r3, #192	; 0xc0
 8001240:	009b      	lsls	r3, r3, #2
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001242:	0020      	movs	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001244:	421a      	tst	r2, r3
 8001246:	d069      	beq.n	800131c <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_IC_CaptureCallback(htim);
 8001248:	f7ff ffd3 	bl	80011f2 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800124c:	2300      	movs	r3, #0
 800124e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001250:	2208      	movs	r2, #8
 8001252:	6823      	ldr	r3, [r4, #0]
 8001254:	6919      	ldr	r1, [r3, #16]
 8001256:	4211      	tst	r1, r2
 8001258:	d00e      	beq.n	8001278 <HAL_TIM_IRQHandler+0x80>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800125a:	68d9      	ldr	r1, [r3, #12]
 800125c:	4211      	tst	r1, r2
 800125e:	d00b      	beq.n	8001278 <HAL_TIM_IRQHandler+0x80>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001260:	3a11      	subs	r2, #17
 8001262:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001264:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001266:	320d      	adds	r2, #13
 8001268:	7722      	strb	r2, [r4, #28]
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800126a:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800126c:	079b      	lsls	r3, r3, #30
 800126e:	d05b      	beq.n	8001328 <HAL_TIM_IRQHandler+0x130>
        HAL_TIM_IC_CaptureCallback(htim);
 8001270:	f7ff ffbf 	bl	80011f2 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001274:	2300      	movs	r3, #0
 8001276:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001278:	2210      	movs	r2, #16
 800127a:	6823      	ldr	r3, [r4, #0]
 800127c:	6919      	ldr	r1, [r3, #16]
 800127e:	4211      	tst	r1, r2
 8001280:	d010      	beq.n	80012a4 <HAL_TIM_IRQHandler+0xac>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001282:	68d9      	ldr	r1, [r3, #12]
 8001284:	4211      	tst	r1, r2
 8001286:	d00d      	beq.n	80012a4 <HAL_TIM_IRQHandler+0xac>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001288:	3a21      	subs	r2, #33	; 0x21
 800128a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800128c:	3219      	adds	r2, #25
 800128e:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001290:	69da      	ldr	r2, [r3, #28]
 8001292:	23c0      	movs	r3, #192	; 0xc0
 8001294:	009b      	lsls	r3, r3, #2
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001296:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001298:	421a      	tst	r2, r3
 800129a:	d04b      	beq.n	8001334 <HAL_TIM_IRQHandler+0x13c>
        HAL_TIM_IC_CaptureCallback(htim);
 800129c:	f7ff ffa9 	bl	80011f2 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80012a0:	2300      	movs	r3, #0
 80012a2:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80012a4:	2201      	movs	r2, #1
 80012a6:	6823      	ldr	r3, [r4, #0]
 80012a8:	6919      	ldr	r1, [r3, #16]
 80012aa:	4211      	tst	r1, r2
 80012ac:	d007      	beq.n	80012be <HAL_TIM_IRQHandler+0xc6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80012ae:	68d9      	ldr	r1, [r3, #12]
 80012b0:	4211      	tst	r1, r2
 80012b2:	d004      	beq.n	80012be <HAL_TIM_IRQHandler+0xc6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80012b4:	3a03      	subs	r2, #3
 80012b6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80012b8:	0020      	movs	r0, r4
 80012ba:	f000 f99d 	bl	80015f8 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80012be:	2280      	movs	r2, #128	; 0x80
 80012c0:	6823      	ldr	r3, [r4, #0]
 80012c2:	6919      	ldr	r1, [r3, #16]
 80012c4:	4211      	tst	r1, r2
 80012c6:	d008      	beq.n	80012da <HAL_TIM_IRQHandler+0xe2>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80012c8:	68d9      	ldr	r1, [r3, #12]
 80012ca:	4211      	tst	r1, r2
 80012cc:	d005      	beq.n	80012da <HAL_TIM_IRQHandler+0xe2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80012ce:	3a02      	subs	r2, #2
 80012d0:	3aff      	subs	r2, #255	; 0xff
 80012d2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80012d4:	0020      	movs	r0, r4
 80012d6:	f000 f89f 	bl	8001418 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80012da:	2240      	movs	r2, #64	; 0x40
 80012dc:	6823      	ldr	r3, [r4, #0]
 80012de:	6919      	ldr	r1, [r3, #16]
 80012e0:	4211      	tst	r1, r2
 80012e2:	d007      	beq.n	80012f4 <HAL_TIM_IRQHandler+0xfc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80012e4:	68d9      	ldr	r1, [r3, #12]
 80012e6:	4211      	tst	r1, r2
 80012e8:	d004      	beq.n	80012f4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80012ea:	3a81      	subs	r2, #129	; 0x81
 80012ec:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80012ee:	0020      	movs	r0, r4
 80012f0:	f7ff ff81 	bl	80011f6 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80012f4:	2220      	movs	r2, #32
 80012f6:	6823      	ldr	r3, [r4, #0]
 80012f8:	6919      	ldr	r1, [r3, #16]
 80012fa:	4211      	tst	r1, r2
 80012fc:	d007      	beq.n	800130e <HAL_TIM_IRQHandler+0x116>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80012fe:	68d9      	ldr	r1, [r3, #12]
 8001300:	4211      	tst	r1, r2
 8001302:	d004      	beq.n	800130e <HAL_TIM_IRQHandler+0x116>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001304:	3a41      	subs	r2, #65	; 0x41
 8001306:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001308:	0020      	movs	r0, r4
 800130a:	f000 f884 	bl	8001416 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 800130e:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001310:	f7ff ff6e 	bl	80011f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001314:	0020      	movs	r0, r4
 8001316:	f7ff ff6d 	bl	80011f4 <HAL_TIM_PWM_PulseFinishedCallback>
 800131a:	e781      	b.n	8001220 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800131c:	f7ff ff68 	bl	80011f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001320:	0020      	movs	r0, r4
 8001322:	f7ff ff67 	bl	80011f4 <HAL_TIM_PWM_PulseFinishedCallback>
 8001326:	e791      	b.n	800124c <HAL_TIM_IRQHandler+0x54>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001328:	f7ff ff62 	bl	80011f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800132c:	0020      	movs	r0, r4
 800132e:	f7ff ff61 	bl	80011f4 <HAL_TIM_PWM_PulseFinishedCallback>
 8001332:	e79f      	b.n	8001274 <HAL_TIM_IRQHandler+0x7c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001334:	f7ff ff5c 	bl	80011f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001338:	0020      	movs	r0, r4
 800133a:	f7ff ff5b 	bl	80011f4 <HAL_TIM_PWM_PulseFinishedCallback>
 800133e:	e7af      	b.n	80012a0 <HAL_TIM_IRQHandler+0xa8>

08001340 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001340:	4a20      	ldr	r2, [pc, #128]	; (80013c4 <TIM_Base_SetConfig+0x84>)
{
 8001342:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8001344:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001346:	4290      	cmp	r0, r2
 8001348:	d006      	beq.n	8001358 <TIM_Base_SetConfig+0x18>
 800134a:	2480      	movs	r4, #128	; 0x80
 800134c:	05e4      	lsls	r4, r4, #23
 800134e:	42a0      	cmp	r0, r4
 8001350:	d002      	beq.n	8001358 <TIM_Base_SetConfig+0x18>
 8001352:	4c1d      	ldr	r4, [pc, #116]	; (80013c8 <TIM_Base_SetConfig+0x88>)
 8001354:	42a0      	cmp	r0, r4
 8001356:	d10c      	bne.n	8001372 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001358:	2470      	movs	r4, #112	; 0x70
 800135a:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 800135c:	684c      	ldr	r4, [r1, #4]
 800135e:	4323      	orrs	r3, r4
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001360:	4290      	cmp	r0, r2
 8001362:	d012      	beq.n	800138a <TIM_Base_SetConfig+0x4a>
 8001364:	2480      	movs	r4, #128	; 0x80
 8001366:	05e4      	lsls	r4, r4, #23
 8001368:	42a0      	cmp	r0, r4
 800136a:	d00e      	beq.n	800138a <TIM_Base_SetConfig+0x4a>
 800136c:	4c16      	ldr	r4, [pc, #88]	; (80013c8 <TIM_Base_SetConfig+0x88>)
 800136e:	42a0      	cmp	r0, r4
 8001370:	d00b      	beq.n	800138a <TIM_Base_SetConfig+0x4a>
 8001372:	4c16      	ldr	r4, [pc, #88]	; (80013cc <TIM_Base_SetConfig+0x8c>)
 8001374:	42a0      	cmp	r0, r4
 8001376:	d008      	beq.n	800138a <TIM_Base_SetConfig+0x4a>
 8001378:	4c15      	ldr	r4, [pc, #84]	; (80013d0 <TIM_Base_SetConfig+0x90>)
 800137a:	42a0      	cmp	r0, r4
 800137c:	d005      	beq.n	800138a <TIM_Base_SetConfig+0x4a>
 800137e:	4c15      	ldr	r4, [pc, #84]	; (80013d4 <TIM_Base_SetConfig+0x94>)
 8001380:	42a0      	cmp	r0, r4
 8001382:	d002      	beq.n	800138a <TIM_Base_SetConfig+0x4a>
 8001384:	4c14      	ldr	r4, [pc, #80]	; (80013d8 <TIM_Base_SetConfig+0x98>)
 8001386:	42a0      	cmp	r0, r4
 8001388:	d103      	bne.n	8001392 <TIM_Base_SetConfig+0x52>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800138a:	4c14      	ldr	r4, [pc, #80]	; (80013dc <TIM_Base_SetConfig+0x9c>)
 800138c:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800138e:	68cc      	ldr	r4, [r1, #12]
 8001390:	4323      	orrs	r3, r4
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001392:	2480      	movs	r4, #128	; 0x80
 8001394:	43a3      	bics	r3, r4
 8001396:	694c      	ldr	r4, [r1, #20]
 8001398:	4323      	orrs	r3, r4

  TIMx->CR1 = tmpcr1;
 800139a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800139c:	688b      	ldr	r3, [r1, #8]
 800139e:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80013a0:	680b      	ldr	r3, [r1, #0]
 80013a2:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80013a4:	4290      	cmp	r0, r2
 80013a6:	d008      	beq.n	80013ba <TIM_Base_SetConfig+0x7a>
 80013a8:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <TIM_Base_SetConfig+0x90>)
 80013aa:	4298      	cmp	r0, r3
 80013ac:	d005      	beq.n	80013ba <TIM_Base_SetConfig+0x7a>
 80013ae:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <TIM_Base_SetConfig+0x94>)
 80013b0:	4298      	cmp	r0, r3
 80013b2:	d002      	beq.n	80013ba <TIM_Base_SetConfig+0x7a>
 80013b4:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <TIM_Base_SetConfig+0x98>)
 80013b6:	4298      	cmp	r0, r3
 80013b8:	d101      	bne.n	80013be <TIM_Base_SetConfig+0x7e>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80013ba:	690b      	ldr	r3, [r1, #16]
 80013bc:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80013be:	2301      	movs	r3, #1
 80013c0:	6143      	str	r3, [r0, #20]
}
 80013c2:	bd10      	pop	{r4, pc}
 80013c4:	40012c00 	.word	0x40012c00
 80013c8:	40000400 	.word	0x40000400
 80013cc:	40002000 	.word	0x40002000
 80013d0:	40014000 	.word	0x40014000
 80013d4:	40014400 	.word	0x40014400
 80013d8:	40014800 	.word	0x40014800
 80013dc:	fffffcff 	.word	0xfffffcff

080013e0 <HAL_TIM_Base_Init>:
{
 80013e0:	b570      	push	{r4, r5, r6, lr}
 80013e2:	0004      	movs	r4, r0
    return HAL_ERROR;
 80013e4:	2001      	movs	r0, #1
  if(htim == NULL)
 80013e6:	2c00      	cmp	r4, #0
 80013e8:	d014      	beq.n	8001414 <HAL_TIM_Base_Init+0x34>
  if(htim->State == HAL_TIM_STATE_RESET)
 80013ea:	0025      	movs	r5, r4
 80013ec:	353d      	adds	r5, #61	; 0x3d
 80013ee:	782b      	ldrb	r3, [r5, #0]
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d105      	bne.n	8001402 <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 80013f6:	0022      	movs	r2, r4
 80013f8:	323c      	adds	r2, #60	; 0x3c
 80013fa:	7013      	strb	r3, [r2, #0]
    HAL_TIM_Base_MspInit(htim);
 80013fc:	0020      	movs	r0, r4
 80013fe:	f000 fb25 	bl	8001a4c <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001402:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001404:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001406:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001408:	1d21      	adds	r1, r4, #4
 800140a:	f7ff ff99 	bl	8001340 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800140e:	2301      	movs	r3, #1
  return HAL_OK;
 8001410:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001412:	702b      	strb	r3, [r5, #0]
}
 8001414:	bd70      	pop	{r4, r5, r6, pc}

08001416 <HAL_TIMEx_CommutationCallback>:
 8001416:	4770      	bx	lr

08001418 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001418:	4770      	bx	lr
	...

0800141c <lib_can_find_and_handle_event>:

    return &lib_can_handler;
}

bool lib_can_find_and_handle_event(volatile CanRxMsgTypeDef * rx_msg)
{
 800141c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint16_t id;

    id = rx_msg->StdId;
    for (uint8_t data_ctr = 0; data_ctr < s_lib_can_rx_evt_data_count; data_ctr++)
 800141e:	4b0e      	ldr	r3, [pc, #56]	; (8001458 <lib_can_find_and_handle_event+0x3c>)
    id = rx_msg->StdId;
 8001420:	6802      	ldr	r2, [r0, #0]
    for (uint8_t data_ctr = 0; data_ctr < s_lib_can_rx_evt_data_count; data_ctr++)
 8001422:	781d      	ldrb	r5, [r3, #0]
 8001424:	2300      	movs	r3, #0
    {
        if (s_lib_can_rx_evt_data_list[data_ctr]->p_can_frame->std_id == id)
 8001426:	4e0d      	ldr	r6, [pc, #52]	; (800145c <lib_can_find_and_handle_event+0x40>)
    id = rx_msg->StdId;
 8001428:	b292      	uxth	r2, r2
    for (uint8_t data_ctr = 0; data_ctr < s_lib_can_rx_evt_data_count; data_ctr++)
 800142a:	b2d9      	uxtb	r1, r3
 800142c:	428d      	cmp	r5, r1
 800142e:	d801      	bhi.n	8001434 <lib_can_find_and_handle_event+0x18>
            memcpy((uint8_t *)s_lib_can_rx_evt_data_list[data_ctr]->p_data, (uint8_t *)rx_msg->Data, s_lib_can_rx_evt_data_list[data_ctr]->p_can_frame->dlc);
            s_lib_can_rx_evt_data_list[data_ctr]->evt_handler(s_lib_can_rx_evt_data_list[data_ctr]->p_can_frame);
            return true;
        }
    }
    return false;
 8001430:	2000      	movs	r0, #0
 8001432:	e010      	b.n	8001456 <lib_can_find_and_handle_event+0x3a>
        if (s_lib_can_rx_evt_data_list[data_ctr]->p_can_frame->std_id == id)
 8001434:	0099      	lsls	r1, r3, #2
 8001436:	598c      	ldr	r4, [r1, r6]
 8001438:	3301      	adds	r3, #1
 800143a:	6821      	ldr	r1, [r4, #0]
 800143c:	884f      	ldrh	r7, [r1, #2]
 800143e:	4297      	cmp	r7, r2
 8001440:	d1f3      	bne.n	800142a <lib_can_find_and_handle_event+0xe>
            memcpy((uint8_t *)s_lib_can_rx_evt_data_list[data_ctr]->p_data, (uint8_t *)rx_msg->Data, s_lib_can_rx_evt_data_list[data_ctr]->p_can_frame->dlc);
 8001442:	790a      	ldrb	r2, [r1, #4]
 8001444:	0001      	movs	r1, r0
 8001446:	6920      	ldr	r0, [r4, #16]
 8001448:	3114      	adds	r1, #20
 800144a:	f000 fb97 	bl	8001b7c <memcpy>
            s_lib_can_rx_evt_data_list[data_ctr]->evt_handler(s_lib_can_rx_evt_data_list[data_ctr]->p_can_frame);
 800144e:	6820      	ldr	r0, [r4, #0]
 8001450:	6a23      	ldr	r3, [r4, #32]
 8001452:	4798      	blx	r3
            return true;
 8001454:	2001      	movs	r0, #1
}
 8001456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001458:	20000070 	.word	0x20000070
 800145c:	20000074 	.word	0x20000074

08001460 <HAL_CAN_RxCpltCallback>:


void HAL_CAN_RxCpltCallback(CAN_HandleTypeDef* hcan)
{
 8001460:	0003      	movs	r3, r0
    // Check if received real data
    if ((hcan->pRxMsg->IDE == CAN_ID_STD) && (hcan->pRxMsg->RTR == CAN_RTR_DATA))
 8001462:	6b42      	ldr	r2, [r0, #52]	; 0x34
{
 8001464:	b570      	push	{r4, r5, r6, lr}
    if ((hcan->pRxMsg->IDE == CAN_ID_STD) && (hcan->pRxMsg->RTR == CAN_RTR_DATA))
 8001466:	6891      	ldr	r1, [r2, #8]
{
 8001468:	0004      	movs	r4, r0
 800146a:	333d      	adds	r3, #61	; 0x3d
    if ((hcan->pRxMsg->IDE == CAN_ID_STD) && (hcan->pRxMsg->RTR == CAN_RTR_DATA))
 800146c:	2900      	cmp	r1, #0
 800146e:	d149      	bne.n	8001504 <HAL_CAN_RxCpltCallback+0xa4>
 8001470:	68d2      	ldr	r2, [r2, #12]
 8001472:	2a00      	cmp	r2, #0
 8001474:	d146      	bne.n	8001504 <HAL_CAN_RxCpltCallback+0xa4>
    {
        switch(hcan->State)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	b2db      	uxtb	r3, r3
 800147a:	2b22      	cmp	r3, #34	; 0x22
 800147c:	d040      	beq.n	8001500 <HAL_CAN_RxCpltCallback+0xa0>
 800147e:	d804      	bhi.n	800148a <HAL_CAN_RxCpltCallback+0x2a>
 8001480:	2b01      	cmp	r3, #1
 8001482:	d019      	beq.n	80014b8 <HAL_CAN_RxCpltCallback+0x58>
 8001484:	2b12      	cmp	r3, #18
 8001486:	d017      	beq.n	80014b8 <HAL_CAN_RxCpltCallback+0x58>

        default:
            break;
        }
    }
}
 8001488:	bd70      	pop	{r4, r5, r6, pc}
        switch(hcan->State)
 800148a:	2b42      	cmp	r3, #66	; 0x42
 800148c:	d038      	beq.n	8001500 <HAL_CAN_RxCpltCallback+0xa0>
 800148e:	2b52      	cmp	r3, #82	; 0x52
 8001490:	d001      	beq.n	8001496 <HAL_CAN_RxCpltCallback+0x36>
 8001492:	2b32      	cmp	r3, #50	; 0x32
 8001494:	d1f8      	bne.n	8001488 <HAL_CAN_RxCpltCallback+0x28>
            if (!lib_can_find_and_handle_event(&rx_message.rx.can_rx))
 8001496:	4e26      	ldr	r6, [pc, #152]	; (8001530 <HAL_CAN_RxCpltCallback+0xd0>)
 8001498:	0035      	movs	r5, r6
 800149a:	3528      	adds	r5, #40	; 0x28
 800149c:	0028      	movs	r0, r5
 800149e:	f7ff ffbd 	bl	800141c <lib_can_find_and_handle_event>
 80014a2:	2800      	cmp	r0, #0
 80014a4:	d106      	bne.n	80014b4 <HAL_CAN_RxCpltCallback+0x54>
                rx_message.rx.rec_time = HAL_GetTick();
 80014a6:	f7fe fee3 	bl	8000270 <HAL_GetTick>
                Fifo_PushElement(&s_rx_fifo, (void *)&rx_message.rx);
 80014aa:	0029      	movs	r1, r5
                rx_message.rx.rec_time = HAL_GetTick();
 80014ac:	64f0      	str	r0, [r6, #76]	; 0x4c
                Fifo_PushElement(&s_rx_fifo, (void *)&rx_message.rx);
 80014ae:	4821      	ldr	r0, [pc, #132]	; (8001534 <HAL_CAN_RxCpltCallback+0xd4>)
 80014b0:	f000 f888 	bl	80015c4 <Fifo_PushElement>
            HAL_CAN_Receive_IT(hcan, CAN_FIFO0);
 80014b4:	2100      	movs	r1, #0
 80014b6:	e01f      	b.n	80014f8 <HAL_CAN_RxCpltCallback+0x98>
            if (!lib_can_find_and_handle_event(&rx_message.rx.can_rx))
 80014b8:	4d1d      	ldr	r5, [pc, #116]	; (8001530 <HAL_CAN_RxCpltCallback+0xd0>)
 80014ba:	002e      	movs	r6, r5
 80014bc:	3628      	adds	r6, #40	; 0x28
 80014be:	0030      	movs	r0, r6
 80014c0:	f7ff ffac 	bl	800141c <lib_can_find_and_handle_event>
 80014c4:	2800      	cmp	r0, #0
 80014c6:	d106      	bne.n	80014d6 <HAL_CAN_RxCpltCallback+0x76>
                rx_message.rx.rec_time = HAL_GetTick();
 80014c8:	f7fe fed2 	bl	8000270 <HAL_GetTick>
                Fifo_PushElement(&s_rx_fifo, (void *)&rx_message.rx);
 80014cc:	0031      	movs	r1, r6
                rx_message.rx.rec_time = HAL_GetTick();
 80014ce:	64e8      	str	r0, [r5, #76]	; 0x4c
                Fifo_PushElement(&s_rx_fifo, (void *)&rx_message.rx);
 80014d0:	4818      	ldr	r0, [pc, #96]	; (8001534 <HAL_CAN_RxCpltCallback+0xd4>)
 80014d2:	f000 f877 	bl	80015c4 <Fifo_PushElement>
            HAL_CAN_Receive_IT(hcan, CAN_FIFO0);
 80014d6:	2100      	movs	r1, #0
 80014d8:	0020      	movs	r0, r4
 80014da:	f7fe ffed 	bl	80004b8 <HAL_CAN_Receive_IT>
            if (!lib_can_find_and_handle_event(&rx_message.rx1.can_rx))
 80014de:	0028      	movs	r0, r5
 80014e0:	f7ff ff9c 	bl	800141c <lib_can_find_and_handle_event>
 80014e4:	2800      	cmp	r0, #0
 80014e6:	d106      	bne.n	80014f6 <HAL_CAN_RxCpltCallback+0x96>
                rx_message.rx1.rec_time = HAL_GetTick();
 80014e8:	f7fe fec2 	bl	8000270 <HAL_GetTick>
                Fifo_PushElement(&s_rx_fifo, (void *)&rx_message.rx1);
 80014ec:	0029      	movs	r1, r5
                rx_message.rx1.rec_time = HAL_GetTick();
 80014ee:	6268      	str	r0, [r5, #36]	; 0x24
                Fifo_PushElement(&s_rx_fifo, (void *)&rx_message.rx1);
 80014f0:	4810      	ldr	r0, [pc, #64]	; (8001534 <HAL_CAN_RxCpltCallback+0xd4>)
 80014f2:	f000 f867 	bl	80015c4 <Fifo_PushElement>
            HAL_CAN_Receive_IT(hcan, CAN_FIFO1);
 80014f6:	2101      	movs	r1, #1
            HAL_CAN_Receive_IT(hcan, CAN_FIFO0);
 80014f8:	0020      	movs	r0, r4
 80014fa:	f7fe ffdd 	bl	80004b8 <HAL_CAN_Receive_IT>
}
 80014fe:	e7c3      	b.n	8001488 <HAL_CAN_RxCpltCallback+0x28>
            if (!lib_can_find_and_handle_event(&rx_message.rx1.can_rx))
 8001500:	4d0b      	ldr	r5, [pc, #44]	; (8001530 <HAL_CAN_RxCpltCallback+0xd0>)
 8001502:	e7ec      	b.n	80014de <HAL_CAN_RxCpltCallback+0x7e>
        switch(hcan->State)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	b2db      	uxtb	r3, r3
 8001508:	2b22      	cmp	r3, #34	; 0x22
 800150a:	d0f4      	beq.n	80014f6 <HAL_CAN_RxCpltCallback+0x96>
 800150c:	d808      	bhi.n	8001520 <HAL_CAN_RxCpltCallback+0xc0>
 800150e:	2b01      	cmp	r3, #1
 8001510:	d001      	beq.n	8001516 <HAL_CAN_RxCpltCallback+0xb6>
 8001512:	2b12      	cmp	r3, #18
 8001514:	d1b8      	bne.n	8001488 <HAL_CAN_RxCpltCallback+0x28>
            HAL_CAN_Receive_IT(hcan, CAN_FIFO0);
 8001516:	2100      	movs	r1, #0
 8001518:	0020      	movs	r0, r4
 800151a:	f7fe ffcd 	bl	80004b8 <HAL_CAN_Receive_IT>
 800151e:	e7ea      	b.n	80014f6 <HAL_CAN_RxCpltCallback+0x96>
        switch(hcan->State)
 8001520:	2b42      	cmp	r3, #66	; 0x42
 8001522:	d0e8      	beq.n	80014f6 <HAL_CAN_RxCpltCallback+0x96>
 8001524:	2b52      	cmp	r3, #82	; 0x52
 8001526:	d0c5      	beq.n	80014b4 <HAL_CAN_RxCpltCallback+0x54>
 8001528:	2b32      	cmp	r3, #50	; 0x32
 800152a:	d1ad      	bne.n	8001488 <HAL_CAN_RxCpltCallback+0x28>
 800152c:	e7c2      	b.n	80014b4 <HAL_CAN_RxCpltCallback+0x54>
 800152e:	46c0      	nop			; (mov r8, r8)
 8001530:	20000020 	.word	0x20000020
 8001534:	2000008c 	.word	0x2000008c

08001538 <HAL_CAN_TxCpltCallback>:

void HAL_CAN_TxCpltCallback(CAN_HandleTypeDef* hcan)
{
    lib_can_tx_message_t tx_message;

    sv_tx_ongoing_count = 0;
 8001538:	2300      	movs	r3, #0
{
 800153a:	b570      	push	{r4, r5, r6, lr}
 800153c:	0005      	movs	r5, r0
    sv_tx_ongoing_count = 0;
 800153e:	4c0c      	ldr	r4, [pc, #48]	; (8001570 <HAL_CAN_TxCpltCallback+0x38>)
{
 8001540:	b088      	sub	sp, #32
    sv_tx_ongoing_count = 0;
 8001542:	7023      	strb	r3, [r4, #0]
    while (sv_tx_ongoing_count < 3)
 8001544:	7823      	ldrb	r3, [r4, #0]
 8001546:	2b02      	cmp	r3, #2
 8001548:	d901      	bls.n	800154e <HAL_CAN_TxCpltCallback+0x16>
        else
        {
            break;
        }
    }
}
 800154a:	b008      	add	sp, #32
 800154c:	bd70      	pop	{r4, r5, r6, pc}
        if (FIFO_OK == Fifo_PullElement(&s_tx_fifo, (void *)&tx_message))
 800154e:	ae01      	add	r6, sp, #4
 8001550:	0031      	movs	r1, r6
 8001552:	4808      	ldr	r0, [pc, #32]	; (8001574 <HAL_CAN_TxCpltCallback+0x3c>)
 8001554:	f000 f81c 	bl	8001590 <Fifo_PullElement>
 8001558:	2800      	cmp	r0, #0
 800155a:	d1f6      	bne.n	800154a <HAL_CAN_TxCpltCallback+0x12>
            sv_tx_ongoing_count++;
 800155c:	7823      	ldrb	r3, [r4, #0]
            hcan->pTxMsg = &tx_message.can_tx;
 800155e:	632e      	str	r6, [r5, #48]	; 0x30
            sv_tx_ongoing_count++;
 8001560:	3301      	adds	r3, #1
 8001562:	b2db      	uxtb	r3, r3
            HAL_CAN_Transmit_IT(hcan);
 8001564:	0028      	movs	r0, r5
            sv_tx_ongoing_count++;
 8001566:	7023      	strb	r3, [r4, #0]
            HAL_CAN_Transmit_IT(hcan);
 8001568:	f7fe ff26 	bl	80003b8 <HAL_CAN_Transmit_IT>
 800156c:	e7ea      	b.n	8001544 <HAL_CAN_TxCpltCallback+0xc>
 800156e:	46c0      	nop			; (mov r8, r8)
 8001570:	200000c4 	.word	0x200000c4
 8001574:	200000a8 	.word	0x200000a8

08001578 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
    // tx failure
    if (hcan->ErrorCode == HAL_CAN_ERROR_TXFAIL)
 8001578:	2380      	movs	r3, #128	; 0x80
 800157a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800157c:	011b      	lsls	r3, r3, #4
 800157e:	429a      	cmp	r2, r3
 8001580:	d102      	bne.n	8001588 <HAL_CAN_ErrorCallback+0x10>
    {
        sv_tx_ongoing_count = 0;
 8001582:	2200      	movs	r2, #0
 8001584:	4b01      	ldr	r3, [pc, #4]	; (800158c <HAL_CAN_ErrorCallback+0x14>)
 8001586:	701a      	strb	r2, [r3, #0]
    }
}
 8001588:	4770      	bx	lr
 800158a:	46c0      	nop			; (mov r8, r8)
 800158c:	200000c4 	.word	0x200000c4

08001590 <Fifo_PullElement>:

    return handle;
}

Fifo_StatusTypeDef Fifo_PullElement(Fifo_Handle_t * fifo, void * Element)
{
 8001590:	b510      	push	{r4, lr}
 8001592:	0004      	movs	r4, r0
    if (fifo->uxMessagesWaiting == 0){
 8001594:	69a2      	ldr	r2, [r4, #24]
{
 8001596:	0008      	movs	r0, r1
        return FIFO_EMPTY;
 8001598:	2301      	movs	r3, #1
    if (fifo->uxMessagesWaiting == 0){
 800159a:	2a00      	cmp	r2, #0
 800159c:	d010      	beq.n	80015c0 <Fifo_PullElement+0x30>
    }

    fifo->pcReadFrom += fifo->uxItemSize;
 800159e:	68e3      	ldr	r3, [r4, #12]
 80015a0:	6962      	ldr	r2, [r4, #20]
 80015a2:	189b      	adds	r3, r3, r2
 80015a4:	60e3      	str	r3, [r4, #12]
    if (fifo->pcReadFrom >= fifo->pcTail){
 80015a6:	68e1      	ldr	r1, [r4, #12]
 80015a8:	6863      	ldr	r3, [r4, #4]
 80015aa:	4299      	cmp	r1, r3
 80015ac:	d301      	bcc.n	80015b2 <Fifo_PullElement+0x22>
        fifo->pcReadFrom = fifo->pcHead;
 80015ae:	6823      	ldr	r3, [r4, #0]
 80015b0:	60e3      	str	r3, [r4, #12]
    }

    (void) memcpy( (void *) Element, (void *) fifo->pcReadFrom, (size_t) fifo->uxItemSize);
 80015b2:	68e1      	ldr	r1, [r4, #12]
 80015b4:	f000 fae2 	bl	8001b7c <memcpy>

    fifo->uxMessagesWaiting--;
 80015b8:	69a3      	ldr	r3, [r4, #24]
 80015ba:	3b01      	subs	r3, #1
 80015bc:	61a3      	str	r3, [r4, #24]
    return FIFO_OK;
 80015be:	2300      	movs	r3, #0
}
 80015c0:	0018      	movs	r0, r3
 80015c2:	bd10      	pop	{r4, pc}

080015c4 <Fifo_PushElement>:

Fifo_StatusTypeDef Fifo_PushElement(Fifo_Handle_t * fifo, void * newElement)
{
 80015c4:	b510      	push	{r4, lr}
 80015c6:	0004      	movs	r4, r0
    if (fifo->uxMessagesWaiting == fifo->uxLength){
 80015c8:	6983      	ldr	r3, [r0, #24]
 80015ca:	6922      	ldr	r2, [r4, #16]
        return FIFO_FULL;
 80015cc:	2002      	movs	r0, #2
    if (fifo->uxMessagesWaiting == fifo->uxLength){
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d011      	beq.n	80015f6 <Fifo_PushElement+0x32>
    }

    ( void ) memcpy( ( void * ) fifo->pcWriteTo, newElement, ( size_t ) fifo->uxItemSize );
 80015d2:	6962      	ldr	r2, [r4, #20]
 80015d4:	68a0      	ldr	r0, [r4, #8]
 80015d6:	f000 fad1 	bl	8001b7c <memcpy>

    fifo->pcWriteTo += fifo->uxItemSize;
 80015da:	68a3      	ldr	r3, [r4, #8]
 80015dc:	6962      	ldr	r2, [r4, #20]
 80015de:	189b      	adds	r3, r3, r2
 80015e0:	60a3      	str	r3, [r4, #8]
    if ( fifo->pcWriteTo >= fifo->pcTail ){
 80015e2:	68a2      	ldr	r2, [r4, #8]
 80015e4:	6863      	ldr	r3, [r4, #4]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d301      	bcc.n	80015ee <Fifo_PushElement+0x2a>
        fifo->pcWriteTo = fifo->pcHead;
 80015ea:	6823      	ldr	r3, [r4, #0]
 80015ec:	60a3      	str	r3, [r4, #8]
    }

    fifo->uxMessagesWaiting++;
    return FIFO_OK;
 80015ee:	2000      	movs	r0, #0
    fifo->uxMessagesWaiting++;
 80015f0:	69a3      	ldr	r3, [r4, #24]
 80015f2:	3301      	adds	r3, #1
 80015f4:	61a3      	str	r3, [r4, #24]
}
 80015f6:	bd10      	pop	{r4, pc}

080015f8 <HAL_TIM_PeriodElapsedCallback>:
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	// 1ms
	if (htim == &htim14)
 80015f8:	4b03      	ldr	r3, [pc, #12]	; (8001608 <HAL_TIM_PeriodElapsedCallback+0x10>)
{
 80015fa:	b510      	push	{r4, lr}
	if (htim == &htim14)
 80015fc:	4298      	cmp	r0, r3
 80015fe:	d102      	bne.n	8001606 <HAL_TIM_PeriodElapsedCallback+0xe>
	{
#if CONFIG_CAN_LIB_ENABLED
		(*can_handler)();
 8001600:	4b02      	ldr	r3, [pc, #8]	; (800160c <HAL_TIM_PeriodElapsedCallback+0x14>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4798      	blx	r3

#if CONFIG_GYR_ENABLED
		m_gyr_update();
#endif /* CONFIG_GYR_ENABLED */
	}
}
 8001606:	bd10      	pop	{r4, pc}
 8001608:	200001b8 	.word	0x200001b8
 800160c:	200000c8 	.word	0x200000c8

08001610 <MX_CAN_Init>:
{

  hcan.Instance = CAN;
  hcan.Init.Prescaler = 8;
  hcan.Init.Mode = CAN_MODE_NORMAL;
  hcan.Init.SJW = CAN_SJW_3TQ;
 8001610:	2280      	movs	r2, #128	; 0x80
  hcan.Instance = CAN;
 8001612:	4810      	ldr	r0, [pc, #64]	; (8001654 <MX_CAN_Init+0x44>)
  hcan.Init.SJW = CAN_SJW_3TQ;
 8001614:	0492      	lsls	r2, r2, #18
{
 8001616:	b510      	push	{r4, lr}
  hcan.Init.SJW = CAN_SJW_3TQ;
 8001618:	60c2      	str	r2, [r0, #12]
  hcan.Init.BS1 = CAN_BS1_16TQ;
 800161a:	22f0      	movs	r2, #240	; 0xf0
  hcan.Instance = CAN;
 800161c:	4b0e      	ldr	r3, [pc, #56]	; (8001658 <MX_CAN_Init+0x48>)
  hcan.Init.BS1 = CAN_BS1_16TQ;
 800161e:	0312      	lsls	r2, r2, #12
 8001620:	6102      	str	r2, [r0, #16]
  hcan.Init.BS2 = CAN_BS2_7TQ;
 8001622:	22c0      	movs	r2, #192	; 0xc0
  hcan.Instance = CAN;
 8001624:	6003      	str	r3, [r0, #0]
  hcan.Init.Prescaler = 8;
 8001626:	2308      	movs	r3, #8
  hcan.Init.BS2 = CAN_BS2_7TQ;
 8001628:	03d2      	lsls	r2, r2, #15
  hcan.Init.Prescaler = 8;
 800162a:	6043      	str	r3, [r0, #4]
  hcan.Init.BS2 = CAN_BS2_7TQ;
 800162c:	6142      	str	r2, [r0, #20]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800162e:	2300      	movs	r3, #0
  hcan.Init.TTCM = DISABLE;
  hcan.Init.ABOM = ENABLE;
 8001630:	2201      	movs	r2, #1
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001632:	6083      	str	r3, [r0, #8]
  hcan.Init.TTCM = DISABLE;
 8001634:	6183      	str	r3, [r0, #24]
  hcan.Init.ABOM = ENABLE;
 8001636:	61c2      	str	r2, [r0, #28]
  hcan.Init.AWUM = DISABLE;
 8001638:	6203      	str	r3, [r0, #32]
  hcan.Init.NART = DISABLE;
 800163a:	6243      	str	r3, [r0, #36]	; 0x24
  hcan.Init.RFLM = DISABLE;
 800163c:	6283      	str	r3, [r0, #40]	; 0x28
  hcan.Init.TXFP = DISABLE;
 800163e:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001640:	f7fe fe1c 	bl	800027c <HAL_CAN_Init>
 8001644:	2800      	cmp	r0, #0
 8001646:	d003      	beq.n	8001650 <MX_CAN_Init+0x40>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001648:	2145      	movs	r1, #69	; 0x45
 800164a:	4804      	ldr	r0, [pc, #16]	; (800165c <MX_CAN_Init+0x4c>)
 800164c:	f000 f8d5 	bl	80017fa <_Error_Handler>
  }

}
 8001650:	bd10      	pop	{r4, pc}
 8001652:	46c0      	nop			; (mov r8, r8)
 8001654:	200000d0 	.word	0x200000d0
 8001658:	40006400 	.word	0x40006400
 800165c:	08001bc8 	.word	0x08001bc8

08001660 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001660:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(canHandle->Instance==CAN)
 8001662:	4b14      	ldr	r3, [pc, #80]	; (80016b4 <HAL_CAN_MspInit+0x54>)
 8001664:	6802      	ldr	r2, [r0, #0]
{
 8001666:	b086      	sub	sp, #24
  if(canHandle->Instance==CAN)
 8001668:	429a      	cmp	r2, r3
 800166a:	d121      	bne.n	80016b0 <HAL_CAN_MspInit+0x50>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800166c:	2080      	movs	r0, #128	; 0x80
 800166e:	4a12      	ldr	r2, [pc, #72]	; (80016b8 <HAL_CAN_MspInit+0x58>)
 8001670:	0480      	lsls	r0, r0, #18
 8001672:	69d1      	ldr	r1, [r2, #28]
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2400      	movs	r4, #0
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001676:	4301      	orrs	r1, r0
 8001678:	61d1      	str	r1, [r2, #28]
 800167a:	69d3      	ldr	r3, [r2, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167c:	a901      	add	r1, sp, #4
    __HAL_RCC_CAN1_CLK_ENABLE();
 800167e:	4003      	ands	r3, r0
 8001680:	9300      	str	r3, [sp, #0]
 8001682:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001684:	23c0      	movs	r3, #192	; 0xc0
 8001686:	015b      	lsls	r3, r3, #5
 8001688:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168a:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168c:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001690:	3301      	adds	r3, #1
 8001692:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001694:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8001696:	3301      	adds	r3, #1
 8001698:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169c:	f7ff f94a 	bl	8000934 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 80016a0:	201e      	movs	r0, #30
 80016a2:	0022      	movs	r2, r4
 80016a4:	0021      	movs	r1, r4
 80016a6:	f7ff f8dd 	bl	8000864 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 80016aa:	201e      	movs	r0, #30
 80016ac:	f7ff f90a 	bl	80008c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 80016b0:	b006      	add	sp, #24
 80016b2:	bd10      	pop	{r4, pc}
 80016b4:	40006400 	.word	0x40006400
 80016b8:	40021000 	.word	0x40021000

080016bc <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016bc:	2080      	movs	r0, #128	; 0x80
 80016be:	4b27      	ldr	r3, [pc, #156]	; (800175c <MX_GPIO_Init+0xa0>)
 80016c0:	03c0      	lsls	r0, r0, #15
 80016c2:	6959      	ldr	r1, [r3, #20]
{
 80016c4:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016c6:	4301      	orrs	r1, r0
 80016c8:	6159      	str	r1, [r3, #20]
 80016ca:	695a      	ldr	r2, [r3, #20]
{
 80016cc:	b089      	sub	sp, #36	; 0x24
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016ce:	4002      	ands	r2, r0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d0:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016d2:	9200      	str	r2, [sp, #0]
 80016d4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d6:	6959      	ldr	r1, [r3, #20]
 80016d8:	0280      	lsls	r0, r0, #10
 80016da:	4301      	orrs	r1, r0
 80016dc:	6159      	str	r1, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016de:	2180      	movs	r1, #128	; 0x80

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nRF24_CE_GPIO_Port, nRF24_CE_Pin, GPIO_PIN_RESET);
 80016e0:	2590      	movs	r5, #144	; 0x90
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e2:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e4:	02c9      	lsls	r1, r1, #11
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e6:	4002      	ands	r2, r0
 80016e8:	9201      	str	r2, [sp, #4]
 80016ea:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ec:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(nRF24_CE_GPIO_Port, nRF24_CE_Pin, GPIO_PIN_RESET);
 80016ee:	05ed      	lsls	r5, r5, #23
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f0:	430a      	orrs	r2, r1
 80016f2:	615a      	str	r2, [r3, #20]
 80016f4:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(nRF24_CE_GPIO_Port, nRF24_CE_Pin, GPIO_PIN_RESET);
 80016f6:	0028      	movs	r0, r5
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f8:	400b      	ands	r3, r1
 80016fa:	9302      	str	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nRF24_CSN_GPIO_Port, nRF24_CSN_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80016fc:	4e18      	ldr	r6, [pc, #96]	; (8001760 <MX_GPIO_Init+0xa4>)
  HAL_GPIO_WritePin(nRF24_CE_GPIO_Port, nRF24_CE_Pin, GPIO_PIN_RESET);
 80016fe:	2200      	movs	r2, #0
 8001700:	2104      	movs	r1, #4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001702:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(nRF24_CE_GPIO_Port, nRF24_CE_Pin, GPIO_PIN_RESET);
 8001704:	f7ff f9d2 	bl	8000aac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(nRF24_CSN_GPIO_Port, nRF24_CSN_Pin, GPIO_PIN_SET);
 8001708:	0028      	movs	r0, r5
 800170a:	2201      	movs	r2, #1
 800170c:	2108      	movs	r1, #8
 800170e:	f7ff f9cd 	bl	8000aac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8001712:	2200      	movs	r2, #0
 8001714:	0030      	movs	r0, r6
 8001716:	2108      	movs	r1, #8
 8001718:	f7ff f9c8 	bl	8000aac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = nRF24_CE_Pin|nRF24_CSN_Pin;
 800171c:	230c      	movs	r3, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001720:	2701      	movs	r7, #1
  GPIO_InitStruct.Pin = nRF24_CE_Pin|nRF24_CSN_Pin;
 8001722:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001724:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001726:	3b09      	subs	r3, #9
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001728:	0028      	movs	r0, r5
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800172a:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172c:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172e:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001730:	f7ff f900 	bl	8000934 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = nRF24_IRQ_Pin;
 8001734:	2310      	movs	r3, #16
 8001736:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001738:	4b0a      	ldr	r3, [pc, #40]	; (8001764 <MX_GPIO_Init+0xa8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(nRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 800173a:	a903      	add	r1, sp, #12
 800173c:	0028      	movs	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800173e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001740:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(nRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001742:	f7ff f8f7 	bl	8000934 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001746:	2308      	movs	r3, #8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001748:	a903      	add	r1, sp, #12
 800174a:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800174c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174e:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001750:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001752:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001754:	f7ff f8ee 	bl	8000934 <HAL_GPIO_Init>

}
 8001758:	b009      	add	sp, #36	; 0x24
 800175a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800175c:	40021000 	.word	0x40021000
 8001760:	48000400 	.word	0x48000400
 8001764:	10210000 	.word	0x10210000

08001768 <SystemClock_Config>:
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001768:	2380      	movs	r3, #128	; 0x80
{
 800176a:	b530      	push	{r4, r5, lr}
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800176c:	025b      	lsls	r3, r3, #9
{
 800176e:	b093      	sub	sp, #76	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001770:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001772:	2380      	movs	r3, #128	; 0x80
 8001774:	035b      	lsls	r3, r3, #13
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001776:	2401      	movs	r4, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001778:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800177a:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800177c:	2300      	movs	r3, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800177e:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001780:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001782:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001784:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001786:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001788:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800178a:	f7ff f995 	bl	8000ab8 <HAL_RCC_OscConfig>
 800178e:	2800      	cmp	r0, #0
 8001790:	d000      	beq.n	8001794 <SystemClock_Config+0x2c>
 8001792:	e7fe      	b.n	8001792 <SystemClock_Config+0x2a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001794:	2307      	movs	r3, #7
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001796:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001798:	9004      	str	r0, [sp, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800179a:	0021      	movs	r1, r4
 800179c:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800179e:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017a0:	9502      	str	r5, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80017a2:	f7ff fc01 	bl	8000fa8 <HAL_RCC_ClockConfig>
 80017a6:	1e04      	subs	r4, r0, #0
 80017a8:	d000      	beq.n	80017ac <SystemClock_Config+0x44>
 80017aa:	e7fe      	b.n	80017aa <SystemClock_Config+0x42>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Enables the Clock Security System 
    */
  HAL_RCC_EnableCSS();
 80017ac:	f7ff fbb6 	bl	8000f1c <HAL_RCC_EnableCSS>

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80017b0:	f7ff fca8 	bl	8001104 <HAL_RCC_GetHCLKFreq>
 80017b4:	21fa      	movs	r1, #250	; 0xfa
 80017b6:	0089      	lsls	r1, r1, #2
 80017b8:	f7fe fca4 	bl	8000104 <__udivsi3>
 80017bc:	f7ff f88c 	bl	80008d8 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80017c0:	2004      	movs	r0, #4
 80017c2:	f7ff f8a3 	bl	800090c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80017c6:	2001      	movs	r0, #1
 80017c8:	0022      	movs	r2, r4
 80017ca:	0021      	movs	r1, r4
 80017cc:	4240      	negs	r0, r0
 80017ce:	f7ff f849 	bl	8000864 <HAL_NVIC_SetPriority>
}
 80017d2:	b013      	add	sp, #76	; 0x4c
 80017d4:	bd30      	pop	{r4, r5, pc}

080017d6 <main>:
{
 80017d6:	b510      	push	{r4, lr}
  HAL_Init();
 80017d8:	f7fe fd32 	bl	8000240 <HAL_Init>
  SystemClock_Config();
 80017dc:	f7ff ffc4 	bl	8001768 <SystemClock_Config>
  MX_GPIO_Init();
 80017e0:	f7ff ff6c 	bl	80016bc <MX_GPIO_Init>
  MX_SPI1_Init();
 80017e4:	f000 f80a 	bl	80017fc <MX_SPI1_Init>
  MX_CAN_Init();
 80017e8:	f7ff ff12 	bl	8001610 <MX_CAN_Init>
  MX_TIM17_Init();
 80017ec:	f000 f910 	bl	8001a10 <MX_TIM17_Init>
  MX_TIM14_Init();
 80017f0:	f000 f8ce 	bl	8001990 <MX_TIM14_Init>
  MX_TIM16_Init();
 80017f4:	f000 f8ec 	bl	80019d0 <MX_TIM16_Init>
 80017f8:	e7fe      	b.n	80017f8 <main+0x22>

080017fa <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 80017fa:	e7fe      	b.n	80017fa <_Error_Handler>

080017fc <MX_SPI1_Init>:
{

  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017fc:	22e0      	movs	r2, #224	; 0xe0
  hspi1.Instance = SPI1;
 80017fe:	4811      	ldr	r0, [pc, #68]	; (8001844 <MX_SPI1_Init+0x48>)
 8001800:	4b11      	ldr	r3, [pc, #68]	; (8001848 <MX_SPI1_Init+0x4c>)
{
 8001802:	b510      	push	{r4, lr}
  hspi1.Instance = SPI1;
 8001804:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001806:	2382      	movs	r3, #130	; 0x82
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001808:	00d2      	lsls	r2, r2, #3
 800180a:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800180c:	2280      	movs	r2, #128	; 0x80
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	6043      	str	r3, [r0, #4]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 8001812:	2107      	movs	r1, #7
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001814:	2300      	movs	r3, #0
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001816:	0092      	lsls	r2, r2, #2
 8001818:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800181a:	3af9      	subs	r2, #249	; 0xf9
 800181c:	3aff      	subs	r2, #255	; 0xff
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800181e:	6083      	str	r3, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001820:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001822:	6143      	str	r3, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001824:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001826:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001828:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800182a:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800182c:	62c1      	str	r1, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800182e:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001830:	6342      	str	r2, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001832:	f7ff fc7f 	bl	8001134 <HAL_SPI_Init>
 8001836:	2800      	cmp	r0, #0
 8001838:	d003      	beq.n	8001842 <MX_SPI1_Init+0x46>
  {
    _Error_Handler(__FILE__, __LINE__);
 800183a:	2147      	movs	r1, #71	; 0x47
 800183c:	4803      	ldr	r0, [pc, #12]	; (800184c <MX_SPI1_Init+0x50>)
 800183e:	f7ff ffdc 	bl	80017fa <_Error_Handler>
  }

}
 8001842:	bd10      	pop	{r4, pc}
 8001844:	20000114 	.word	0x20000114
 8001848:	40013000 	.word	0x40013000
 800184c:	08001bd5 	.word	0x08001bd5

08001850 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001850:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI1)
 8001852:	4b0f      	ldr	r3, [pc, #60]	; (8001890 <HAL_SPI_MspInit+0x40>)
 8001854:	6802      	ldr	r2, [r0, #0]
 8001856:	429a      	cmp	r2, r3
 8001858:	d117      	bne.n	800188a <HAL_SPI_MspInit+0x3a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800185a:	2080      	movs	r0, #128	; 0x80
 800185c:	4a0d      	ldr	r2, [pc, #52]	; (8001894 <HAL_SPI_MspInit+0x44>)
 800185e:	0140      	lsls	r0, r0, #5
 8001860:	6991      	ldr	r1, [r2, #24]
 8001862:	4301      	orrs	r1, r0
 8001864:	6191      	str	r1, [r2, #24]
 8001866:	6993      	ldr	r3, [r2, #24]
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001868:	2203      	movs	r2, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 800186a:	4003      	ands	r3, r0
 800186c:	9300      	str	r3, [sp, #0]
 800186e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001870:	23e0      	movs	r3, #224	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001872:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001874:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001876:	3bde      	subs	r3, #222	; 0xde
 8001878:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800187c:	a901      	add	r1, sp, #4
 800187e:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001882:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001884:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001886:	f7ff f855 	bl	8000934 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800188a:	b007      	add	sp, #28
 800188c:	bd00      	pop	{pc}
 800188e:	46c0      	nop			; (mov r8, r8)
 8001890:	40013000 	.word	0x40013000
 8001894:	40021000 	.word	0x40021000

08001898 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001898:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800189a:	2001      	movs	r0, #1
 800189c:	4a0c      	ldr	r2, [pc, #48]	; (80018d0 <HAL_MspInit+0x38>)
 800189e:	6991      	ldr	r1, [r2, #24]
 80018a0:	4301      	orrs	r1, r0
 80018a2:	6191      	str	r1, [r2, #24]
 80018a4:	6993      	ldr	r3, [r2, #24]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 80018a6:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018a8:	4003      	ands	r3, r0
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 80018aa:	0011      	movs	r1, r2
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ac:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 80018ae:	3806      	subs	r0, #6
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018b0:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 80018b2:	f7fe ffd7 	bl	8000864 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80018b6:	2200      	movs	r2, #0
 80018b8:	2002      	movs	r0, #2
 80018ba:	0011      	movs	r1, r2
 80018bc:	4240      	negs	r0, r0
 80018be:	f7fe ffd1 	bl	8000864 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80018c2:	2200      	movs	r2, #0
 80018c4:	2001      	movs	r0, #1
 80018c6:	0011      	movs	r1, r2
 80018c8:	4240      	negs	r0, r0
 80018ca:	f7fe ffcb 	bl	8000864 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ce:	bd07      	pop	{r0, r1, r2, pc}
 80018d0:	40021000 	.word	0x40021000

080018d4 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 80018d4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80018d6:	f7ff fc1d 	bl	8001114 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80018da:	bd10      	pop	{r4, pc}

080018dc <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80018dc:	e7fe      	b.n	80018dc <HardFault_Handler>

080018de <SVC_Handler>:
 80018de:	4770      	bx	lr

080018e0 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018e0:	4770      	bx	lr

080018e2 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80018e2:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018e4:	f7fe fcbc 	bl	8000260 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80018e8:	f7ff f81f 	bl	800092a <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018ec:	bd10      	pop	{r4, pc}
	...

080018f0 <TIM14_IRQHandler>:

/**
* @brief This function handles TIM14 global interrupt.
*/
void TIM14_IRQHandler(void)
{
 80018f0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80018f2:	4802      	ldr	r0, [pc, #8]	; (80018fc <TIM14_IRQHandler+0xc>)
 80018f4:	f7ff fc80 	bl	80011f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80018f8:	bd10      	pop	{r4, pc}
 80018fa:	46c0      	nop			; (mov r8, r8)
 80018fc:	200001b8 	.word	0x200001b8

08001900 <TIM16_IRQHandler>:

/**
* @brief This function handles TIM16 global interrupt.
*/
void TIM16_IRQHandler(void)
{
 8001900:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001902:	4802      	ldr	r0, [pc, #8]	; (800190c <TIM16_IRQHandler+0xc>)
 8001904:	f7ff fc78 	bl	80011f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8001908:	bd10      	pop	{r4, pc}
 800190a:	46c0      	nop			; (mov r8, r8)
 800190c:	200001f8 	.word	0x200001f8

08001910 <TIM17_IRQHandler>:

/**
* @brief This function handles TIM17 global interrupt.
*/
void TIM17_IRQHandler(void)
{
 8001910:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001912:	4802      	ldr	r0, [pc, #8]	; (800191c <TIM17_IRQHandler+0xc>)
 8001914:	f7ff fc70 	bl	80011f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8001918:	bd10      	pop	{r4, pc}
 800191a:	46c0      	nop			; (mov r8, r8)
 800191c:	20000178 	.word	0x20000178

08001920 <CEC_CAN_IRQHandler>:

/**
* @brief This function handles HDMI-CEC and CAN global interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
*/
void CEC_CAN_IRQHandler(void)
{
 8001920:	b510      	push	{r4, lr}
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001922:	4802      	ldr	r0, [pc, #8]	; (800192c <CEC_CAN_IRQHandler+0xc>)
 8001924:	f7fe feac 	bl	8000680 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 8001928:	bd10      	pop	{r4, pc}
 800192a:	46c0      	nop			; (mov r8, r8)
 800192c:	200000d0 	.word	0x200000d0

08001930 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8001930:	2101      	movs	r1, #1
 8001932:	4b11      	ldr	r3, [pc, #68]	; (8001978 <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8001934:	4811      	ldr	r0, [pc, #68]	; (800197c <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	430a      	orrs	r2, r1
 800193a:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 800193c:	685a      	ldr	r2, [r3, #4]
 800193e:	4002      	ands	r2, r0
 8001940:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	480e      	ldr	r0, [pc, #56]	; (8001980 <SystemInit+0x50>)
 8001946:	4002      	ands	r2, r0
 8001948:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	480d      	ldr	r0, [pc, #52]	; (8001984 <SystemInit+0x54>)
 800194e:	4002      	ands	r2, r0
 8001950:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8001952:	685a      	ldr	r2, [r3, #4]
 8001954:	480c      	ldr	r0, [pc, #48]	; (8001988 <SystemInit+0x58>)
 8001956:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8001958:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 800195a:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 800195c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800195e:	4382      	bics	r2, r0
 8001960:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F071xB)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFCEACU;
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
 8001962:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001964:	4809      	ldr	r0, [pc, #36]	; (800198c <SystemInit+0x5c>)
 8001966:	4002      	ands	r2, r0
 8001968:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 800196a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800196c:	438a      	bics	r2, r1
 800196e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001970:	2200      	movs	r2, #0
 8001972:	609a      	str	r2, [r3, #8]

}
 8001974:	4770      	bx	lr
 8001976:	46c0      	nop			; (mov r8, r8)
 8001978:	40021000 	.word	0x40021000
 800197c:	08ffb80c 	.word	0x08ffb80c
 8001980:	fef6ffff 	.word	0xfef6ffff
 8001984:	fffbffff 	.word	0xfffbffff
 8001988:	ffc0ffff 	.word	0xffc0ffff
 800198c:	fff0feac 	.word	0xfff0feac

08001990 <MX_TIM14_Init>:

/* TIM14 init function */
void MX_TIM14_Init(void)
{

  htim14.Instance = TIM14;
 8001990:	480b      	ldr	r0, [pc, #44]	; (80019c0 <MX_TIM14_Init+0x30>)
 8001992:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <MX_TIM14_Init+0x34>)
{
 8001994:	b510      	push	{r4, lr}
  htim14.Instance = TIM14;
 8001996:	6003      	str	r3, [r0, #0]
  htim14.Init.Prescaler = 11;
 8001998:	230b      	movs	r3, #11
 800199a:	6043      	str	r3, [r0, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800199c:	2300      	movs	r3, #0
  htim14.Init.Period = 999;
 800199e:	4a0a      	ldr	r2, [pc, #40]	; (80019c8 <MX_TIM14_Init+0x38>)
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019a0:	6083      	str	r3, [r0, #8]
  htim14.Init.Period = 999;
 80019a2:	60c2      	str	r2, [r0, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80019a4:	3ae8      	subs	r2, #232	; 0xe8
 80019a6:	3aff      	subs	r2, #255	; 0xff
 80019a8:	6102      	str	r2, [r0, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019aa:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80019ac:	f7ff fd18 	bl	80013e0 <HAL_TIM_Base_Init>
 80019b0:	2800      	cmp	r0, #0
 80019b2:	d003      	beq.n	80019bc <MX_TIM14_Init+0x2c>
  {
    _Error_Handler(__FILE__, __LINE__);
 80019b4:	213f      	movs	r1, #63	; 0x3f
 80019b6:	4805      	ldr	r0, [pc, #20]	; (80019cc <MX_TIM14_Init+0x3c>)
 80019b8:	f7ff ff1f 	bl	80017fa <_Error_Handler>
  }

}
 80019bc:	bd10      	pop	{r4, pc}
 80019be:	46c0      	nop			; (mov r8, r8)
 80019c0:	200001b8 	.word	0x200001b8
 80019c4:	40002000 	.word	0x40002000
 80019c8:	000003e7 	.word	0x000003e7
 80019cc:	08001bf2 	.word	0x08001bf2

080019d0 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{

  htim16.Instance = TIM16;
 80019d0:	480b      	ldr	r0, [pc, #44]	; (8001a00 <MX_TIM16_Init+0x30>)
 80019d2:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <MX_TIM16_Init+0x34>)
{
 80019d4:	b510      	push	{r4, lr}
  htim16.Instance = TIM16;
 80019d6:	6003      	str	r3, [r0, #0]
  htim16.Init.Prescaler = 11;
 80019d8:	230b      	movs	r3, #11
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim16.Init.Period = 9999;
 80019da:	4a0b      	ldr	r2, [pc, #44]	; (8001a08 <MX_TIM16_Init+0x38>)
  htim16.Init.Prescaler = 11;
 80019dc:	6043      	str	r3, [r0, #4]
  htim16.Init.Period = 9999;
 80019de:	60c2      	str	r2, [r0, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80019e0:	2280      	movs	r2, #128	; 0x80
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019e2:	2300      	movs	r3, #0
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80019e4:	0092      	lsls	r2, r2, #2
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019e6:	6083      	str	r3, [r0, #8]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80019e8:	6102      	str	r2, [r0, #16]
  htim16.Init.RepetitionCounter = 0;
 80019ea:	6143      	str	r3, [r0, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ec:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80019ee:	f7ff fcf7 	bl	80013e0 <HAL_TIM_Base_Init>
 80019f2:	2800      	cmp	r0, #0
 80019f4:	d003      	beq.n	80019fe <MX_TIM16_Init+0x2e>
  {
    _Error_Handler(__FILE__, __LINE__);
 80019f6:	2150      	movs	r1, #80	; 0x50
 80019f8:	4804      	ldr	r0, [pc, #16]	; (8001a0c <MX_TIM16_Init+0x3c>)
 80019fa:	f7ff fefe 	bl	80017fa <_Error_Handler>
  }

}
 80019fe:	bd10      	pop	{r4, pc}
 8001a00:	200001f8 	.word	0x200001f8
 8001a04:	40014400 	.word	0x40014400
 8001a08:	0000270f 	.word	0x0000270f
 8001a0c:	08001bf2 	.word	0x08001bf2

08001a10 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{

  htim17.Instance = TIM17;
 8001a10:	480b      	ldr	r0, [pc, #44]	; (8001a40 <MX_TIM17_Init+0x30>)
 8001a12:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <MX_TIM17_Init+0x34>)
{
 8001a14:	b510      	push	{r4, lr}
  htim17.Instance = TIM17;
 8001a16:	6003      	str	r3, [r0, #0]
  htim17.Init.Prescaler = 11;
 8001a18:	230b      	movs	r3, #11
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim17.Init.Period = 499;
 8001a1a:	22f4      	movs	r2, #244	; 0xf4
  htim17.Init.Prescaler = 11;
 8001a1c:	6043      	str	r3, [r0, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a1e:	2300      	movs	r3, #0
  htim17.Init.Period = 499;
 8001a20:	32ff      	adds	r2, #255	; 0xff
 8001a22:	60c2      	str	r2, [r0, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001a24:	320d      	adds	r2, #13
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a26:	6083      	str	r3, [r0, #8]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001a28:	6102      	str	r2, [r0, #16]
  htim17.Init.RepetitionCounter = 0;
 8001a2a:	6143      	str	r3, [r0, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a2c:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001a2e:	f7ff fcd7 	bl	80013e0 <HAL_TIM_Base_Init>
 8001a32:	2800      	cmp	r0, #0
 8001a34:	d003      	beq.n	8001a3e <MX_TIM17_Init+0x2e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001a36:	2161      	movs	r1, #97	; 0x61
 8001a38:	4803      	ldr	r0, [pc, #12]	; (8001a48 <MX_TIM17_Init+0x38>)
 8001a3a:	f7ff fede 	bl	80017fa <_Error_Handler>
  }

}
 8001a3e:	bd10      	pop	{r4, pc}
 8001a40:	20000178 	.word	0x20000178
 8001a44:	40014800 	.word	0x40014800
 8001a48:	08001bf2 	.word	0x08001bf2

08001a4c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  if(tim_baseHandle->Instance==TIM14)
 8001a4e:	6803      	ldr	r3, [r0, #0]
 8001a50:	4a1f      	ldr	r2, [pc, #124]	; (8001ad0 <HAL_TIM_Base_MspInit+0x84>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d113      	bne.n	8001a7e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001a56:	2080      	movs	r0, #128	; 0x80
 8001a58:	4a1e      	ldr	r2, [pc, #120]	; (8001ad4 <HAL_TIM_Base_MspInit+0x88>)
 8001a5a:	0040      	lsls	r0, r0, #1
 8001a5c:	69d1      	ldr	r1, [r2, #28]
 8001a5e:	4301      	orrs	r1, r0
 8001a60:	61d1      	str	r1, [r2, #28]
 8001a62:	69d3      	ldr	r3, [r2, #28]

    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8001a64:	2200      	movs	r2, #0
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001a66:	4003      	ands	r3, r0
 8001a68:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8001a6a:	38ed      	subs	r0, #237	; 0xed
 8001a6c:	0011      	movs	r1, r2
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001a6e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8001a70:	f7fe fef8 	bl	8000864 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8001a74:	2013      	movs	r0, #19
    /* TIM17 clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();

    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8001a76:	f7fe ff25 	bl	80008c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8001a7a:	b005      	add	sp, #20
 8001a7c:	bd00      	pop	{pc}
  else if(tim_baseHandle->Instance==TIM16)
 8001a7e:	4a16      	ldr	r2, [pc, #88]	; (8001ad8 <HAL_TIM_Base_MspInit+0x8c>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d110      	bne.n	8001aa6 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001a84:	2080      	movs	r0, #128	; 0x80
 8001a86:	4a13      	ldr	r2, [pc, #76]	; (8001ad4 <HAL_TIM_Base_MspInit+0x88>)
 8001a88:	0280      	lsls	r0, r0, #10
 8001a8a:	6991      	ldr	r1, [r2, #24]
 8001a8c:	4301      	orrs	r1, r0
 8001a8e:	6191      	str	r1, [r2, #24]
 8001a90:	6993      	ldr	r3, [r2, #24]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8001a92:	2200      	movs	r2, #0
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001a94:	4003      	ands	r3, r0
 8001a96:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8001a98:	2015      	movs	r0, #21
 8001a9a:	0011      	movs	r1, r2
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001a9c:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8001a9e:	f7fe fee1 	bl	8000864 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8001aa2:	2015      	movs	r0, #21
 8001aa4:	e7e7      	b.n	8001a76 <HAL_TIM_Base_MspInit+0x2a>
  else if(tim_baseHandle->Instance==TIM17)
 8001aa6:	4a0d      	ldr	r2, [pc, #52]	; (8001adc <HAL_TIM_Base_MspInit+0x90>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d1e6      	bne.n	8001a7a <HAL_TIM_Base_MspInit+0x2e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001aac:	2080      	movs	r0, #128	; 0x80
 8001aae:	4a09      	ldr	r2, [pc, #36]	; (8001ad4 <HAL_TIM_Base_MspInit+0x88>)
 8001ab0:	02c0      	lsls	r0, r0, #11
 8001ab2:	6991      	ldr	r1, [r2, #24]
 8001ab4:	4301      	orrs	r1, r0
 8001ab6:	6191      	str	r1, [r2, #24]
 8001ab8:	6993      	ldr	r3, [r2, #24]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8001aba:	2200      	movs	r2, #0
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001abc:	4003      	ands	r3, r0
 8001abe:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8001ac0:	2016      	movs	r0, #22
 8001ac2:	0011      	movs	r1, r2
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001ac4:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8001ac6:	f7fe fecd 	bl	8000864 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8001aca:	2016      	movs	r0, #22
 8001acc:	e7d3      	b.n	8001a76 <HAL_TIM_Base_MspInit+0x2a>
 8001ace:	46c0      	nop			; (mov r8, r8)
 8001ad0:	40002000 	.word	0x40002000
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	40014400 	.word	0x40014400
 8001adc:	40014800 	.word	0x40014800

08001ae0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ae0:	480d      	ldr	r0, [pc, #52]	; (8001b18 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ae2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ae4:	480d      	ldr	r0, [pc, #52]	; (8001b1c <LoopForever+0x6>)
  ldr r1, =_edata
 8001ae6:	490e      	ldr	r1, [pc, #56]	; (8001b20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ae8:	4a0e      	ldr	r2, [pc, #56]	; (8001b24 <LoopForever+0xe>)
  movs r3, #0
 8001aea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aec:	e002      	b.n	8001af4 <LoopCopyDataInit>

08001aee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001af0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001af2:	3304      	adds	r3, #4

08001af4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001af4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001af6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001af8:	d3f9      	bcc.n	8001aee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001afa:	4a0b      	ldr	r2, [pc, #44]	; (8001b28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001afc:	4c0b      	ldr	r4, [pc, #44]	; (8001b2c <LoopForever+0x16>)
  movs r3, #0
 8001afe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b00:	e001      	b.n	8001b06 <LoopFillZerobss>

08001b02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b04:	3204      	adds	r2, #4

08001b06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b08:	d3fb      	bcc.n	8001b02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001b0a:	f7ff ff11 	bl	8001930 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001b0e:	f000 f811 	bl	8001b34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b12:	f7ff fe60 	bl	80017d6 <main>

08001b16 <LoopForever>:

LoopForever:
    b LoopForever
 8001b16:	e7fe      	b.n	8001b16 <LoopForever>
  ldr   r0, =_estack
 8001b18:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001b1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b20:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001b24:	08001c08 	.word	0x08001c08
  ldr r2, =_sbss
 8001b28:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8001b2c:	20000238 	.word	0x20000238

08001b30 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b30:	e7fe      	b.n	8001b30 <ADC1_COMP_IRQHandler>
	...

08001b34 <__libc_init_array>:
 8001b34:	b570      	push	{r4, r5, r6, lr}
 8001b36:	2600      	movs	r6, #0
 8001b38:	4d0c      	ldr	r5, [pc, #48]	; (8001b6c <__libc_init_array+0x38>)
 8001b3a:	4c0d      	ldr	r4, [pc, #52]	; (8001b70 <__libc_init_array+0x3c>)
 8001b3c:	1b64      	subs	r4, r4, r5
 8001b3e:	10a4      	asrs	r4, r4, #2
 8001b40:	42a6      	cmp	r6, r4
 8001b42:	d109      	bne.n	8001b58 <__libc_init_array+0x24>
 8001b44:	2600      	movs	r6, #0
 8001b46:	f000 f823 	bl	8001b90 <_init>
 8001b4a:	4d0a      	ldr	r5, [pc, #40]	; (8001b74 <__libc_init_array+0x40>)
 8001b4c:	4c0a      	ldr	r4, [pc, #40]	; (8001b78 <__libc_init_array+0x44>)
 8001b4e:	1b64      	subs	r4, r4, r5
 8001b50:	10a4      	asrs	r4, r4, #2
 8001b52:	42a6      	cmp	r6, r4
 8001b54:	d105      	bne.n	8001b62 <__libc_init_array+0x2e>
 8001b56:	bd70      	pop	{r4, r5, r6, pc}
 8001b58:	00b3      	lsls	r3, r6, #2
 8001b5a:	58eb      	ldr	r3, [r5, r3]
 8001b5c:	4798      	blx	r3
 8001b5e:	3601      	adds	r6, #1
 8001b60:	e7ee      	b.n	8001b40 <__libc_init_array+0xc>
 8001b62:	00b3      	lsls	r3, r6, #2
 8001b64:	58eb      	ldr	r3, [r5, r3]
 8001b66:	4798      	blx	r3
 8001b68:	3601      	adds	r6, #1
 8001b6a:	e7f2      	b.n	8001b52 <__libc_init_array+0x1e>
 8001b6c:	08001c00 	.word	0x08001c00
 8001b70:	08001c00 	.word	0x08001c00
 8001b74:	08001c00 	.word	0x08001c00
 8001b78:	08001c04 	.word	0x08001c04

08001b7c <memcpy>:
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	b510      	push	{r4, lr}
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d100      	bne.n	8001b86 <memcpy+0xa>
 8001b84:	bd10      	pop	{r4, pc}
 8001b86:	5ccc      	ldrb	r4, [r1, r3]
 8001b88:	54c4      	strb	r4, [r0, r3]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	e7f8      	b.n	8001b80 <memcpy+0x4>
	...

08001b90 <_init>:
 8001b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b92:	46c0      	nop			; (mov r8, r8)
 8001b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b96:	bc08      	pop	{r3}
 8001b98:	469e      	mov	lr, r3
 8001b9a:	4770      	bx	lr

08001b9c <_fini>:
 8001b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b9e:	46c0      	nop			; (mov r8, r8)
 8001ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ba2:	bc08      	pop	{r3}
 8001ba4:	469e      	mov	lr, r3
 8001ba6:	4770      	bx	lr
