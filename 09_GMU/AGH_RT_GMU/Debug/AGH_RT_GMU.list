
C:\Atollic_workspace\AGH_RT_GMU\Debug\AGH_RT_GMU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d20  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000004  08001ddc  08001ddc  00011ddc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000030  08001de0  08001de0  00011de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000000d8  08001e10  08001e10  00011e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  08001ee8  08001ee8  00011ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  08001eec  08001eec  00011eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000064  20000000  08001ef0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          000000c0  20000064  08001f54  00020064  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000124  08001f54  00020124  2**0
                  ALLOC
 10 .ARM.attributes 00000028  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000376c  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00000c7c  00000000  00000000  000237f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000388  00000000  00000000  00024478  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000300  00000000  00000000  00024800  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00001824  00000000  00000000  00024b00  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000011ed  00000000  00000000  00026324  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007e  00000000  00000000  00027511  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00000acc  00000000  00000000  00027590  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      00000076  00000000  00000000  0002805c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000064 	.word	0x20000064
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08001dc4 	.word	0x08001dc4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000068 	.word	0x20000068
 8000100:	08001dc4 	.word	0x08001dc4

08000104 <selfrel_offset31>:
 8000104:	6803      	ldr	r3, [r0, #0]
 8000106:	005a      	lsls	r2, r3, #1
 8000108:	d403      	bmi.n	8000112 <selfrel_offset31+0xe>
 800010a:	005b      	lsls	r3, r3, #1
 800010c:	085b      	lsrs	r3, r3, #1
 800010e:	18c0      	adds	r0, r0, r3
 8000110:	4770      	bx	lr
 8000112:	2280      	movs	r2, #128	; 0x80
 8000114:	0612      	lsls	r2, r2, #24
 8000116:	4313      	orrs	r3, r2
 8000118:	e7f9      	b.n	800010e <selfrel_offset31+0xa>
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <search_EIT_table>:
 800011c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800011e:	4656      	mov	r6, sl
 8000120:	464d      	mov	r5, r9
 8000122:	465f      	mov	r7, fp
 8000124:	4644      	mov	r4, r8
 8000126:	b4f0      	push	{r4, r5, r6, r7}
 8000128:	4681      	mov	r9, r0
 800012a:	b083      	sub	sp, #12
 800012c:	4692      	mov	sl, r2
 800012e:	2900      	cmp	r1, #0
 8000130:	d025      	beq.n	800017e <search_EIT_table+0x62>
 8000132:	1e4b      	subs	r3, r1, #1
 8000134:	469b      	mov	fp, r3
 8000136:	2700      	movs	r7, #0
 8000138:	9301      	str	r3, [sp, #4]
 800013a:	465b      	mov	r3, fp
 800013c:	18fc      	adds	r4, r7, r3
 800013e:	0fe3      	lsrs	r3, r4, #31
 8000140:	191c      	adds	r4, r3, r4
 8000142:	464b      	mov	r3, r9
 8000144:	1064      	asrs	r4, r4, #1
 8000146:	00e5      	lsls	r5, r4, #3
 8000148:	195e      	adds	r6, r3, r5
 800014a:	0030      	movs	r0, r6
 800014c:	f7ff ffda 	bl	8000104 <selfrel_offset31>
 8000150:	9b01      	ldr	r3, [sp, #4]
 8000152:	4680      	mov	r8, r0
 8000154:	42a3      	cmp	r3, r4
 8000156:	d00b      	beq.n	8000170 <search_EIT_table+0x54>
 8000158:	0028      	movs	r0, r5
 800015a:	3008      	adds	r0, #8
 800015c:	4448      	add	r0, r9
 800015e:	f7ff ffd1 	bl	8000104 <selfrel_offset31>
 8000162:	45d0      	cmp	r8, sl
 8000164:	d806      	bhi.n	8000174 <search_EIT_table+0x58>
 8000166:	3801      	subs	r0, #1
 8000168:	4550      	cmp	r0, sl
 800016a:	d209      	bcs.n	8000180 <search_EIT_table+0x64>
 800016c:	1c67      	adds	r7, r4, #1
 800016e:	e7e4      	b.n	800013a <search_EIT_table+0x1e>
 8000170:	4550      	cmp	r0, sl
 8000172:	d905      	bls.n	8000180 <search_EIT_table+0x64>
 8000174:	42a7      	cmp	r7, r4
 8000176:	d002      	beq.n	800017e <search_EIT_table+0x62>
 8000178:	1e63      	subs	r3, r4, #1
 800017a:	469b      	mov	fp, r3
 800017c:	e7dd      	b.n	800013a <search_EIT_table+0x1e>
 800017e:	2600      	movs	r6, #0
 8000180:	0030      	movs	r0, r6
 8000182:	b003      	add	sp, #12
 8000184:	bc3c      	pop	{r2, r3, r4, r5}
 8000186:	4690      	mov	r8, r2
 8000188:	4699      	mov	r9, r3
 800018a:	46a2      	mov	sl, r4
 800018c:	46ab      	mov	fp, r5
 800018e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000190 <__gnu_unwind_get_pr_addr>:
 8000190:	2801      	cmp	r0, #1
 8000192:	d009      	beq.n	80001a8 <__gnu_unwind_get_pr_addr+0x18>
 8000194:	2802      	cmp	r0, #2
 8000196:	d005      	beq.n	80001a4 <__gnu_unwind_get_pr_addr+0x14>
 8000198:	2800      	cmp	r0, #0
 800019a:	d001      	beq.n	80001a0 <__gnu_unwind_get_pr_addr+0x10>
 800019c:	2000      	movs	r0, #0
 800019e:	4770      	bx	lr
 80001a0:	4802      	ldr	r0, [pc, #8]	; (80001ac <__gnu_unwind_get_pr_addr+0x1c>)
 80001a2:	e7fc      	b.n	800019e <__gnu_unwind_get_pr_addr+0xe>
 80001a4:	4802      	ldr	r0, [pc, #8]	; (80001b0 <__gnu_unwind_get_pr_addr+0x20>)
 80001a6:	e7fa      	b.n	800019e <__gnu_unwind_get_pr_addr+0xe>
 80001a8:	4802      	ldr	r0, [pc, #8]	; (80001b4 <__gnu_unwind_get_pr_addr+0x24>)
 80001aa:	e7f8      	b.n	800019e <__gnu_unwind_get_pr_addr+0xe>
 80001ac:	080008b9 	.word	0x080008b9
 80001b0:	080008d1 	.word	0x080008d1
 80001b4:	080008c5 	.word	0x080008c5

080001b8 <get_eit_entry>:
 80001b8:	b530      	push	{r4, r5, lr}
 80001ba:	4b23      	ldr	r3, [pc, #140]	; (8000248 <get_eit_entry+0x90>)
 80001bc:	b083      	sub	sp, #12
 80001be:	0005      	movs	r5, r0
 80001c0:	1e8c      	subs	r4, r1, #2
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d02a      	beq.n	800021c <get_eit_entry+0x64>
 80001c6:	a901      	add	r1, sp, #4
 80001c8:	0020      	movs	r0, r4
 80001ca:	e000      	b.n	80001ce <get_eit_entry+0x16>
 80001cc:	bf00      	nop
 80001ce:	2800      	cmp	r0, #0
 80001d0:	d020      	beq.n	8000214 <get_eit_entry+0x5c>
 80001d2:	9901      	ldr	r1, [sp, #4]
 80001d4:	0022      	movs	r2, r4
 80001d6:	f7ff ffa1 	bl	800011c <search_EIT_table>
 80001da:	1e04      	subs	r4, r0, #0
 80001dc:	d01a      	beq.n	8000214 <get_eit_entry+0x5c>
 80001de:	f7ff ff91 	bl	8000104 <selfrel_offset31>
 80001e2:	6863      	ldr	r3, [r4, #4]
 80001e4:	64a8      	str	r0, [r5, #72]	; 0x48
 80001e6:	2b01      	cmp	r3, #1
 80001e8:	d010      	beq.n	800020c <get_eit_entry+0x54>
 80001ea:	1d20      	adds	r0, r4, #4
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	db1b      	blt.n	8000228 <get_eit_entry+0x70>
 80001f0:	f7ff ff88 	bl	8000104 <selfrel_offset31>
 80001f4:	2300      	movs	r3, #0
 80001f6:	64e8      	str	r0, [r5, #76]	; 0x4c
 80001f8:	652b      	str	r3, [r5, #80]	; 0x50
 80001fa:	6803      	ldr	r3, [r0, #0]
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	db17      	blt.n	8000230 <get_eit_entry+0x78>
 8000200:	f7ff ff80 	bl	8000104 <selfrel_offset31>
 8000204:	6128      	str	r0, [r5, #16]
 8000206:	2000      	movs	r0, #0
 8000208:	b003      	add	sp, #12
 800020a:	bd30      	pop	{r4, r5, pc}
 800020c:	2300      	movs	r3, #0
 800020e:	2005      	movs	r0, #5
 8000210:	612b      	str	r3, [r5, #16]
 8000212:	e7f9      	b.n	8000208 <get_eit_entry+0x50>
 8000214:	2300      	movs	r3, #0
 8000216:	2009      	movs	r0, #9
 8000218:	612b      	str	r3, [r5, #16]
 800021a:	e7f5      	b.n	8000208 <get_eit_entry+0x50>
 800021c:	480b      	ldr	r0, [pc, #44]	; (800024c <get_eit_entry+0x94>)
 800021e:	490c      	ldr	r1, [pc, #48]	; (8000250 <get_eit_entry+0x98>)
 8000220:	1a09      	subs	r1, r1, r0
 8000222:	10c9      	asrs	r1, r1, #3
 8000224:	9101      	str	r1, [sp, #4]
 8000226:	e7d5      	b.n	80001d4 <get_eit_entry+0x1c>
 8000228:	2301      	movs	r3, #1
 800022a:	64e8      	str	r0, [r5, #76]	; 0x4c
 800022c:	652b      	str	r3, [r5, #80]	; 0x50
 800022e:	e7e4      	b.n	80001fa <get_eit_entry+0x42>
 8000230:	0118      	lsls	r0, r3, #4
 8000232:	0f00      	lsrs	r0, r0, #28
 8000234:	f7ff ffac 	bl	8000190 <__gnu_unwind_get_pr_addr>
 8000238:	6128      	str	r0, [r5, #16]
 800023a:	2800      	cmp	r0, #0
 800023c:	d101      	bne.n	8000242 <get_eit_entry+0x8a>
 800023e:	3009      	adds	r0, #9
 8000240:	e7e2      	b.n	8000208 <get_eit_entry+0x50>
 8000242:	2000      	movs	r0, #0
 8000244:	e7e0      	b.n	8000208 <get_eit_entry+0x50>
 8000246:	46c0      	nop			; (mov r8, r8)
 8000248:	00000000 	.word	0x00000000
 800024c:	08001e10 	.word	0x08001e10
 8000250:	08001ee8 	.word	0x08001ee8

08000254 <restore_non_core_regs>:
 8000254:	6803      	ldr	r3, [r0, #0]
 8000256:	b510      	push	{r4, lr}
 8000258:	0004      	movs	r4, r0
 800025a:	07da      	lsls	r2, r3, #31
 800025c:	d405      	bmi.n	800026a <restore_non_core_regs+0x16>
 800025e:	079b      	lsls	r3, r3, #30
 8000260:	d50f      	bpl.n	8000282 <restore_non_core_regs+0x2e>
 8000262:	3048      	adds	r0, #72	; 0x48
 8000264:	f000 fc86 	bl	8000b74 <__gnu_Unwind_Restore_VFP_D>
 8000268:	6823      	ldr	r3, [r4, #0]
 800026a:	075a      	lsls	r2, r3, #29
 800026c:	d50f      	bpl.n	800028e <restore_non_core_regs+0x3a>
 800026e:	071a      	lsls	r2, r3, #28
 8000270:	d514      	bpl.n	800029c <restore_non_core_regs+0x48>
 8000272:	06db      	lsls	r3, r3, #27
 8000274:	d404      	bmi.n	8000280 <restore_non_core_regs+0x2c>
 8000276:	0020      	movs	r0, r4
 8000278:	30d1      	adds	r0, #209	; 0xd1
 800027a:	30ff      	adds	r0, #255	; 0xff
 800027c:	f000 fc86 	bl	8000b8c <__gnu_Unwind_Restore_WMMXC>
 8000280:	bd10      	pop	{r4, pc}
 8000282:	3048      	adds	r0, #72	; 0x48
 8000284:	f000 fc72 	bl	8000b6c <__gnu_Unwind_Restore_VFP>
 8000288:	6823      	ldr	r3, [r4, #0]
 800028a:	075a      	lsls	r2, r3, #29
 800028c:	d4ef      	bmi.n	800026e <restore_non_core_regs+0x1a>
 800028e:	0020      	movs	r0, r4
 8000290:	30d0      	adds	r0, #208	; 0xd0
 8000292:	f000 fc73 	bl	8000b7c <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000296:	6823      	ldr	r3, [r4, #0]
 8000298:	071a      	lsls	r2, r3, #28
 800029a:	d4ea      	bmi.n	8000272 <restore_non_core_regs+0x1e>
 800029c:	0020      	movs	r0, r4
 800029e:	3051      	adds	r0, #81	; 0x51
 80002a0:	30ff      	adds	r0, #255	; 0xff
 80002a2:	f000 fc6f 	bl	8000b84 <__gnu_Unwind_Restore_WMMXD>
 80002a6:	6823      	ldr	r3, [r4, #0]
 80002a8:	e7e3      	b.n	8000272 <restore_non_core_regs+0x1e>
 80002aa:	46c0      	nop			; (mov r8, r8)

080002ac <_Unwind_decode_typeinfo_ptr.isra.0>:
 80002ac:	6802      	ldr	r2, [r0, #0]
 80002ae:	2300      	movs	r3, #0
 80002b0:	2a00      	cmp	r2, #0
 80002b2:	d000      	beq.n	80002b6 <_Unwind_decode_typeinfo_ptr.isra.0+0xa>
 80002b4:	1883      	adds	r3, r0, r2
 80002b6:	0018      	movs	r0, r3
 80002b8:	4770      	bx	lr
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__gnu_unwind_24bit.isra.1>:
 80002bc:	2009      	movs	r0, #9
 80002be:	4770      	bx	lr

080002c0 <_Unwind_DebugHook>:
 80002c0:	4770      	bx	lr
 80002c2:	46c0      	nop			; (mov r8, r8)

080002c4 <unwind_phase2>:
 80002c4:	b570      	push	{r4, r5, r6, lr}
 80002c6:	0004      	movs	r4, r0
 80002c8:	000d      	movs	r5, r1
 80002ca:	e008      	b.n	80002de <unwind_phase2+0x1a>
 80002cc:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80002ce:	002a      	movs	r2, r5
 80002d0:	6163      	str	r3, [r4, #20]
 80002d2:	0021      	movs	r1, r4
 80002d4:	2001      	movs	r0, #1
 80002d6:	6923      	ldr	r3, [r4, #16]
 80002d8:	4798      	blx	r3
 80002da:	2808      	cmp	r0, #8
 80002dc:	d107      	bne.n	80002ee <unwind_phase2+0x2a>
 80002de:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80002e0:	0020      	movs	r0, r4
 80002e2:	f7ff ff69 	bl	80001b8 <get_eit_entry>
 80002e6:	2800      	cmp	r0, #0
 80002e8:	d0f0      	beq.n	80002cc <unwind_phase2+0x8>
 80002ea:	f001 fd08 	bl	8001cfe <abort>
 80002ee:	2807      	cmp	r0, #7
 80002f0:	d1fb      	bne.n	80002ea <unwind_phase2+0x26>
 80002f2:	2000      	movs	r0, #0
 80002f4:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80002f6:	f7ff ffe3 	bl	80002c0 <_Unwind_DebugHook>
 80002fa:	1d28      	adds	r0, r5, #4
 80002fc:	f000 fc20 	bl	8000b40 <__restore_core_regs>

08000300 <unwind_phase2_forced>:
 8000300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000302:	464f      	mov	r7, r9
 8000304:	4646      	mov	r6, r8
 8000306:	b4c0      	push	{r6, r7}
 8000308:	68c3      	ldr	r3, [r0, #12]
 800030a:	4c33      	ldr	r4, [pc, #204]	; (80003d8 <unwind_phase2_forced+0xd8>)
 800030c:	4699      	mov	r9, r3
 800030e:	44a5      	add	sp, r4
 8000310:	6983      	ldr	r3, [r0, #24]
 8000312:	0017      	movs	r7, r2
 8000314:	0005      	movs	r5, r0
 8000316:	3104      	adds	r1, #4
 8000318:	2240      	movs	r2, #64	; 0x40
 800031a:	a805      	add	r0, sp, #20
 800031c:	4698      	mov	r8, r3
 800031e:	f001 fcdd 	bl	8001cdc <memcpy>
 8000322:	2300      	movs	r3, #0
 8000324:	ac04      	add	r4, sp, #16
 8000326:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000328:	0028      	movs	r0, r5
 800032a:	9304      	str	r3, [sp, #16]
 800032c:	f7ff ff44 	bl	80001b8 <get_eit_entry>
 8000330:	0039      	movs	r1, r7
 8000332:	1e4b      	subs	r3, r1, #1
 8000334:	4199      	sbcs	r1, r3
 8000336:	3109      	adds	r1, #9
 8000338:	0006      	movs	r6, r0
 800033a:	000f      	movs	r7, r1
 800033c:	2e00      	cmp	r6, #0
 800033e:	d015      	beq.n	800036c <unwind_phase2_forced+0x6c>
 8000340:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000342:	2110      	movs	r1, #16
 8000344:	6463      	str	r3, [r4, #68]	; 0x44
 8000346:	4643      	mov	r3, r8
 8000348:	4339      	orrs	r1, r7
 800034a:	9301      	str	r3, [sp, #4]
 800034c:	b2c9      	uxtb	r1, r1
 800034e:	9400      	str	r4, [sp, #0]
 8000350:	002b      	movs	r3, r5
 8000352:	002a      	movs	r2, r5
 8000354:	2001      	movs	r0, #1
 8000356:	47c8      	blx	r9
 8000358:	2800      	cmp	r0, #0
 800035a:	d133      	bne.n	80003c4 <unwind_phase2_forced+0xc4>
 800035c:	0030      	movs	r0, r6
 800035e:	23f5      	movs	r3, #245	; 0xf5
 8000360:	009b      	lsls	r3, r3, #2
 8000362:	449d      	add	sp, r3
 8000364:	bc0c      	pop	{r2, r3}
 8000366:	4690      	mov	r8, r2
 8000368:	4699      	mov	r9, r3
 800036a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800036c:	22f0      	movs	r2, #240	; 0xf0
 800036e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000370:	0052      	lsls	r2, r2, #1
 8000372:	616b      	str	r3, [r5, #20]
 8000374:	0021      	movs	r1, r4
 8000376:	a87c      	add	r0, sp, #496	; 0x1f0
 8000378:	f001 fcb0 	bl	8001cdc <memcpy>
 800037c:	aa7c      	add	r2, sp, #496	; 0x1f0
 800037e:	0029      	movs	r1, r5
 8000380:	692b      	ldr	r3, [r5, #16]
 8000382:	0038      	movs	r0, r7
 8000384:	4798      	blx	r3
 8000386:	9b8a      	ldr	r3, [sp, #552]	; 0x228
 8000388:	0006      	movs	r6, r0
 800038a:	6463      	str	r3, [r4, #68]	; 0x44
 800038c:	9303      	str	r3, [sp, #12]
 800038e:	4643      	mov	r3, r8
 8000390:	9400      	str	r4, [sp, #0]
 8000392:	9301      	str	r3, [sp, #4]
 8000394:	002a      	movs	r2, r5
 8000396:	002b      	movs	r3, r5
 8000398:	0039      	movs	r1, r7
 800039a:	2001      	movs	r0, #1
 800039c:	47c8      	blx	r9
 800039e:	2800      	cmp	r0, #0
 80003a0:	d110      	bne.n	80003c4 <unwind_phase2_forced+0xc4>
 80003a2:	22f0      	movs	r2, #240	; 0xf0
 80003a4:	a97c      	add	r1, sp, #496	; 0x1f0
 80003a6:	0052      	lsls	r2, r2, #1
 80003a8:	0020      	movs	r0, r4
 80003aa:	f001 fc97 	bl	8001cdc <memcpy>
 80003ae:	2e08      	cmp	r6, #8
 80003b0:	d106      	bne.n	80003c0 <unwind_phase2_forced+0xc0>
 80003b2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80003b4:	0028      	movs	r0, r5
 80003b6:	f7ff feff 	bl	80001b8 <get_eit_entry>
 80003ba:	2709      	movs	r7, #9
 80003bc:	0006      	movs	r6, r0
 80003be:	e7bd      	b.n	800033c <unwind_phase2_forced+0x3c>
 80003c0:	2e07      	cmp	r6, #7
 80003c2:	d001      	beq.n	80003c8 <unwind_phase2_forced+0xc8>
 80003c4:	2009      	movs	r0, #9
 80003c6:	e7ca      	b.n	800035e <unwind_phase2_forced+0x5e>
 80003c8:	2000      	movs	r0, #0
 80003ca:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80003cc:	f7ff ff78 	bl	80002c0 <_Unwind_DebugHook>
 80003d0:	a805      	add	r0, sp, #20
 80003d2:	f000 fbb5 	bl	8000b40 <__restore_core_regs>
 80003d6:	46c0      	nop			; (mov r8, r8)
 80003d8:	fffffc2c 	.word	0xfffffc2c

080003dc <_Unwind_GetCFA>:
 80003dc:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80003de:	4770      	bx	lr

080003e0 <__gnu_Unwind_RaiseException>:
 80003e0:	b570      	push	{r4, r5, r6, lr}
 80003e2:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80003e4:	b0fa      	sub	sp, #488	; 0x1e8
 80003e6:	640b      	str	r3, [r1, #64]	; 0x40
 80003e8:	0004      	movs	r4, r0
 80003ea:	000e      	movs	r6, r1
 80003ec:	2240      	movs	r2, #64	; 0x40
 80003ee:	3104      	adds	r1, #4
 80003f0:	a803      	add	r0, sp, #12
 80003f2:	f001 fc73 	bl	8001cdc <memcpy>
 80003f6:	2301      	movs	r3, #1
 80003f8:	425b      	negs	r3, r3
 80003fa:	9302      	str	r3, [sp, #8]
 80003fc:	e006      	b.n	800040c <__gnu_Unwind_RaiseException+0x2c>
 80003fe:	aa02      	add	r2, sp, #8
 8000400:	0021      	movs	r1, r4
 8000402:	6923      	ldr	r3, [r4, #16]
 8000404:	4798      	blx	r3
 8000406:	1e05      	subs	r5, r0, #0
 8000408:	2d08      	cmp	r5, #8
 800040a:	d10a      	bne.n	8000422 <__gnu_Unwind_RaiseException+0x42>
 800040c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800040e:	0020      	movs	r0, r4
 8000410:	0019      	movs	r1, r3
 8000412:	9301      	str	r3, [sp, #4]
 8000414:	f7ff fed0 	bl	80001b8 <get_eit_entry>
 8000418:	2800      	cmp	r0, #0
 800041a:	d0f0      	beq.n	80003fe <__gnu_Unwind_RaiseException+0x1e>
 800041c:	2009      	movs	r0, #9
 800041e:	b07a      	add	sp, #488	; 0x1e8
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	a802      	add	r0, sp, #8
 8000424:	f7ff ff16 	bl	8000254 <restore_non_core_regs>
 8000428:	2d06      	cmp	r5, #6
 800042a:	d1f7      	bne.n	800041c <__gnu_Unwind_RaiseException+0x3c>
 800042c:	0031      	movs	r1, r6
 800042e:	0020      	movs	r0, r4
 8000430:	f7ff ff48 	bl	80002c4 <unwind_phase2>

08000434 <__gnu_Unwind_ForcedUnwind>:
 8000434:	b510      	push	{r4, lr}
 8000436:	6182      	str	r2, [r0, #24]
 8000438:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800043a:	60c1      	str	r1, [r0, #12]
 800043c:	641a      	str	r2, [r3, #64]	; 0x40
 800043e:	0019      	movs	r1, r3
 8000440:	2200      	movs	r2, #0
 8000442:	f7ff ff5d 	bl	8000300 <unwind_phase2_forced>
 8000446:	bd10      	pop	{r4, pc}

08000448 <__gnu_Unwind_Resume>:
 8000448:	6943      	ldr	r3, [r0, #20]
 800044a:	b570      	push	{r4, r5, r6, lr}
 800044c:	640b      	str	r3, [r1, #64]	; 0x40
 800044e:	68c3      	ldr	r3, [r0, #12]
 8000450:	0004      	movs	r4, r0
 8000452:	000d      	movs	r5, r1
 8000454:	2b00      	cmp	r3, #0
 8000456:	d004      	beq.n	8000462 <__gnu_Unwind_Resume+0x1a>
 8000458:	2201      	movs	r2, #1
 800045a:	f7ff ff51 	bl	8000300 <unwind_phase2_forced>
 800045e:	f001 fc4e 	bl	8001cfe <abort>
 8000462:	000a      	movs	r2, r1
 8000464:	6923      	ldr	r3, [r4, #16]
 8000466:	0001      	movs	r1, r0
 8000468:	2002      	movs	r0, #2
 800046a:	4798      	blx	r3
 800046c:	2807      	cmp	r0, #7
 800046e:	d007      	beq.n	8000480 <__gnu_Unwind_Resume+0x38>
 8000470:	2808      	cmp	r0, #8
 8000472:	d103      	bne.n	800047c <__gnu_Unwind_Resume+0x34>
 8000474:	0029      	movs	r1, r5
 8000476:	0020      	movs	r0, r4
 8000478:	f7ff ff24 	bl	80002c4 <unwind_phase2>
 800047c:	f001 fc3f 	bl	8001cfe <abort>
 8000480:	2000      	movs	r0, #0
 8000482:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000484:	f7ff ff1c 	bl	80002c0 <_Unwind_DebugHook>
 8000488:	1d28      	adds	r0, r5, #4
 800048a:	f000 fb59 	bl	8000b40 <__restore_core_regs>
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__gnu_Unwind_Resume_or_Rethrow>:
 8000490:	68c3      	ldr	r3, [r0, #12]
 8000492:	b510      	push	{r4, lr}
 8000494:	2b00      	cmp	r3, #0
 8000496:	d005      	beq.n	80004a4 <__gnu_Unwind_Resume_or_Rethrow+0x14>
 8000498:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800049a:	2200      	movs	r2, #0
 800049c:	640b      	str	r3, [r1, #64]	; 0x40
 800049e:	f7ff ff2f 	bl	8000300 <unwind_phase2_forced>
 80004a2:	bd10      	pop	{r4, pc}
 80004a4:	f7ff ff9c 	bl	80003e0 <__gnu_Unwind_RaiseException>
 80004a8:	e7fb      	b.n	80004a2 <__gnu_Unwind_Resume_or_Rethrow+0x12>
 80004aa:	46c0      	nop			; (mov r8, r8)

080004ac <_Unwind_Complete>:
 80004ac:	4770      	bx	lr
 80004ae:	46c0      	nop			; (mov r8, r8)

080004b0 <_Unwind_DeleteException>:
 80004b0:	6883      	ldr	r3, [r0, #8]
 80004b2:	b510      	push	{r4, lr}
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d002      	beq.n	80004be <_Unwind_DeleteException+0xe>
 80004b8:	0001      	movs	r1, r0
 80004ba:	2001      	movs	r0, #1
 80004bc:	4798      	blx	r3
 80004be:	bd10      	pop	{r4, pc}

080004c0 <_Unwind_VRS_Get>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	2901      	cmp	r1, #1
 80004c4:	d007      	beq.n	80004d6 <_Unwind_VRS_Get+0x16>
 80004c6:	2900      	cmp	r1, #0
 80004c8:	d007      	beq.n	80004da <_Unwind_VRS_Get+0x1a>
 80004ca:	3903      	subs	r1, #3
 80004cc:	2402      	movs	r4, #2
 80004ce:	2901      	cmp	r1, #1
 80004d0:	d901      	bls.n	80004d6 <_Unwind_VRS_Get+0x16>
 80004d2:	0020      	movs	r0, r4
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	2401      	movs	r4, #1
 80004d8:	e7fb      	b.n	80004d2 <_Unwind_VRS_Get+0x12>
 80004da:	2402      	movs	r4, #2
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d1f8      	bne.n	80004d2 <_Unwind_VRS_Get+0x12>
 80004e0:	2a0f      	cmp	r2, #15
 80004e2:	d8f6      	bhi.n	80004d2 <_Unwind_VRS_Get+0x12>
 80004e4:	0092      	lsls	r2, r2, #2
 80004e6:	1880      	adds	r0, r0, r2
 80004e8:	6842      	ldr	r2, [r0, #4]
 80004ea:	9b02      	ldr	r3, [sp, #8]
 80004ec:	2400      	movs	r4, #0
 80004ee:	601a      	str	r2, [r3, #0]
 80004f0:	e7ef      	b.n	80004d2 <_Unwind_VRS_Get+0x12>
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <_Unwind_GetGR>:
 80004f4:	b500      	push	{lr}
 80004f6:	b085      	sub	sp, #20
 80004f8:	ab03      	add	r3, sp, #12
 80004fa:	000a      	movs	r2, r1
 80004fc:	9300      	str	r3, [sp, #0]
 80004fe:	2100      	movs	r1, #0
 8000500:	2300      	movs	r3, #0
 8000502:	f7ff ffdd 	bl	80004c0 <_Unwind_VRS_Get>
 8000506:	9803      	ldr	r0, [sp, #12]
 8000508:	b005      	add	sp, #20
 800050a:	bd00      	pop	{pc}

0800050c <_Unwind_VRS_Set>:
 800050c:	b510      	push	{r4, lr}
 800050e:	2901      	cmp	r1, #1
 8000510:	d007      	beq.n	8000522 <_Unwind_VRS_Set+0x16>
 8000512:	2900      	cmp	r1, #0
 8000514:	d007      	beq.n	8000526 <_Unwind_VRS_Set+0x1a>
 8000516:	3903      	subs	r1, #3
 8000518:	2402      	movs	r4, #2
 800051a:	2901      	cmp	r1, #1
 800051c:	d901      	bls.n	8000522 <_Unwind_VRS_Set+0x16>
 800051e:	0020      	movs	r0, r4
 8000520:	bd10      	pop	{r4, pc}
 8000522:	2401      	movs	r4, #1
 8000524:	e7fb      	b.n	800051e <_Unwind_VRS_Set+0x12>
 8000526:	2402      	movs	r4, #2
 8000528:	2b00      	cmp	r3, #0
 800052a:	d1f8      	bne.n	800051e <_Unwind_VRS_Set+0x12>
 800052c:	2a0f      	cmp	r2, #15
 800052e:	d8f6      	bhi.n	800051e <_Unwind_VRS_Set+0x12>
 8000530:	9b02      	ldr	r3, [sp, #8]
 8000532:	0092      	lsls	r2, r2, #2
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	1880      	adds	r0, r0, r2
 8000538:	6043      	str	r3, [r0, #4]
 800053a:	2400      	movs	r4, #0
 800053c:	e7ef      	b.n	800051e <_Unwind_VRS_Set+0x12>
 800053e:	46c0      	nop			; (mov r8, r8)

08000540 <_Unwind_SetGR>:
 8000540:	b500      	push	{lr}
 8000542:	b085      	sub	sp, #20
 8000544:	ab03      	add	r3, sp, #12
 8000546:	9203      	str	r2, [sp, #12]
 8000548:	9300      	str	r3, [sp, #0]
 800054a:	000a      	movs	r2, r1
 800054c:	2300      	movs	r3, #0
 800054e:	2100      	movs	r1, #0
 8000550:	f7ff ffdc 	bl	800050c <_Unwind_VRS_Set>
 8000554:	b005      	add	sp, #20
 8000556:	bd00      	pop	{pc}

08000558 <__gnu_Unwind_Backtrace>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	4c1a      	ldr	r4, [pc, #104]	; (80005c4 <__gnu_Unwind_Backtrace+0x6c>)
 800055c:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800055e:	44a5      	add	sp, r4
 8000560:	6413      	str	r3, [r2, #64]	; 0x40
 8000562:	0006      	movs	r6, r0
 8000564:	000d      	movs	r5, r1
 8000566:	a819      	add	r0, sp, #100	; 0x64
 8000568:	1d11      	adds	r1, r2, #4
 800056a:	2240      	movs	r2, #64	; 0x40
 800056c:	f001 fbb6 	bl	8001cdc <memcpy>
 8000570:	2301      	movs	r3, #1
 8000572:	425b      	negs	r3, r3
 8000574:	9318      	str	r3, [sp, #96]	; 0x60
 8000576:	e014      	b.n	80005a2 <__gnu_Unwind_Backtrace+0x4a>
 8000578:	210c      	movs	r1, #12
 800057a:	a818      	add	r0, sp, #96	; 0x60
 800057c:	aa02      	add	r2, sp, #8
 800057e:	f7ff ffdf 	bl	8000540 <_Unwind_SetGR>
 8000582:	0029      	movs	r1, r5
 8000584:	a818      	add	r0, sp, #96	; 0x60
 8000586:	47b0      	blx	r6
 8000588:	2800      	cmp	r0, #0
 800058a:	d112      	bne.n	80005b2 <__gnu_Unwind_Backtrace+0x5a>
 800058c:	9b06      	ldr	r3, [sp, #24]
 800058e:	aa18      	add	r2, sp, #96	; 0x60
 8000590:	a902      	add	r1, sp, #8
 8000592:	3008      	adds	r0, #8
 8000594:	9301      	str	r3, [sp, #4]
 8000596:	4798      	blx	r3
 8000598:	1e04      	subs	r4, r0, #0
 800059a:	2c05      	cmp	r4, #5
 800059c:	d00a      	beq.n	80005b4 <__gnu_Unwind_Backtrace+0x5c>
 800059e:	2809      	cmp	r0, #9
 80005a0:	d007      	beq.n	80005b2 <__gnu_Unwind_Backtrace+0x5a>
 80005a2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80005a4:	a802      	add	r0, sp, #8
 80005a6:	0019      	movs	r1, r3
 80005a8:	9301      	str	r3, [sp, #4]
 80005aa:	f7ff fe05 	bl	80001b8 <get_eit_entry>
 80005ae:	2800      	cmp	r0, #0
 80005b0:	d0e2      	beq.n	8000578 <__gnu_Unwind_Backtrace+0x20>
 80005b2:	2409      	movs	r4, #9
 80005b4:	a818      	add	r0, sp, #96	; 0x60
 80005b6:	f7ff fe4d 	bl	8000254 <restore_non_core_regs>
 80005ba:	0020      	movs	r0, r4
 80005bc:	2390      	movs	r3, #144	; 0x90
 80005be:	009b      	lsls	r3, r3, #2
 80005c0:	449d      	add	sp, r3
 80005c2:	bd70      	pop	{r4, r5, r6, pc}
 80005c4:	fffffdc0 	.word	0xfffffdc0

080005c8 <__gnu_unwind_pr_common>:
 80005c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ca:	465f      	mov	r7, fp
 80005cc:	4656      	mov	r6, sl
 80005ce:	464d      	mov	r5, r9
 80005d0:	4644      	mov	r4, r8
 80005d2:	4693      	mov	fp, r2
 80005d4:	2203      	movs	r2, #3
 80005d6:	b4f0      	push	{r4, r5, r6, r7}
 80005d8:	001e      	movs	r6, r3
 80005da:	0013      	movs	r3, r2
 80005dc:	b08b      	sub	sp, #44	; 0x2c
 80005de:	4003      	ands	r3, r0
 80005e0:	9301      	str	r3, [sp, #4]
 80005e2:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 80005e4:	000d      	movs	r5, r1
 80005e6:	1d1c      	adds	r4, r3, #4
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	9408      	str	r4, [sp, #32]
 80005ec:	9307      	str	r3, [sp, #28]
 80005ee:	2e00      	cmp	r6, #0
 80005f0:	d166      	bne.n	80006c0 <__gnu_unwind_pr_common+0xf8>
 80005f2:	021b      	lsls	r3, r3, #8
 80005f4:	9307      	str	r3, [sp, #28]
 80005f6:	ab06      	add	r3, sp, #24
 80005f8:	735e      	strb	r6, [r3, #13]
 80005fa:	731a      	strb	r2, [r3, #12]
 80005fc:	9b01      	ldr	r3, [sp, #4]
 80005fe:	2b02      	cmp	r3, #2
 8000600:	d100      	bne.n	8000604 <__gnu_unwind_pr_common+0x3c>
 8000602:	e06e      	b.n	80006e2 <__gnu_unwind_pr_common+0x11a>
 8000604:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000606:	07db      	lsls	r3, r3, #31
 8000608:	d447      	bmi.n	800069a <__gnu_unwind_pr_common+0xd2>
 800060a:	2300      	movs	r3, #0
 800060c:	46a8      	mov	r8, r5
 800060e:	46b2      	mov	sl, r6
 8000610:	9302      	str	r3, [sp, #8]
 8000612:	3308      	adds	r3, #8
 8000614:	4003      	ands	r3, r0
 8000616:	9303      	str	r3, [sp, #12]
 8000618:	6826      	ldr	r6, [r4, #0]
 800061a:	2e00      	cmp	r6, #0
 800061c:	d100      	bne.n	8000620 <__gnu_unwind_pr_common+0x58>
 800061e:	e126      	b.n	800086e <__gnu_unwind_pr_common+0x2a6>
 8000620:	4653      	mov	r3, sl
 8000622:	2b02      	cmp	r3, #2
 8000624:	d049      	beq.n	80006ba <__gnu_unwind_pr_common+0xf2>
 8000626:	8826      	ldrh	r6, [r4, #0]
 8000628:	8865      	ldrh	r5, [r4, #2]
 800062a:	3404      	adds	r4, #4
 800062c:	2301      	movs	r3, #1
 800062e:	002f      	movs	r7, r5
 8000630:	4699      	mov	r9, r3
 8000632:	439f      	bics	r7, r3
 8000634:	4643      	mov	r3, r8
 8000636:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000638:	210f      	movs	r1, #15
 800063a:	469c      	mov	ip, r3
 800063c:	4658      	mov	r0, fp
 800063e:	4467      	add	r7, ip
 8000640:	f7ff ff58 	bl	80004f4 <_Unwind_GetGR>
 8000644:	2100      	movs	r1, #0
 8000646:	4287      	cmp	r7, r0
 8000648:	d806      	bhi.n	8000658 <__gnu_unwind_pr_common+0x90>
 800064a:	0031      	movs	r1, r6
 800064c:	464b      	mov	r3, r9
 800064e:	4399      	bics	r1, r3
 8000650:	19cf      	adds	r7, r1, r7
 8000652:	42b8      	cmp	r0, r7
 8000654:	4180      	sbcs	r0, r0
 8000656:	4241      	negs	r1, r0
 8000658:	2302      	movs	r3, #2
 800065a:	2201      	movs	r2, #1
 800065c:	006d      	lsls	r5, r5, #1
 800065e:	402b      	ands	r3, r5
 8000660:	4032      	ands	r2, r6
 8000662:	4313      	orrs	r3, r2
 8000664:	2b01      	cmp	r3, #1
 8000666:	d03e      	beq.n	80006e6 <__gnu_unwind_pr_common+0x11e>
 8000668:	2b00      	cmp	r3, #0
 800066a:	d05a      	beq.n	8000722 <__gnu_unwind_pr_common+0x15a>
 800066c:	2b02      	cmp	r3, #2
 800066e:	d11c      	bne.n	80006aa <__gnu_unwind_pr_common+0xe2>
 8000670:	6823      	ldr	r3, [r4, #0]
 8000672:	9a01      	ldr	r2, [sp, #4]
 8000674:	005f      	lsls	r7, r3, #1
 8000676:	087f      	lsrs	r7, r7, #1
 8000678:	2a00      	cmp	r2, #0
 800067a:	d165      	bne.n	8000748 <__gnu_unwind_pr_common+0x180>
 800067c:	2900      	cmp	r1, #0
 800067e:	d006      	beq.n	800068e <__gnu_unwind_pr_common+0xc6>
 8000680:	9a03      	ldr	r2, [sp, #12]
 8000682:	2a00      	cmp	r2, #0
 8000684:	d100      	bne.n	8000688 <__gnu_unwind_pr_common+0xc0>
 8000686:	e088      	b.n	800079a <__gnu_unwind_pr_common+0x1d2>
 8000688:	2f00      	cmp	r7, #0
 800068a:	d100      	bne.n	800068e <__gnu_unwind_pr_common+0xc6>
 800068c:	e0aa      	b.n	80007e4 <__gnu_unwind_pr_common+0x21c>
 800068e:	2b00      	cmp	r3, #0
 8000690:	db65      	blt.n	800075e <__gnu_unwind_pr_common+0x196>
 8000692:	3701      	adds	r7, #1
 8000694:	00bf      	lsls	r7, r7, #2
 8000696:	19e4      	adds	r4, r4, r7
 8000698:	e7be      	b.n	8000618 <__gnu_unwind_pr_common+0x50>
 800069a:	2300      	movs	r3, #0
 800069c:	9302      	str	r3, [sp, #8]
 800069e:	2e02      	cmp	r6, #2
 80006a0:	dd47      	ble.n	8000732 <__gnu_unwind_pr_common+0x16a>
 80006a2:	f7ff fe0b 	bl	80002bc <__gnu_unwind_24bit.isra.1>
 80006a6:	2800      	cmp	r0, #0
 80006a8:	d049      	beq.n	800073e <__gnu_unwind_pr_common+0x176>
 80006aa:	2009      	movs	r0, #9
 80006ac:	b00b      	add	sp, #44	; 0x2c
 80006ae:	bc3c      	pop	{r2, r3, r4, r5}
 80006b0:	4690      	mov	r8, r2
 80006b2:	4699      	mov	r9, r3
 80006b4:	46a2      	mov	sl, r4
 80006b6:	46ab      	mov	fp, r5
 80006b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006ba:	6865      	ldr	r5, [r4, #4]
 80006bc:	3408      	adds	r4, #8
 80006be:	e7b5      	b.n	800062c <__gnu_unwind_pr_common+0x64>
 80006c0:	2e02      	cmp	r6, #2
 80006c2:	dc9b      	bgt.n	80005fc <__gnu_unwind_pr_common+0x34>
 80006c4:	0c1a      	lsrs	r2, r3, #16
 80006c6:	041b      	lsls	r3, r3, #16
 80006c8:	9307      	str	r3, [sp, #28]
 80006ca:	2302      	movs	r3, #2
 80006cc:	a906      	add	r1, sp, #24
 80006ce:	730b      	strb	r3, [r1, #12]
 80006d0:	33fd      	adds	r3, #253	; 0xfd
 80006d2:	734a      	strb	r2, [r1, #13]
 80006d4:	401a      	ands	r2, r3
 80006d6:	9b01      	ldr	r3, [sp, #4]
 80006d8:	0092      	lsls	r2, r2, #2
 80006da:	18a4      	adds	r4, r4, r2
 80006dc:	2b02      	cmp	r3, #2
 80006de:	d000      	beq.n	80006e2 <__gnu_unwind_pr_common+0x11a>
 80006e0:	e790      	b.n	8000604 <__gnu_unwind_pr_common+0x3c>
 80006e2:	6bac      	ldr	r4, [r5, #56]	; 0x38
 80006e4:	e78e      	b.n	8000604 <__gnu_unwind_pr_common+0x3c>
 80006e6:	9b01      	ldr	r3, [sp, #4]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d13a      	bne.n	8000762 <__gnu_unwind_pr_common+0x19a>
 80006ec:	2900      	cmp	r1, #0
 80006ee:	d016      	beq.n	800071e <__gnu_unwind_pr_common+0x156>
 80006f0:	6823      	ldr	r3, [r4, #0]
 80006f2:	0fdd      	lsrs	r5, r3, #31
 80006f4:	6863      	ldr	r3, [r4, #4]
 80006f6:	1c9a      	adds	r2, r3, #2
 80006f8:	d0d7      	beq.n	80006aa <__gnu_unwind_pr_common+0xe2>
 80006fa:	4642      	mov	r2, r8
 80006fc:	3258      	adds	r2, #88	; 0x58
 80006fe:	9206      	str	r2, [sp, #24]
 8000700:	3301      	adds	r3, #1
 8000702:	d100      	bne.n	8000706 <__gnu_unwind_pr_common+0x13e>
 8000704:	e0b5      	b.n	8000872 <__gnu_unwind_pr_common+0x2aa>
 8000706:	1d20      	adds	r0, r4, #4
 8000708:	f7ff fdd0 	bl	80002ac <_Unwind_decode_typeinfo_ptr.isra.0>
 800070c:	ab06      	add	r3, sp, #24
 800070e:	0001      	movs	r1, r0
 8000710:	002a      	movs	r2, r5
 8000712:	4640      	mov	r0, r8
 8000714:	e000      	b.n	8000718 <__gnu_unwind_pr_common+0x150>
 8000716:	bf00      	nop
 8000718:	2800      	cmp	r0, #0
 800071a:	d000      	beq.n	800071e <__gnu_unwind_pr_common+0x156>
 800071c:	e0ba      	b.n	8000894 <__gnu_unwind_pr_common+0x2cc>
 800071e:	3408      	adds	r4, #8
 8000720:	e77a      	b.n	8000618 <__gnu_unwind_pr_common+0x50>
 8000722:	9b01      	ldr	r3, [sp, #4]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d002      	beq.n	800072e <__gnu_unwind_pr_common+0x166>
 8000728:	2900      	cmp	r1, #0
 800072a:	d000      	beq.n	800072e <__gnu_unwind_pr_common+0x166>
 800072c:	e08b      	b.n	8000846 <__gnu_unwind_pr_common+0x27e>
 800072e:	3404      	adds	r4, #4
 8000730:	e772      	b.n	8000618 <__gnu_unwind_pr_common+0x50>
 8000732:	a907      	add	r1, sp, #28
 8000734:	4658      	mov	r0, fp
 8000736:	f000 facf 	bl	8000cd8 <__gnu_unwind_execute>
 800073a:	2800      	cmp	r0, #0
 800073c:	d1b5      	bne.n	80006aa <__gnu_unwind_pr_common+0xe2>
 800073e:	9b02      	ldr	r3, [sp, #8]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d15d      	bne.n	8000800 <__gnu_unwind_pr_common+0x238>
 8000744:	2008      	movs	r0, #8
 8000746:	e7b1      	b.n	80006ac <__gnu_unwind_pr_common+0xe4>
 8000748:	4643      	mov	r3, r8
 800074a:	210d      	movs	r1, #13
 800074c:	4658      	mov	r0, fp
 800074e:	6a1d      	ldr	r5, [r3, #32]
 8000750:	f7ff fed0 	bl	80004f4 <_Unwind_GetGR>
 8000754:	4285      	cmp	r5, r0
 8000756:	d063      	beq.n	8000820 <__gnu_unwind_pr_common+0x258>
 8000758:	6823      	ldr	r3, [r4, #0]
 800075a:	2b00      	cmp	r3, #0
 800075c:	da99      	bge.n	8000692 <__gnu_unwind_pr_common+0xca>
 800075e:	3404      	adds	r4, #4
 8000760:	e797      	b.n	8000692 <__gnu_unwind_pr_common+0xca>
 8000762:	4643      	mov	r3, r8
 8000764:	210d      	movs	r1, #13
 8000766:	4658      	mov	r0, fp
 8000768:	6a1d      	ldr	r5, [r3, #32]
 800076a:	f7ff fec3 	bl	80004f4 <_Unwind_GetGR>
 800076e:	4285      	cmp	r5, r0
 8000770:	d1d5      	bne.n	800071e <__gnu_unwind_pr_common+0x156>
 8000772:	4643      	mov	r3, r8
 8000774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000776:	429c      	cmp	r4, r3
 8000778:	d1d1      	bne.n	800071e <__gnu_unwind_pr_common+0x156>
 800077a:	4645      	mov	r5, r8
 800077c:	0020      	movs	r0, r4
 800077e:	f7ff fcc1 	bl	8000104 <selfrel_offset31>
 8000782:	210f      	movs	r1, #15
 8000784:	0002      	movs	r2, r0
 8000786:	4658      	mov	r0, fp
 8000788:	f7ff feda 	bl	8000540 <_Unwind_SetGR>
 800078c:	4658      	mov	r0, fp
 800078e:	002a      	movs	r2, r5
 8000790:	2100      	movs	r1, #0
 8000792:	f7ff fed5 	bl	8000540 <_Unwind_SetGR>
 8000796:	2007      	movs	r0, #7
 8000798:	e788      	b.n	80006ac <__gnu_unwind_pr_common+0xe4>
 800079a:	2f00      	cmp	r7, #0
 800079c:	d022      	beq.n	80007e4 <__gnu_unwind_pr_common+0x21c>
 800079e:	2358      	movs	r3, #88	; 0x58
 80007a0:	4651      	mov	r1, sl
 80007a2:	4443      	add	r3, r8
 80007a4:	aa06      	add	r2, sp, #24
 80007a6:	46ba      	mov	sl, r7
 80007a8:	1d25      	adds	r5, r4, #4
 80007aa:	2600      	movs	r6, #0
 80007ac:	9404      	str	r4, [sp, #16]
 80007ae:	9105      	str	r1, [sp, #20]
 80007b0:	001f      	movs	r7, r3
 80007b2:	4691      	mov	r9, r2
 80007b4:	e003      	b.n	80007be <__gnu_unwind_pr_common+0x1f6>
 80007b6:	3504      	adds	r5, #4
 80007b8:	0026      	movs	r6, r4
 80007ba:	45a2      	cmp	sl, r4
 80007bc:	d014      	beq.n	80007e8 <__gnu_unwind_pr_common+0x220>
 80007be:	0028      	movs	r0, r5
 80007c0:	9706      	str	r7, [sp, #24]
 80007c2:	f7ff fd73 	bl	80002ac <_Unwind_decode_typeinfo_ptr.isra.0>
 80007c6:	464b      	mov	r3, r9
 80007c8:	0001      	movs	r1, r0
 80007ca:	2200      	movs	r2, #0
 80007cc:	4640      	mov	r0, r8
 80007ce:	1c74      	adds	r4, r6, #1
 80007d0:	e000      	b.n	80007d4 <__gnu_unwind_pr_common+0x20c>
 80007d2:	bf00      	nop
 80007d4:	2800      	cmp	r0, #0
 80007d6:	d0ee      	beq.n	80007b6 <__gnu_unwind_pr_common+0x1ee>
 80007d8:	4657      	mov	r7, sl
 80007da:	9b05      	ldr	r3, [sp, #20]
 80007dc:	9c04      	ldr	r4, [sp, #16]
 80007de:	469a      	mov	sl, r3
 80007e0:	42b7      	cmp	r7, r6
 80007e2:	d1b9      	bne.n	8000758 <__gnu_unwind_pr_common+0x190>
 80007e4:	4645      	mov	r5, r8
 80007e6:	e001      	b.n	80007ec <__gnu_unwind_pr_common+0x224>
 80007e8:	4645      	mov	r5, r8
 80007ea:	9c04      	ldr	r4, [sp, #16]
 80007ec:	210d      	movs	r1, #13
 80007ee:	4658      	mov	r0, fp
 80007f0:	f7ff fe80 	bl	80004f4 <_Unwind_GetGR>
 80007f4:	9b06      	ldr	r3, [sp, #24]
 80007f6:	6228      	str	r0, [r5, #32]
 80007f8:	626b      	str	r3, [r5, #36]	; 0x24
 80007fa:	62ac      	str	r4, [r5, #40]	; 0x28
 80007fc:	2006      	movs	r0, #6
 80007fe:	e755      	b.n	80006ac <__gnu_unwind_pr_common+0xe4>
 8000800:	210f      	movs	r1, #15
 8000802:	4658      	mov	r0, fp
 8000804:	f7ff fe76 	bl	80004f4 <_Unwind_GetGR>
 8000808:	210e      	movs	r1, #14
 800080a:	0002      	movs	r2, r0
 800080c:	4658      	mov	r0, fp
 800080e:	f7ff fe97 	bl	8000540 <_Unwind_SetGR>
 8000812:	4658      	mov	r0, fp
 8000814:	4a27      	ldr	r2, [pc, #156]	; (80008b4 <__gnu_unwind_pr_common+0x2ec>)
 8000816:	210f      	movs	r1, #15
 8000818:	f7ff fe92 	bl	8000540 <_Unwind_SetGR>
 800081c:	2007      	movs	r0, #7
 800081e:	e745      	b.n	80006ac <__gnu_unwind_pr_common+0xe4>
 8000820:	4643      	mov	r3, r8
 8000822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000824:	429c      	cmp	r4, r3
 8000826:	d197      	bne.n	8000758 <__gnu_unwind_pr_common+0x190>
 8000828:	4643      	mov	r3, r8
 800082a:	4642      	mov	r2, r8
 800082c:	629f      	str	r7, [r3, #40]	; 0x28
 800082e:	2300      	movs	r3, #0
 8000830:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000832:	3304      	adds	r3, #4
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	1d23      	adds	r3, r4, #4
 8000838:	6353      	str	r3, [r2, #52]	; 0x34
 800083a:	6823      	ldr	r3, [r4, #0]
 800083c:	2b00      	cmp	r3, #0
 800083e:	db23      	blt.n	8000888 <__gnu_unwind_pr_common+0x2c0>
 8000840:	2301      	movs	r3, #1
 8000842:	9302      	str	r3, [sp, #8]
 8000844:	e725      	b.n	8000692 <__gnu_unwind_pr_common+0xca>
 8000846:	0020      	movs	r0, r4
 8000848:	f7ff fc5c 	bl	8000104 <selfrel_offset31>
 800084c:	4645      	mov	r5, r8
 800084e:	3404      	adds	r4, #4
 8000850:	0006      	movs	r6, r0
 8000852:	63ac      	str	r4, [r5, #56]	; 0x38
 8000854:	4640      	mov	r0, r8
 8000856:	e000      	b.n	800085a <__gnu_unwind_pr_common+0x292>
 8000858:	bf00      	nop
 800085a:	2800      	cmp	r0, #0
 800085c:	d100      	bne.n	8000860 <__gnu_unwind_pr_common+0x298>
 800085e:	e724      	b.n	80006aa <__gnu_unwind_pr_common+0xe2>
 8000860:	4658      	mov	r0, fp
 8000862:	0032      	movs	r2, r6
 8000864:	210f      	movs	r1, #15
 8000866:	f7ff fe6b 	bl	8000540 <_Unwind_SetGR>
 800086a:	2007      	movs	r0, #7
 800086c:	e71e      	b.n	80006ac <__gnu_unwind_pr_common+0xe4>
 800086e:	4656      	mov	r6, sl
 8000870:	e715      	b.n	800069e <__gnu_unwind_pr_common+0xd6>
 8000872:	210d      	movs	r1, #13
 8000874:	4658      	mov	r0, fp
 8000876:	4645      	mov	r5, r8
 8000878:	f7ff fe3c 	bl	80004f4 <_Unwind_GetGR>
 800087c:	6228      	str	r0, [r5, #32]
 800087e:	9b06      	ldr	r3, [sp, #24]
 8000880:	626b      	str	r3, [r5, #36]	; 0x24
 8000882:	62ac      	str	r4, [r5, #40]	; 0x28
 8000884:	2006      	movs	r0, #6
 8000886:	e711      	b.n	80006ac <__gnu_unwind_pr_common+0xe4>
 8000888:	0038      	movs	r0, r7
 800088a:	3001      	adds	r0, #1
 800088c:	0080      	lsls	r0, r0, #2
 800088e:	4645      	mov	r5, r8
 8000890:	1820      	adds	r0, r4, r0
 8000892:	e774      	b.n	800077e <__gnu_unwind_pr_common+0x1b6>
 8000894:	0007      	movs	r7, r0
 8000896:	210d      	movs	r1, #13
 8000898:	4658      	mov	r0, fp
 800089a:	4645      	mov	r5, r8
 800089c:	f7ff fe2a 	bl	80004f4 <_Unwind_GetGR>
 80008a0:	6228      	str	r0, [r5, #32]
 80008a2:	2f02      	cmp	r7, #2
 80008a4:	d1eb      	bne.n	800087e <__gnu_unwind_pr_common+0x2b6>
 80008a6:	9b06      	ldr	r3, [sp, #24]
 80008a8:	62eb      	str	r3, [r5, #44]	; 0x2c
 80008aa:	4643      	mov	r3, r8
 80008ac:	332c      	adds	r3, #44	; 0x2c
 80008ae:	626b      	str	r3, [r5, #36]	; 0x24
 80008b0:	e7e7      	b.n	8000882 <__gnu_unwind_pr_common+0x2ba>
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	00000000 	.word	0x00000000

080008b8 <__aeabi_unwind_cpp_pr0>:
 80008b8:	b510      	push	{r4, lr}
 80008ba:	2300      	movs	r3, #0
 80008bc:	f7ff fe84 	bl	80005c8 <__gnu_unwind_pr_common>
 80008c0:	bd10      	pop	{r4, pc}
 80008c2:	46c0      	nop			; (mov r8, r8)

080008c4 <__aeabi_unwind_cpp_pr1>:
 80008c4:	b510      	push	{r4, lr}
 80008c6:	2301      	movs	r3, #1
 80008c8:	f7ff fe7e 	bl	80005c8 <__gnu_unwind_pr_common>
 80008cc:	bd10      	pop	{r4, pc}
 80008ce:	46c0      	nop			; (mov r8, r8)

080008d0 <__aeabi_unwind_cpp_pr2>:
 80008d0:	b510      	push	{r4, lr}
 80008d2:	2302      	movs	r3, #2
 80008d4:	f7ff fe78 	bl	80005c8 <__gnu_unwind_pr_common>
 80008d8:	bd10      	pop	{r4, pc}
 80008da:	46c0      	nop			; (mov r8, r8)

080008dc <_Unwind_VRS_Pop>:
 80008dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008de:	4647      	mov	r7, r8
 80008e0:	b480      	push	{r7}
 80008e2:	0006      	movs	r6, r0
 80008e4:	b0c2      	sub	sp, #264	; 0x108
 80008e6:	0014      	movs	r4, r2
 80008e8:	001d      	movs	r5, r3
 80008ea:	2901      	cmp	r1, #1
 80008ec:	d050      	beq.n	8000990 <_Unwind_VRS_Pop+0xb4>
 80008ee:	2900      	cmp	r1, #0
 80008f0:	d035      	beq.n	800095e <_Unwind_VRS_Pop+0x82>
 80008f2:	2903      	cmp	r1, #3
 80008f4:	d009      	beq.n	800090a <_Unwind_VRS_Pop+0x2e>
 80008f6:	2904      	cmp	r1, #4
 80008f8:	d102      	bne.n	8000900 <_Unwind_VRS_Pop+0x24>
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d100      	bne.n	8000900 <_Unwind_VRS_Pop+0x24>
 80008fe:	e08c      	b.n	8000a1a <_Unwind_VRS_Pop+0x13e>
 8000900:	2002      	movs	r0, #2
 8000902:	b042      	add	sp, #264	; 0x108
 8000904:	bc04      	pop	{r2}
 8000906:	4690      	mov	r8, r2
 8000908:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800090a:	2b03      	cmp	r3, #3
 800090c:	d1f8      	bne.n	8000900 <_Unwind_VRS_Pop+0x24>
 800090e:	0414      	lsls	r4, r2, #16
 8000910:	0c15      	lsrs	r5, r2, #16
 8000912:	0c24      	lsrs	r4, r4, #16
 8000914:	192b      	adds	r3, r5, r4
 8000916:	2b10      	cmp	r3, #16
 8000918:	d8f2      	bhi.n	8000900 <_Unwind_VRS_Pop+0x24>
 800091a:	2208      	movs	r2, #8
 800091c:	6803      	ldr	r3, [r0, #0]
 800091e:	421a      	tst	r2, r3
 8000920:	d000      	beq.n	8000924 <_Unwind_VRS_Pop+0x48>
 8000922:	e0e8      	b.n	8000af6 <_Unwind_VRS_Pop+0x21a>
 8000924:	af20      	add	r7, sp, #128	; 0x80
 8000926:	0038      	movs	r0, r7
 8000928:	f000 f92e 	bl	8000b88 <__gnu_Unwind_Save_WMMXD>
 800092c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800092e:	00e9      	lsls	r1, r5, #3
 8000930:	0064      	lsls	r4, r4, #1
 8000932:	469c      	mov	ip, r3
 8000934:	001a      	movs	r2, r3
 8000936:	1879      	adds	r1, r7, r1
 8000938:	1e63      	subs	r3, r4, #1
 800093a:	2c00      	cmp	r4, #0
 800093c:	d009      	beq.n	8000952 <_Unwind_VRS_Pop+0x76>
 800093e:	000a      	movs	r2, r1
 8000940:	4665      	mov	r5, ip
 8000942:	1a50      	subs	r0, r2, r1
 8000944:	5940      	ldr	r0, [r0, r5]
 8000946:	c201      	stmia	r2!, {r0}
 8000948:	3b01      	subs	r3, #1
 800094a:	d2f9      	bcs.n	8000940 <_Unwind_VRS_Pop+0x64>
 800094c:	00a4      	lsls	r4, r4, #2
 800094e:	0022      	movs	r2, r4
 8000950:	4462      	add	r2, ip
 8000952:	63b2      	str	r2, [r6, #56]	; 0x38
 8000954:	0038      	movs	r0, r7
 8000956:	f000 f915 	bl	8000b84 <__gnu_Unwind_Restore_WMMXD>
 800095a:	2000      	movs	r0, #0
 800095c:	e7d1      	b.n	8000902 <_Unwind_VRS_Pop+0x26>
 800095e:	2002      	movs	r0, #2
 8000960:	2b00      	cmp	r3, #0
 8000962:	d1ce      	bne.n	8000902 <_Unwind_VRS_Pop+0x26>
 8000964:	2300      	movs	r3, #0
 8000966:	2701      	movs	r7, #1
 8000968:	0410      	lsls	r0, r2, #16
 800096a:	6bb5      	ldr	r5, [r6, #56]	; 0x38
 800096c:	0c00      	lsrs	r0, r0, #16
 800096e:	1d32      	adds	r2, r6, #4
 8000970:	0039      	movs	r1, r7
 8000972:	4099      	lsls	r1, r3
 8000974:	4208      	tst	r0, r1
 8000976:	d002      	beq.n	800097e <_Unwind_VRS_Pop+0xa2>
 8000978:	6829      	ldr	r1, [r5, #0]
 800097a:	3504      	adds	r5, #4
 800097c:	6011      	str	r1, [r2, #0]
 800097e:	3301      	adds	r3, #1
 8000980:	3204      	adds	r2, #4
 8000982:	2b10      	cmp	r3, #16
 8000984:	d1f4      	bne.n	8000970 <_Unwind_VRS_Pop+0x94>
 8000986:	2000      	movs	r0, #0
 8000988:	04a3      	lsls	r3, r4, #18
 800098a:	d4ba      	bmi.n	8000902 <_Unwind_VRS_Pop+0x26>
 800098c:	63b5      	str	r5, [r6, #56]	; 0x38
 800098e:	e7b8      	b.n	8000902 <_Unwind_VRS_Pop+0x26>
 8000990:	0414      	lsls	r4, r2, #16
 8000992:	0c17      	lsrs	r7, r2, #16
 8000994:	0c24      	lsrs	r4, r4, #16
 8000996:	2b01      	cmp	r3, #1
 8000998:	d05e      	beq.n	8000a58 <_Unwind_VRS_Pop+0x17c>
 800099a:	2b05      	cmp	r3, #5
 800099c:	d1b0      	bne.n	8000900 <_Unwind_VRS_Pop+0x24>
 800099e:	193b      	adds	r3, r7, r4
 80009a0:	2b20      	cmp	r3, #32
 80009a2:	d8ad      	bhi.n	8000900 <_Unwind_VRS_Pop+0x24>
 80009a4:	2f0f      	cmp	r7, #15
 80009a6:	d800      	bhi.n	80009aa <_Unwind_VRS_Pop+0xce>
 80009a8:	e087      	b.n	8000aba <_Unwind_VRS_Pop+0x1de>
 80009aa:	46a0      	mov	r8, r4
 80009ac:	2c00      	cmp	r4, #0
 80009ae:	d170      	bne.n	8000a92 <_Unwind_VRS_Pop+0x1b6>
 80009b0:	2200      	movs	r2, #0
 80009b2:	0023      	movs	r3, r4
 80009b4:	4690      	mov	r8, r2
 80009b6:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	dc00      	bgt.n	80009be <_Unwind_VRS_Pop+0xe2>
 80009bc:	e092      	b.n	8000ae4 <_Unwind_VRS_Pop+0x208>
 80009be:	a820      	add	r0, sp, #128	; 0x80
 80009c0:	4684      	mov	ip, r0
 80009c2:	00f9      	lsls	r1, r7, #3
 80009c4:	4461      	add	r1, ip
 80009c6:	00db      	lsls	r3, r3, #3
 80009c8:	18d3      	adds	r3, r2, r3
 80009ca:	1a89      	subs	r1, r1, r2
 80009cc:	6810      	ldr	r0, [r2, #0]
 80009ce:	5088      	str	r0, [r1, r2]
 80009d0:	3204      	adds	r2, #4
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d1fa      	bne.n	80009cc <_Unwind_VRS_Pop+0xf0>
 80009d6:	001a      	movs	r2, r3
 80009d8:	4643      	mov	r3, r8
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d010      	beq.n	8000a00 <_Unwind_VRS_Pop+0x124>
 80009de:	4643      	mov	r3, r8
 80009e0:	0058      	lsls	r0, r3, #1
 80009e2:	1e3b      	subs	r3, r7, #0
 80009e4:	2b10      	cmp	r3, #16
 80009e6:	d200      	bcs.n	80009ea <_Unwind_VRS_Pop+0x10e>
 80009e8:	2310      	movs	r3, #16
 80009ea:	3b10      	subs	r3, #16
 80009ec:	00d9      	lsls	r1, r3, #3
 80009ee:	2300      	movs	r3, #0
 80009f0:	4469      	add	r1, sp
 80009f2:	0080      	lsls	r0, r0, #2
 80009f4:	58d4      	ldr	r4, [r2, r3]
 80009f6:	50cc      	str	r4, [r1, r3]
 80009f8:	3304      	adds	r3, #4
 80009fa:	4283      	cmp	r3, r0
 80009fc:	d1fa      	bne.n	80009f4 <_Unwind_VRS_Pop+0x118>
 80009fe:	18d2      	adds	r2, r2, r3
 8000a00:	2d01      	cmp	r5, #1
 8000a02:	d068      	beq.n	8000ad6 <_Unwind_VRS_Pop+0x1fa>
 8000a04:	63b2      	str	r2, [r6, #56]	; 0x38
 8000a06:	2f0f      	cmp	r7, #15
 8000a08:	d971      	bls.n	8000aee <_Unwind_VRS_Pop+0x212>
 8000a0a:	4643      	mov	r3, r8
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d0a4      	beq.n	800095a <_Unwind_VRS_Pop+0x7e>
 8000a10:	4668      	mov	r0, sp
 8000a12:	f000 f8b3 	bl	8000b7c <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000a16:	2000      	movs	r0, #0
 8000a18:	e773      	b.n	8000902 <_Unwind_VRS_Pop+0x26>
 8000a1a:	2a10      	cmp	r2, #16
 8000a1c:	d900      	bls.n	8000a20 <_Unwind_VRS_Pop+0x144>
 8000a1e:	e76f      	b.n	8000900 <_Unwind_VRS_Pop+0x24>
 8000a20:	2210      	movs	r2, #16
 8000a22:	6803      	ldr	r3, [r0, #0]
 8000a24:	421a      	tst	r2, r3
 8000a26:	d14f      	bne.n	8000ac8 <_Unwind_VRS_Pop+0x1ec>
 8000a28:	af20      	add	r7, sp, #128	; 0x80
 8000a2a:	0038      	movs	r0, r7
 8000a2c:	f000 f8b0 	bl	8000b90 <__gnu_Unwind_Save_WMMXC>
 8000a30:	2300      	movs	r3, #0
 8000a32:	2001      	movs	r0, #1
 8000a34:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 8000a36:	0002      	movs	r2, r0
 8000a38:	409a      	lsls	r2, r3
 8000a3a:	4214      	tst	r4, r2
 8000a3c:	d003      	beq.n	8000a46 <_Unwind_VRS_Pop+0x16a>
 8000a3e:	680d      	ldr	r5, [r1, #0]
 8000a40:	009a      	lsls	r2, r3, #2
 8000a42:	50bd      	str	r5, [r7, r2]
 8000a44:	3104      	adds	r1, #4
 8000a46:	3301      	adds	r3, #1
 8000a48:	2b04      	cmp	r3, #4
 8000a4a:	d1f4      	bne.n	8000a36 <_Unwind_VRS_Pop+0x15a>
 8000a4c:	0038      	movs	r0, r7
 8000a4e:	63b1      	str	r1, [r6, #56]	; 0x38
 8000a50:	f000 f89c 	bl	8000b8c <__gnu_Unwind_Restore_WMMXC>
 8000a54:	2000      	movs	r0, #0
 8000a56:	e754      	b.n	8000902 <_Unwind_VRS_Pop+0x26>
 8000a58:	193b      	adds	r3, r7, r4
 8000a5a:	2b10      	cmp	r3, #16
 8000a5c:	d900      	bls.n	8000a60 <_Unwind_VRS_Pop+0x184>
 8000a5e:	e74f      	b.n	8000900 <_Unwind_VRS_Pop+0x24>
 8000a60:	2f0f      	cmp	r7, #15
 8000a62:	d900      	bls.n	8000a66 <_Unwind_VRS_Pop+0x18a>
 8000a64:	e74c      	b.n	8000900 <_Unwind_VRS_Pop+0x24>
 8000a66:	2300      	movs	r3, #0
 8000a68:	4698      	mov	r8, r3
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	6833      	ldr	r3, [r6, #0]
 8000a6e:	421a      	tst	r2, r3
 8000a70:	d00c      	beq.n	8000a8c <_Unwind_VRS_Pop+0x1b0>
 8000a72:	0019      	movs	r1, r3
 8000a74:	4391      	bics	r1, r2
 8000a76:	000a      	movs	r2, r1
 8000a78:	6031      	str	r1, [r6, #0]
 8000a7a:	2d05      	cmp	r5, #5
 8000a7c:	d04d      	beq.n	8000b1a <_Unwind_VRS_Pop+0x23e>
 8000a7e:	2203      	movs	r2, #3
 8000a80:	0030      	movs	r0, r6
 8000a82:	4393      	bics	r3, r2
 8000a84:	6033      	str	r3, [r6, #0]
 8000a86:	3048      	adds	r0, #72	; 0x48
 8000a88:	f000 f872 	bl	8000b70 <__gnu_Unwind_Save_VFP>
 8000a8c:	4643      	mov	r3, r8
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d04b      	beq.n	8000b2a <_Unwind_VRS_Pop+0x24e>
 8000a92:	2204      	movs	r2, #4
 8000a94:	6833      	ldr	r3, [r6, #0]
 8000a96:	421a      	tst	r2, r3
 8000a98:	d134      	bne.n	8000b04 <_Unwind_VRS_Pop+0x228>
 8000a9a:	2d01      	cmp	r5, #1
 8000a9c:	d039      	beq.n	8000b12 <_Unwind_VRS_Pop+0x236>
 8000a9e:	2f0f      	cmp	r7, #15
 8000aa0:	d805      	bhi.n	8000aae <_Unwind_VRS_Pop+0x1d2>
 8000aa2:	a820      	add	r0, sp, #128	; 0x80
 8000aa4:	f000 f868 	bl	8000b78 <__gnu_Unwind_Save_VFP_D>
 8000aa8:	4643      	mov	r3, r8
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d080      	beq.n	80009b0 <_Unwind_VRS_Pop+0xd4>
 8000aae:	4668      	mov	r0, sp
 8000ab0:	f000 f866 	bl	8000b80 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000ab4:	2310      	movs	r3, #16
 8000ab6:	1bdb      	subs	r3, r3, r7
 8000ab8:	e77d      	b.n	80009b6 <_Unwind_VRS_Pop+0xda>
 8000aba:	2b10      	cmp	r3, #16
 8000abc:	d9d3      	bls.n	8000a66 <_Unwind_VRS_Pop+0x18a>
 8000abe:	2210      	movs	r2, #16
 8000ac0:	4252      	negs	r2, r2
 8000ac2:	4690      	mov	r8, r2
 8000ac4:	4498      	add	r8, r3
 8000ac6:	e7d0      	b.n	8000a6a <_Unwind_VRS_Pop+0x18e>
 8000ac8:	4393      	bics	r3, r2
 8000aca:	6003      	str	r3, [r0, #0]
 8000acc:	30d1      	adds	r0, #209	; 0xd1
 8000ace:	30ff      	adds	r0, #255	; 0xff
 8000ad0:	f000 f85e 	bl	8000b90 <__gnu_Unwind_Save_WMMXC>
 8000ad4:	e7a8      	b.n	8000a28 <_Unwind_VRS_Pop+0x14c>
 8000ad6:	3204      	adds	r2, #4
 8000ad8:	a820      	add	r0, sp, #128	; 0x80
 8000ada:	63b2      	str	r2, [r6, #56]	; 0x38
 8000adc:	f000 f846 	bl	8000b6c <__gnu_Unwind_Restore_VFP>
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	e70e      	b.n	8000902 <_Unwind_VRS_Pop+0x26>
 8000ae4:	4643      	mov	r3, r8
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d000      	beq.n	8000aec <_Unwind_VRS_Pop+0x210>
 8000aea:	e779      	b.n	80009e0 <_Unwind_VRS_Pop+0x104>
 8000aec:	e788      	b.n	8000a00 <_Unwind_VRS_Pop+0x124>
 8000aee:	a820      	add	r0, sp, #128	; 0x80
 8000af0:	f000 f840 	bl	8000b74 <__gnu_Unwind_Restore_VFP_D>
 8000af4:	e789      	b.n	8000a0a <_Unwind_VRS_Pop+0x12e>
 8000af6:	4393      	bics	r3, r2
 8000af8:	6003      	str	r3, [r0, #0]
 8000afa:	3051      	adds	r0, #81	; 0x51
 8000afc:	30ff      	adds	r0, #255	; 0xff
 8000afe:	f000 f843 	bl	8000b88 <__gnu_Unwind_Save_WMMXD>
 8000b02:	e70f      	b.n	8000924 <_Unwind_VRS_Pop+0x48>
 8000b04:	0030      	movs	r0, r6
 8000b06:	4393      	bics	r3, r2
 8000b08:	6033      	str	r3, [r6, #0]
 8000b0a:	30d0      	adds	r0, #208	; 0xd0
 8000b0c:	f000 f838 	bl	8000b80 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000b10:	e7c3      	b.n	8000a9a <_Unwind_VRS_Pop+0x1be>
 8000b12:	a820      	add	r0, sp, #128	; 0x80
 8000b14:	f000 f82c 	bl	8000b70 <__gnu_Unwind_Save_VFP>
 8000b18:	e7cc      	b.n	8000ab4 <_Unwind_VRS_Pop+0x1d8>
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	0030      	movs	r0, r6
 8000b1e:	431a      	orrs	r2, r3
 8000b20:	6032      	str	r2, [r6, #0]
 8000b22:	3048      	adds	r0, #72	; 0x48
 8000b24:	f000 f828 	bl	8000b78 <__gnu_Unwind_Save_VFP_D>
 8000b28:	e7b0      	b.n	8000a8c <_Unwind_VRS_Pop+0x1b0>
 8000b2a:	2d01      	cmp	r5, #1
 8000b2c:	d003      	beq.n	8000b36 <_Unwind_VRS_Pop+0x25a>
 8000b2e:	2f0f      	cmp	r7, #15
 8000b30:	d900      	bls.n	8000b34 <_Unwind_VRS_Pop+0x258>
 8000b32:	e73d      	b.n	80009b0 <_Unwind_VRS_Pop+0xd4>
 8000b34:	e7b5      	b.n	8000aa2 <_Unwind_VRS_Pop+0x1c6>
 8000b36:	a820      	add	r0, sp, #128	; 0x80
 8000b38:	f000 f81a 	bl	8000b70 <__gnu_Unwind_Save_VFP>
 8000b3c:	e738      	b.n	80009b0 <_Unwind_VRS_Pop+0xd4>
 8000b3e:	46c0      	nop			; (mov r8, r8)

08000b40 <__restore_core_regs>:
 8000b40:	1c01      	adds	r1, r0, #0
 8000b42:	3134      	adds	r1, #52	; 0x34
 8000b44:	c938      	ldmia	r1!, {r3, r4, r5}
 8000b46:	3b04      	subs	r3, #4
 8000b48:	469c      	mov	ip, r3
 8000b4a:	601d      	str	r5, [r3, #0]
 8000b4c:	46a6      	mov	lr, r4
 8000b4e:	1c01      	adds	r1, r0, #0
 8000b50:	3120      	adds	r1, #32
 8000b52:	c93c      	ldmia	r1!, {r2, r3, r4, r5}
 8000b54:	4690      	mov	r8, r2
 8000b56:	4699      	mov	r9, r3
 8000b58:	46a2      	mov	sl, r4
 8000b5a:	46ab      	mov	fp, r5
 8000b5c:	1c01      	adds	r1, r0, #0
 8000b5e:	3108      	adds	r1, #8
 8000b60:	c9fc      	ldmia	r1!, {r2, r3, r4, r5, r6, r7}
 8000b62:	6841      	ldr	r1, [r0, #4]
 8000b64:	6800      	ldr	r0, [r0, #0]
 8000b66:	46e5      	mov	sp, ip
 8000b68:	bd00      	pop	{pc}
 8000b6a:	46c0      	nop			; (mov r8, r8)

08000b6c <__gnu_Unwind_Restore_VFP>:
 8000b6c:	4770      	bx	lr
 8000b6e:	46c0      	nop			; (mov r8, r8)

08000b70 <__gnu_Unwind_Save_VFP>:
 8000b70:	4770      	bx	lr
 8000b72:	46c0      	nop			; (mov r8, r8)

08000b74 <__gnu_Unwind_Restore_VFP_D>:
 8000b74:	4770      	bx	lr
 8000b76:	46c0      	nop			; (mov r8, r8)

08000b78 <__gnu_Unwind_Save_VFP_D>:
 8000b78:	4770      	bx	lr
 8000b7a:	46c0      	nop			; (mov r8, r8)

08000b7c <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000b7c:	4770      	bx	lr
 8000b7e:	46c0      	nop			; (mov r8, r8)

08000b80 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000b80:	4770      	bx	lr
 8000b82:	46c0      	nop			; (mov r8, r8)

08000b84 <__gnu_Unwind_Restore_WMMXD>:
 8000b84:	4770      	bx	lr
 8000b86:	46c0      	nop			; (mov r8, r8)

08000b88 <__gnu_Unwind_Save_WMMXD>:
 8000b88:	4770      	bx	lr
 8000b8a:	46c0      	nop			; (mov r8, r8)

08000b8c <__gnu_Unwind_Restore_WMMXC>:
 8000b8c:	4770      	bx	lr
 8000b8e:	46c0      	nop			; (mov r8, r8)

08000b90 <__gnu_Unwind_Save_WMMXC>:
 8000b90:	4770      	bx	lr
 8000b92:	46c0      	nop			; (mov r8, r8)

08000b94 <_Unwind_RaiseException>:
 8000b94:	b401      	push	{r0}
 8000b96:	a801      	add	r0, sp, #4
 8000b98:	b501      	push	{r0, lr}
 8000b9a:	b085      	sub	sp, #20
 8000b9c:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 8000b9e:	a808      	add	r0, sp, #32
 8000ba0:	4641      	mov	r1, r8
 8000ba2:	464a      	mov	r2, r9
 8000ba4:	4653      	mov	r3, sl
 8000ba6:	465c      	mov	r4, fp
 8000ba8:	4665      	mov	r5, ip
 8000baa:	c03e      	stmia	r0!, {r1, r2, r3, r4, r5}
 8000bac:	a801      	add	r0, sp, #4
 8000bae:	c83e      	ldmia	r0!, {r1, r2, r3, r4, r5}
 8000bb0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8000bb2:	9000      	str	r0, [sp, #0]
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	b40c      	push	{r2, r3}
 8000bb8:	a901      	add	r1, sp, #4
 8000bba:	f7ff fc11 	bl	80003e0 <__gnu_Unwind_RaiseException>
 8000bbe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8000bc0:	b012      	add	sp, #72	; 0x48
 8000bc2:	4718      	bx	r3

08000bc4 <_Unwind_Resume>:
 8000bc4:	b401      	push	{r0}
 8000bc6:	a801      	add	r0, sp, #4
 8000bc8:	b501      	push	{r0, lr}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 8000bce:	a808      	add	r0, sp, #32
 8000bd0:	4641      	mov	r1, r8
 8000bd2:	464a      	mov	r2, r9
 8000bd4:	4653      	mov	r3, sl
 8000bd6:	465c      	mov	r4, fp
 8000bd8:	4665      	mov	r5, ip
 8000bda:	c03e      	stmia	r0!, {r1, r2, r3, r4, r5}
 8000bdc:	a801      	add	r0, sp, #4
 8000bde:	c83e      	ldmia	r0!, {r1, r2, r3, r4, r5}
 8000be0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8000be2:	9000      	str	r0, [sp, #0]
 8000be4:	2300      	movs	r3, #0
 8000be6:	b40c      	push	{r2, r3}
 8000be8:	a901      	add	r1, sp, #4
 8000bea:	f7ff fc2d 	bl	8000448 <__gnu_Unwind_Resume>
 8000bee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8000bf0:	b012      	add	sp, #72	; 0x48
 8000bf2:	4718      	bx	r3

08000bf4 <_Unwind_Resume_or_Rethrow>:
 8000bf4:	b401      	push	{r0}
 8000bf6:	a801      	add	r0, sp, #4
 8000bf8:	b501      	push	{r0, lr}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 8000bfe:	a808      	add	r0, sp, #32
 8000c00:	4641      	mov	r1, r8
 8000c02:	464a      	mov	r2, r9
 8000c04:	4653      	mov	r3, sl
 8000c06:	465c      	mov	r4, fp
 8000c08:	4665      	mov	r5, ip
 8000c0a:	c03e      	stmia	r0!, {r1, r2, r3, r4, r5}
 8000c0c:	a801      	add	r0, sp, #4
 8000c0e:	c83e      	ldmia	r0!, {r1, r2, r3, r4, r5}
 8000c10:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8000c12:	9000      	str	r0, [sp, #0]
 8000c14:	2300      	movs	r3, #0
 8000c16:	b40c      	push	{r2, r3}
 8000c18:	a901      	add	r1, sp, #4
 8000c1a:	f7ff fc39 	bl	8000490 <__gnu_Unwind_Resume_or_Rethrow>
 8000c1e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8000c20:	b012      	add	sp, #72	; 0x48
 8000c22:	4718      	bx	r3

08000c24 <_Unwind_ForcedUnwind>:
 8000c24:	b401      	push	{r0}
 8000c26:	a801      	add	r0, sp, #4
 8000c28:	b501      	push	{r0, lr}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 8000c2e:	a808      	add	r0, sp, #32
 8000c30:	4641      	mov	r1, r8
 8000c32:	464a      	mov	r2, r9
 8000c34:	4653      	mov	r3, sl
 8000c36:	465c      	mov	r4, fp
 8000c38:	4665      	mov	r5, ip
 8000c3a:	c03e      	stmia	r0!, {r1, r2, r3, r4, r5}
 8000c3c:	a801      	add	r0, sp, #4
 8000c3e:	c83e      	ldmia	r0!, {r1, r2, r3, r4, r5}
 8000c40:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8000c42:	9000      	str	r0, [sp, #0]
 8000c44:	2300      	movs	r3, #0
 8000c46:	b40c      	push	{r2, r3}
 8000c48:	ab01      	add	r3, sp, #4
 8000c4a:	f7ff fbf3 	bl	8000434 <__gnu_Unwind_ForcedUnwind>
 8000c4e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8000c50:	b012      	add	sp, #72	; 0x48
 8000c52:	4718      	bx	r3

08000c54 <_Unwind_Backtrace>:
 8000c54:	b401      	push	{r0}
 8000c56:	a801      	add	r0, sp, #4
 8000c58:	b501      	push	{r0, lr}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 8000c5e:	a808      	add	r0, sp, #32
 8000c60:	4641      	mov	r1, r8
 8000c62:	464a      	mov	r2, r9
 8000c64:	4653      	mov	r3, sl
 8000c66:	465c      	mov	r4, fp
 8000c68:	4665      	mov	r5, ip
 8000c6a:	c03e      	stmia	r0!, {r1, r2, r3, r4, r5}
 8000c6c:	a801      	add	r0, sp, #4
 8000c6e:	c83e      	ldmia	r0!, {r1, r2, r3, r4, r5}
 8000c70:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8000c72:	9000      	str	r0, [sp, #0]
 8000c74:	2300      	movs	r3, #0
 8000c76:	b40c      	push	{r2, r3}
 8000c78:	aa01      	add	r2, sp, #4
 8000c7a:	f7ff fc6d 	bl	8000558 <__gnu_Unwind_Backtrace>
 8000c7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8000c80:	b012      	add	sp, #72	; 0x48
 8000c82:	4718      	bx	r3

08000c84 <next_unwind_byte>:
 8000c84:	7a02      	ldrb	r2, [r0, #8]
 8000c86:	0003      	movs	r3, r0
 8000c88:	2a00      	cmp	r2, #0
 8000c8a:	d104      	bne.n	8000c96 <next_unwind_byte+0x12>
 8000c8c:	7a42      	ldrb	r2, [r0, #9]
 8000c8e:	20b0      	movs	r0, #176	; 0xb0
 8000c90:	2a00      	cmp	r2, #0
 8000c92:	d107      	bne.n	8000ca4 <next_unwind_byte+0x20>
 8000c94:	4770      	bx	lr
 8000c96:	3a01      	subs	r2, #1
 8000c98:	7202      	strb	r2, [r0, #8]
 8000c9a:	6800      	ldr	r0, [r0, #0]
 8000c9c:	0202      	lsls	r2, r0, #8
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	0e00      	lsrs	r0, r0, #24
 8000ca2:	e7f7      	b.n	8000c94 <next_unwind_byte+0x10>
 8000ca4:	3a01      	subs	r2, #1
 8000ca6:	725a      	strb	r2, [r3, #9]
 8000ca8:	685a      	ldr	r2, [r3, #4]
 8000caa:	1d11      	adds	r1, r2, #4
 8000cac:	6810      	ldr	r0, [r2, #0]
 8000cae:	2203      	movs	r2, #3
 8000cb0:	6059      	str	r1, [r3, #4]
 8000cb2:	721a      	strb	r2, [r3, #8]
 8000cb4:	e7f2      	b.n	8000c9c <next_unwind_byte+0x18>
 8000cb6:	46c0      	nop			; (mov r8, r8)

08000cb8 <_Unwind_GetGR.constprop.0>:
 8000cb8:	b500      	push	{lr}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	ab03      	add	r3, sp, #12
 8000cbe:	9300      	str	r3, [sp, #0]
 8000cc0:	220c      	movs	r2, #12
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	f7ff fbfb 	bl	80004c0 <_Unwind_VRS_Get>
 8000cca:	9803      	ldr	r0, [sp, #12]
 8000ccc:	b005      	add	sp, #20
 8000cce:	bd00      	pop	{pc}

08000cd0 <unwind_UCB_from_context>:
 8000cd0:	b510      	push	{r4, lr}
 8000cd2:	f7ff fff1 	bl	8000cb8 <_Unwind_GetGR.constprop.0>
 8000cd6:	bd10      	pop	{r4, pc}

08000cd8 <__gnu_unwind_execute>:
 8000cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cda:	4656      	mov	r6, sl
 8000cdc:	465f      	mov	r7, fp
 8000cde:	464d      	mov	r5, r9
 8000ce0:	4644      	mov	r4, r8
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	b4f0      	push	{r4, r5, r6, r7}
 8000ce6:	b087      	sub	sp, #28
 8000ce8:	9303      	str	r3, [sp, #12]
 8000cea:	337f      	adds	r3, #127	; 0x7f
 8000cec:	4698      	mov	r8, r3
 8000cee:	3b70      	subs	r3, #112	; 0x70
 8000cf0:	4699      	mov	r9, r3
 8000cf2:	3b08      	subs	r3, #8
 8000cf4:	0007      	movs	r7, r0
 8000cf6:	000e      	movs	r6, r1
 8000cf8:	469a      	mov	sl, r3
 8000cfa:	0030      	movs	r0, r6
 8000cfc:	f7ff ffc2 	bl	8000c84 <next_unwind_byte>
 8000d00:	1e04      	subs	r4, r0, #0
 8000d02:	2cb0      	cmp	r4, #176	; 0xb0
 8000d04:	d100      	bne.n	8000d08 <__gnu_unwind_execute+0x30>
 8000d06:	e0c5      	b.n	8000e94 <__gnu_unwind_execute+0x1bc>
 8000d08:	0003      	movs	r3, r0
 8000d0a:	4642      	mov	r2, r8
 8000d0c:	4393      	bics	r3, r2
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d02a      	beq.n	8000d6a <__gnu_unwind_execute+0x92>
 8000d14:	0003      	movs	r3, r0
 8000d16:	464a      	mov	r2, r9
 8000d18:	4393      	bics	r3, r2
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	2b80      	cmp	r3, #128	; 0x80
 8000d1e:	d100      	bne.n	8000d22 <__gnu_unwind_execute+0x4a>
 8000d20:	e07f      	b.n	8000e22 <__gnu_unwind_execute+0x14a>
 8000d22:	2b90      	cmp	r3, #144	; 0x90
 8000d24:	d041      	beq.n	8000daa <__gnu_unwind_execute+0xd2>
 8000d26:	2ba0      	cmp	r3, #160	; 0xa0
 8000d28:	d04e      	beq.n	8000dc8 <__gnu_unwind_execute+0xf0>
 8000d2a:	2bb0      	cmp	r3, #176	; 0xb0
 8000d2c:	d060      	beq.n	8000df0 <__gnu_unwind_execute+0x118>
 8000d2e:	2bc0      	cmp	r3, #192	; 0xc0
 8000d30:	d100      	bne.n	8000d34 <__gnu_unwind_execute+0x5c>
 8000d32:	e090      	b.n	8000e56 <__gnu_unwind_execute+0x17e>
 8000d34:	0003      	movs	r3, r0
 8000d36:	4652      	mov	r2, sl
 8000d38:	4393      	bics	r3, r2
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	2bd0      	cmp	r3, #208	; 0xd0
 8000d3e:	d10b      	bne.n	8000d58 <__gnu_unwind_execute+0x80>
 8000d40:	4014      	ands	r4, r2
 8000d42:	2280      	movs	r2, #128	; 0x80
 8000d44:	3401      	adds	r4, #1
 8000d46:	0312      	lsls	r2, r2, #12
 8000d48:	4322      	orrs	r2, r4
 8000d4a:	2305      	movs	r3, #5
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	0038      	movs	r0, r7
 8000d50:	f7ff fdc4 	bl	80008dc <_Unwind_VRS_Pop>
 8000d54:	2800      	cmp	r0, #0
 8000d56:	d0d0      	beq.n	8000cfa <__gnu_unwind_execute+0x22>
 8000d58:	2409      	movs	r4, #9
 8000d5a:	0020      	movs	r0, r4
 8000d5c:	b007      	add	sp, #28
 8000d5e:	bc3c      	pop	{r2, r3, r4, r5}
 8000d60:	4690      	mov	r8, r2
 8000d62:	4699      	mov	r9, r3
 8000d64:	46a2      	mov	sl, r4
 8000d66:	46ab      	mov	fp, r5
 8000d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d6a:	25ff      	movs	r5, #255	; 0xff
 8000d6c:	0083      	lsls	r3, r0, #2
 8000d6e:	401d      	ands	r5, r3
 8000d70:	ab05      	add	r3, sp, #20
 8000d72:	469b      	mov	fp, r3
 8000d74:	9300      	str	r3, [sp, #0]
 8000d76:	220d      	movs	r2, #13
 8000d78:	2300      	movs	r3, #0
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	0038      	movs	r0, r7
 8000d7e:	3504      	adds	r5, #4
 8000d80:	f7ff fb9e 	bl	80004c0 <_Unwind_VRS_Get>
 8000d84:	0663      	lsls	r3, r4, #25
 8000d86:	d40c      	bmi.n	8000da2 <__gnu_unwind_execute+0xca>
 8000d88:	9b05      	ldr	r3, [sp, #20]
 8000d8a:	469c      	mov	ip, r3
 8000d8c:	4465      	add	r5, ip
 8000d8e:	9505      	str	r5, [sp, #20]
 8000d90:	465b      	mov	r3, fp
 8000d92:	9300      	str	r3, [sp, #0]
 8000d94:	2300      	movs	r3, #0
 8000d96:	220d      	movs	r2, #13
 8000d98:	2100      	movs	r1, #0
 8000d9a:	0038      	movs	r0, r7
 8000d9c:	f7ff fbb6 	bl	800050c <_Unwind_VRS_Set>
 8000da0:	e7ab      	b.n	8000cfa <__gnu_unwind_execute+0x22>
 8000da2:	9b05      	ldr	r3, [sp, #20]
 8000da4:	1b5d      	subs	r5, r3, r5
 8000da6:	9505      	str	r5, [sp, #20]
 8000da8:	e7f2      	b.n	8000d90 <__gnu_unwind_execute+0xb8>
 8000daa:	3b83      	subs	r3, #131	; 0x83
 8000dac:	4003      	ands	r3, r0
 8000dae:	2b0d      	cmp	r3, #13
 8000db0:	d0d2      	beq.n	8000d58 <__gnu_unwind_execute+0x80>
 8000db2:	464a      	mov	r2, r9
 8000db4:	ad05      	add	r5, sp, #20
 8000db6:	4002      	ands	r2, r0
 8000db8:	9500      	str	r5, [sp, #0]
 8000dba:	2300      	movs	r3, #0
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	0038      	movs	r0, r7
 8000dc0:	f7ff fb7e 	bl	80004c0 <_Unwind_VRS_Get>
 8000dc4:	9500      	str	r5, [sp, #0]
 8000dc6:	e7e5      	b.n	8000d94 <__gnu_unwind_execute+0xbc>
 8000dc8:	22ff      	movs	r2, #255	; 0xff
 8000dca:	4653      	mov	r3, sl
 8000dcc:	0112      	lsls	r2, r2, #4
 8000dce:	0011      	movs	r1, r2
 8000dd0:	4383      	bics	r3, r0
 8000dd2:	4119      	asrs	r1, r3
 8000dd4:	400a      	ands	r2, r1
 8000dd6:	0703      	lsls	r3, r0, #28
 8000dd8:	d502      	bpl.n	8000de0 <__gnu_unwind_execute+0x108>
 8000dda:	2380      	movs	r3, #128	; 0x80
 8000ddc:	01db      	lsls	r3, r3, #7
 8000dde:	431a      	orrs	r2, r3
 8000de0:	2300      	movs	r3, #0
 8000de2:	2100      	movs	r1, #0
 8000de4:	0038      	movs	r0, r7
 8000de6:	f7ff fd79 	bl	80008dc <_Unwind_VRS_Pop>
 8000dea:	2800      	cmp	r0, #0
 8000dec:	d1b4      	bne.n	8000d58 <__gnu_unwind_execute+0x80>
 8000dee:	e784      	b.n	8000cfa <__gnu_unwind_execute+0x22>
 8000df0:	28b1      	cmp	r0, #177	; 0xb1
 8000df2:	d063      	beq.n	8000ebc <__gnu_unwind_execute+0x1e4>
 8000df4:	28b2      	cmp	r0, #178	; 0xb2
 8000df6:	d076      	beq.n	8000ee6 <__gnu_unwind_execute+0x20e>
 8000df8:	28b3      	cmp	r0, #179	; 0xb3
 8000dfa:	d100      	bne.n	8000dfe <__gnu_unwind_execute+0x126>
 8000dfc:	e0a2      	b.n	8000f44 <__gnu_unwind_execute+0x26c>
 8000dfe:	23fc      	movs	r3, #252	; 0xfc
 8000e00:	4003      	ands	r3, r0
 8000e02:	2bb4      	cmp	r3, #180	; 0xb4
 8000e04:	d0a8      	beq.n	8000d58 <__gnu_unwind_execute+0x80>
 8000e06:	4653      	mov	r3, sl
 8000e08:	2280      	movs	r2, #128	; 0x80
 8000e0a:	401c      	ands	r4, r3
 8000e0c:	3401      	adds	r4, #1
 8000e0e:	0312      	lsls	r2, r2, #12
 8000e10:	4322      	orrs	r2, r4
 8000e12:	2301      	movs	r3, #1
 8000e14:	2101      	movs	r1, #1
 8000e16:	0038      	movs	r0, r7
 8000e18:	f7ff fd60 	bl	80008dc <_Unwind_VRS_Pop>
 8000e1c:	2800      	cmp	r0, #0
 8000e1e:	d19b      	bne.n	8000d58 <__gnu_unwind_execute+0x80>
 8000e20:	e76b      	b.n	8000cfa <__gnu_unwind_execute+0x22>
 8000e22:	0204      	lsls	r4, r0, #8
 8000e24:	0030      	movs	r0, r6
 8000e26:	f7ff ff2d 	bl	8000c84 <next_unwind_byte>
 8000e2a:	2580      	movs	r5, #128	; 0x80
 8000e2c:	4320      	orrs	r0, r4
 8000e2e:	022d      	lsls	r5, r5, #8
 8000e30:	42a8      	cmp	r0, r5
 8000e32:	d091      	beq.n	8000d58 <__gnu_unwind_execute+0x80>
 8000e34:	0104      	lsls	r4, r0, #4
 8000e36:	0500      	lsls	r0, r0, #20
 8000e38:	0c02      	lsrs	r2, r0, #16
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	0038      	movs	r0, r7
 8000e40:	f7ff fd4c 	bl	80008dc <_Unwind_VRS_Pop>
 8000e44:	2800      	cmp	r0, #0
 8000e46:	d000      	beq.n	8000e4a <__gnu_unwind_execute+0x172>
 8000e48:	e786      	b.n	8000d58 <__gnu_unwind_execute+0x80>
 8000e4a:	422c      	tst	r4, r5
 8000e4c:	d100      	bne.n	8000e50 <__gnu_unwind_execute+0x178>
 8000e4e:	e754      	b.n	8000cfa <__gnu_unwind_execute+0x22>
 8000e50:	2301      	movs	r3, #1
 8000e52:	9303      	str	r3, [sp, #12]
 8000e54:	e751      	b.n	8000cfa <__gnu_unwind_execute+0x22>
 8000e56:	28c6      	cmp	r0, #198	; 0xc6
 8000e58:	d100      	bne.n	8000e5c <__gnu_unwind_execute+0x184>
 8000e5a:	e07f      	b.n	8000f5c <__gnu_unwind_execute+0x284>
 8000e5c:	28c7      	cmp	r0, #199	; 0xc7
 8000e5e:	d100      	bne.n	8000e62 <__gnu_unwind_execute+0x18a>
 8000e60:	e090      	b.n	8000f84 <__gnu_unwind_execute+0x2ac>
 8000e62:	0003      	movs	r3, r0
 8000e64:	4652      	mov	r2, sl
 8000e66:	4393      	bics	r3, r2
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	2bc0      	cmp	r3, #192	; 0xc0
 8000e6c:	d100      	bne.n	8000e70 <__gnu_unwind_execute+0x198>
 8000e6e:	e09e      	b.n	8000fae <__gnu_unwind_execute+0x2d6>
 8000e70:	28c8      	cmp	r0, #200	; 0xc8
 8000e72:	d100      	bne.n	8000e76 <__gnu_unwind_execute+0x19e>
 8000e74:	e0a2      	b.n	8000fbc <__gnu_unwind_execute+0x2e4>
 8000e76:	28c9      	cmp	r0, #201	; 0xc9
 8000e78:	d000      	beq.n	8000e7c <__gnu_unwind_execute+0x1a4>
 8000e7a:	e76d      	b.n	8000d58 <__gnu_unwind_execute+0x80>
 8000e7c:	0030      	movs	r0, r6
 8000e7e:	f7ff ff01 	bl	8000c84 <next_unwind_byte>
 8000e82:	23f0      	movs	r3, #240	; 0xf0
 8000e84:	0302      	lsls	r2, r0, #12
 8000e86:	031b      	lsls	r3, r3, #12
 8000e88:	401a      	ands	r2, r3
 8000e8a:	464b      	mov	r3, r9
 8000e8c:	4018      	ands	r0, r3
 8000e8e:	3001      	adds	r0, #1
 8000e90:	4302      	orrs	r2, r0
 8000e92:	e75a      	b.n	8000d4a <__gnu_unwind_execute+0x72>
 8000e94:	9b03      	ldr	r3, [sp, #12]
 8000e96:	2400      	movs	r4, #0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d000      	beq.n	8000e9e <__gnu_unwind_execute+0x1c6>
 8000e9c:	e75d      	b.n	8000d5a <__gnu_unwind_execute+0x82>
 8000e9e:	ad05      	add	r5, sp, #20
 8000ea0:	9500      	str	r5, [sp, #0]
 8000ea2:	220e      	movs	r2, #14
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	0038      	movs	r0, r7
 8000ea8:	f7ff fb0a 	bl	80004c0 <_Unwind_VRS_Get>
 8000eac:	9500      	str	r5, [sp, #0]
 8000eae:	2300      	movs	r3, #0
 8000eb0:	220f      	movs	r2, #15
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	0038      	movs	r0, r7
 8000eb6:	f7ff fb29 	bl	800050c <_Unwind_VRS_Set>
 8000eba:	e74e      	b.n	8000d5a <__gnu_unwind_execute+0x82>
 8000ebc:	0030      	movs	r0, r6
 8000ebe:	f7ff fee1 	bl	8000c84 <next_unwind_byte>
 8000ec2:	1e02      	subs	r2, r0, #0
 8000ec4:	d100      	bne.n	8000ec8 <__gnu_unwind_execute+0x1f0>
 8000ec6:	e747      	b.n	8000d58 <__gnu_unwind_execute+0x80>
 8000ec8:	0003      	movs	r3, r0
 8000eca:	4649      	mov	r1, r9
 8000ecc:	438b      	bics	r3, r1
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d000      	beq.n	8000ed6 <__gnu_unwind_execute+0x1fe>
 8000ed4:	e740      	b.n	8000d58 <__gnu_unwind_execute+0x80>
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	0038      	movs	r0, r7
 8000eda:	f7ff fcff 	bl	80008dc <_Unwind_VRS_Pop>
 8000ede:	2800      	cmp	r0, #0
 8000ee0:	d000      	beq.n	8000ee4 <__gnu_unwind_execute+0x20c>
 8000ee2:	e739      	b.n	8000d58 <__gnu_unwind_execute+0x80>
 8000ee4:	e709      	b.n	8000cfa <__gnu_unwind_execute+0x22>
 8000ee6:	ab05      	add	r3, sp, #20
 8000ee8:	220d      	movs	r2, #13
 8000eea:	9300      	str	r3, [sp, #0]
 8000eec:	2100      	movs	r1, #0
 8000eee:	469b      	mov	fp, r3
 8000ef0:	0038      	movs	r0, r7
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	f7ff fae4 	bl	80004c0 <_Unwind_VRS_Get>
 8000ef8:	0030      	movs	r0, r6
 8000efa:	f7ff fec3 	bl	8000c84 <next_unwind_byte>
 8000efe:	4642      	mov	r2, r8
 8000f00:	0003      	movs	r3, r0
 8000f02:	4393      	bics	r3, r2
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d065      	beq.n	8000fd6 <__gnu_unwind_execute+0x2fe>
 8000f0a:	3cb0      	subs	r4, #176	; 0xb0
 8000f0c:	4643      	mov	r3, r8
 8000f0e:	4018      	ands	r0, r3
 8000f10:	9b05      	ldr	r3, [sp, #20]
 8000f12:	40a0      	lsls	r0, r4
 8000f14:	469c      	mov	ip, r3
 8000f16:	4460      	add	r0, ip
 8000f18:	9005      	str	r0, [sp, #20]
 8000f1a:	0030      	movs	r0, r6
 8000f1c:	f7ff feb2 	bl	8000c84 <next_unwind_byte>
 8000f20:	4642      	mov	r2, r8
 8000f22:	0003      	movs	r3, r0
 8000f24:	4393      	bics	r3, r2
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	3407      	adds	r4, #7
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d1ee      	bne.n	8000f0c <__gnu_unwind_execute+0x234>
 8000f2e:	2281      	movs	r2, #129	; 0x81
 8000f30:	0092      	lsls	r2, r2, #2
 8000f32:	4694      	mov	ip, r2
 8000f34:	4642      	mov	r2, r8
 8000f36:	4010      	ands	r0, r2
 8000f38:	40a0      	lsls	r0, r4
 8000f3a:	9b05      	ldr	r3, [sp, #20]
 8000f3c:	4463      	add	r3, ip
 8000f3e:	1818      	adds	r0, r3, r0
 8000f40:	9005      	str	r0, [sp, #20]
 8000f42:	e725      	b.n	8000d90 <__gnu_unwind_execute+0xb8>
 8000f44:	0030      	movs	r0, r6
 8000f46:	f7ff fe9d 	bl	8000c84 <next_unwind_byte>
 8000f4a:	23f0      	movs	r3, #240	; 0xf0
 8000f4c:	0302      	lsls	r2, r0, #12
 8000f4e:	031b      	lsls	r3, r3, #12
 8000f50:	401a      	ands	r2, r3
 8000f52:	464b      	mov	r3, r9
 8000f54:	4018      	ands	r0, r3
 8000f56:	3001      	adds	r0, #1
 8000f58:	4302      	orrs	r2, r0
 8000f5a:	e75a      	b.n	8000e12 <__gnu_unwind_execute+0x13a>
 8000f5c:	0030      	movs	r0, r6
 8000f5e:	f7ff fe91 	bl	8000c84 <next_unwind_byte>
 8000f62:	23f0      	movs	r3, #240	; 0xf0
 8000f64:	0302      	lsls	r2, r0, #12
 8000f66:	031b      	lsls	r3, r3, #12
 8000f68:	401a      	ands	r2, r3
 8000f6a:	464b      	mov	r3, r9
 8000f6c:	4018      	ands	r0, r3
 8000f6e:	3001      	adds	r0, #1
 8000f70:	4302      	orrs	r2, r0
 8000f72:	2303      	movs	r3, #3
 8000f74:	2103      	movs	r1, #3
 8000f76:	0038      	movs	r0, r7
 8000f78:	f7ff fcb0 	bl	80008dc <_Unwind_VRS_Pop>
 8000f7c:	2800      	cmp	r0, #0
 8000f7e:	d000      	beq.n	8000f82 <__gnu_unwind_execute+0x2aa>
 8000f80:	e6ea      	b.n	8000d58 <__gnu_unwind_execute+0x80>
 8000f82:	e6ba      	b.n	8000cfa <__gnu_unwind_execute+0x22>
 8000f84:	0030      	movs	r0, r6
 8000f86:	f7ff fe7d 	bl	8000c84 <next_unwind_byte>
 8000f8a:	1e02      	subs	r2, r0, #0
 8000f8c:	d100      	bne.n	8000f90 <__gnu_unwind_execute+0x2b8>
 8000f8e:	e6e3      	b.n	8000d58 <__gnu_unwind_execute+0x80>
 8000f90:	0003      	movs	r3, r0
 8000f92:	4649      	mov	r1, r9
 8000f94:	438b      	bics	r3, r1
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d000      	beq.n	8000f9e <__gnu_unwind_execute+0x2c6>
 8000f9c:	e6dc      	b.n	8000d58 <__gnu_unwind_execute+0x80>
 8000f9e:	2104      	movs	r1, #4
 8000fa0:	0038      	movs	r0, r7
 8000fa2:	f7ff fc9b 	bl	80008dc <_Unwind_VRS_Pop>
 8000fa6:	2800      	cmp	r0, #0
 8000fa8:	d000      	beq.n	8000fac <__gnu_unwind_execute+0x2d4>
 8000faa:	e6d5      	b.n	8000d58 <__gnu_unwind_execute+0x80>
 8000fac:	e6a5      	b.n	8000cfa <__gnu_unwind_execute+0x22>
 8000fae:	464b      	mov	r3, r9
 8000fb0:	22a0      	movs	r2, #160	; 0xa0
 8000fb2:	401c      	ands	r4, r3
 8000fb4:	3401      	adds	r4, #1
 8000fb6:	0312      	lsls	r2, r2, #12
 8000fb8:	4322      	orrs	r2, r4
 8000fba:	e7da      	b.n	8000f72 <__gnu_unwind_execute+0x29a>
 8000fbc:	0030      	movs	r0, r6
 8000fbe:	f7ff fe61 	bl	8000c84 <next_unwind_byte>
 8000fc2:	464b      	mov	r3, r9
 8000fc4:	0002      	movs	r2, r0
 8000fc6:	439a      	bics	r2, r3
 8000fc8:	b2d2      	uxtb	r2, r2
 8000fca:	3210      	adds	r2, #16
 8000fcc:	4018      	ands	r0, r3
 8000fce:	0312      	lsls	r2, r2, #12
 8000fd0:	3001      	adds	r0, #1
 8000fd2:	4302      	orrs	r2, r0
 8000fd4:	e6b9      	b.n	8000d4a <__gnu_unwind_execute+0x72>
 8000fd6:	2402      	movs	r4, #2
 8000fd8:	e7a9      	b.n	8000f2e <__gnu_unwind_execute+0x256>
 8000fda:	46c0      	nop			; (mov r8, r8)

08000fdc <__gnu_unwind_frame>:
 8000fdc:	0003      	movs	r3, r0
 8000fde:	b500      	push	{lr}
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	685a      	ldr	r2, [r3, #4]
 8000fe6:	0008      	movs	r0, r1
 8000fe8:	0212      	lsls	r2, r2, #8
 8000fea:	9201      	str	r2, [sp, #4]
 8000fec:	001a      	movs	r2, r3
 8000fee:	a901      	add	r1, sp, #4
 8000ff0:	3208      	adds	r2, #8
 8000ff2:	604a      	str	r2, [r1, #4]
 8000ff4:	2203      	movs	r2, #3
 8000ff6:	720a      	strb	r2, [r1, #8]
 8000ff8:	79db      	ldrb	r3, [r3, #7]
 8000ffa:	724b      	strb	r3, [r1, #9]
 8000ffc:	f7ff fe6c 	bl	8000cd8 <__gnu_unwind_execute>
 8001000:	b005      	add	sp, #20
 8001002:	bd00      	pop	{pc}

08001004 <_Unwind_GetRegionStart>:
 8001004:	b510      	push	{r4, lr}
 8001006:	f7ff fe63 	bl	8000cd0 <unwind_UCB_from_context>
 800100a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800100c:	bd10      	pop	{r4, pc}
 800100e:	46c0      	nop			; (mov r8, r8)

08001010 <_Unwind_GetLanguageSpecificData>:
 8001010:	b510      	push	{r4, lr}
 8001012:	f7ff fe5d 	bl	8000cd0 <unwind_UCB_from_context>
 8001016:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8001018:	79d3      	ldrb	r3, [r2, #7]
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	3308      	adds	r3, #8
 800101e:	18d0      	adds	r0, r2, r3
 8001020:	bd10      	pop	{r4, pc}
 8001022:	46c0      	nop			; (mov r8, r8)

08001024 <_Unwind_GetTextRelBase>:
 8001024:	b510      	push	{r4, lr}
 8001026:	f000 fe6a 	bl	8001cfe <abort>
 800102a:	46c0      	nop			; (mov r8, r8)

0800102c <_Unwind_GetDataRelBase>:
 800102c:	b510      	push	{r4, lr}
 800102e:	f7ff fff9 	bl	8001024 <_Unwind_GetTextRelBase>
 8001032:	46c0      	nop			; (mov r8, r8)

08001034 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  uwTick++;
 8001038:	4b03      	ldr	r3, [pc, #12]	; (8001048 <HAL_IncTick+0x14>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	1c5a      	adds	r2, r3, #1
 800103e:	4b02      	ldr	r3, [pc, #8]	; (8001048 <HAL_IncTick+0x14>)
 8001040:	601a      	str	r2, [r3, #0]
}
 8001042:	46c0      	nop			; (mov r8, r8)
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	200000d8 	.word	0x200000d8

0800104c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  return uwTick;
 8001050:	4b02      	ldr	r3, [pc, #8]	; (800105c <HAL_GetTick+0x10>)
 8001052:	681b      	ldr	r3, [r3, #0]
}
 8001054:	0018      	movs	r0, r3
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	46c0      	nop			; (mov r8, r8)
 800105c:	200000d8 	.word	0x200000d8

08001060 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001068:	f7ff fff0 	bl	800104c <HAL_GetTick>
 800106c:	0003      	movs	r3, r0
 800106e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	3301      	adds	r3, #1
 8001078:	d002      	beq.n	8001080 <HAL_Delay+0x20>
  {
     wait++;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	3301      	adds	r3, #1
 800107e:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001080:	46c0      	nop			; (mov r8, r8)
 8001082:	f7ff ffe3 	bl	800104c <HAL_GetTick>
 8001086:	0002      	movs	r2, r0
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	1ad2      	subs	r2, r2, r3
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	429a      	cmp	r2, r3
 8001090:	d3f7      	bcc.n	8001082 <HAL_Delay+0x22>
  {
  }
}
 8001092:	46c0      	nop			; (mov r8, r8)
 8001094:	46bd      	mov	sp, r7
 8001096:	b004      	add	sp, #16
 8001098:	bd80      	pop	{r7, pc}
 800109a:	46c0      	nop			; (mov r8, r8)

0800109c <HAL_CAN_Receive_IT>:
  *         the configuration information for the specified CAN.  
  * @param  FIFONumber:    FIFO number.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Receive_IT(CAN_HandleTypeDef* hcan, uint8_t FIFONumber)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	000a      	movs	r2, r1
 80010a6:	1cfb      	adds	r3, r7, #3
 80010a8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_CAN_FIFO(FIFONumber));

  /* Process locked */
  __HAL_LOCK(hcan);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	223c      	movs	r2, #60	; 0x3c
 80010ae:	5c9b      	ldrb	r3, [r3, r2]
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d101      	bne.n	80010b8 <HAL_CAN_Receive_IT+0x1c>
 80010b4:	2302      	movs	r3, #2
 80010b6:	e0ae      	b.n	8001216 <HAL_CAN_Receive_IT+0x17a>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	223c      	movs	r2, #60	; 0x3c
 80010bc:	2101      	movs	r1, #1
 80010be:	5499      	strb	r1, [r3, r2]

  /* Check if CAN state is not busy for RX FIFO0 */
  if ((FIFONumber == CAN_FIFO0) && ((hcan->State == HAL_CAN_STATE_BUSY_RX0) ||        \
 80010c0:	1cfb      	adds	r3, r7, #3
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d11d      	bne.n	8001104 <HAL_CAN_Receive_IT+0x68>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	223d      	movs	r2, #61	; 0x3d
 80010cc:	5c9b      	ldrb	r3, [r3, r2]
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	2b22      	cmp	r3, #34	; 0x22
 80010d2:	d011      	beq.n	80010f8 <HAL_CAN_Receive_IT+0x5c>
                                    (hcan->State == HAL_CAN_STATE_BUSY_TX_RX0) ||      \
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	223d      	movs	r2, #61	; 0x3d
 80010d8:	5c9b      	ldrb	r3, [r3, r2]
 80010da:	b2db      	uxtb	r3, r3

  /* Process locked */
  __HAL_LOCK(hcan);

  /* Check if CAN state is not busy for RX FIFO0 */
  if ((FIFONumber == CAN_FIFO0) && ((hcan->State == HAL_CAN_STATE_BUSY_RX0) ||        \
 80010dc:	2b42      	cmp	r3, #66	; 0x42
 80010de:	d00b      	beq.n	80010f8 <HAL_CAN_Receive_IT+0x5c>
                                    (hcan->State == HAL_CAN_STATE_BUSY_TX_RX0) ||      \
                                    (hcan->State == HAL_CAN_STATE_BUSY_RX0_RX1) ||     \
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	223d      	movs	r2, #61	; 0x3d
 80010e4:	5c9b      	ldrb	r3, [r3, r2]
 80010e6:	b2db      	uxtb	r3, r3
  /* Process locked */
  __HAL_LOCK(hcan);

  /* Check if CAN state is not busy for RX FIFO0 */
  if ((FIFONumber == CAN_FIFO0) && ((hcan->State == HAL_CAN_STATE_BUSY_RX0) ||        \
                                    (hcan->State == HAL_CAN_STATE_BUSY_TX_RX0) ||      \
 80010e8:	2b62      	cmp	r3, #98	; 0x62
 80010ea:	d005      	beq.n	80010f8 <HAL_CAN_Receive_IT+0x5c>
                                    (hcan->State == HAL_CAN_STATE_BUSY_RX0_RX1) ||     \
                                    (hcan->State == HAL_CAN_STATE_BUSY_TX_RX0_RX1)))
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	223d      	movs	r2, #61	; 0x3d
 80010f0:	5c9b      	ldrb	r3, [r3, r2]
 80010f2:	b2db      	uxtb	r3, r3
  __HAL_LOCK(hcan);

  /* Check if CAN state is not busy for RX FIFO0 */
  if ((FIFONumber == CAN_FIFO0) && ((hcan->State == HAL_CAN_STATE_BUSY_RX0) ||        \
                                    (hcan->State == HAL_CAN_STATE_BUSY_TX_RX0) ||      \
                                    (hcan->State == HAL_CAN_STATE_BUSY_RX0_RX1) ||     \
 80010f4:	2b72      	cmp	r3, #114	; 0x72
 80010f6:	d105      	bne.n	8001104 <HAL_CAN_Receive_IT+0x68>
                                    (hcan->State == HAL_CAN_STATE_BUSY_TX_RX0_RX1)))
  {
    /* Process unlocked */
    __HAL_UNLOCK(hcan);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	223c      	movs	r2, #60	; 0x3c
 80010fc:	2100      	movs	r1, #0
 80010fe:	5499      	strb	r1, [r3, r2]

    return HAL_BUSY;
 8001100:	2302      	movs	r3, #2
 8001102:	e088      	b.n	8001216 <HAL_CAN_Receive_IT+0x17a>
  }

  /* Check if CAN state is not busy for RX FIFO1 */
  if ((FIFONumber == CAN_FIFO1) && ((hcan->State == HAL_CAN_STATE_BUSY_RX1) ||        \
 8001104:	1cfb      	adds	r3, r7, #3
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b01      	cmp	r3, #1
 800110a:	d11d      	bne.n	8001148 <HAL_CAN_Receive_IT+0xac>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	223d      	movs	r2, #61	; 0x3d
 8001110:	5c9b      	ldrb	r3, [r3, r2]
 8001112:	b2db      	uxtb	r3, r3
 8001114:	2b32      	cmp	r3, #50	; 0x32
 8001116:	d011      	beq.n	800113c <HAL_CAN_Receive_IT+0xa0>
                                    (hcan->State == HAL_CAN_STATE_BUSY_TX_RX1) ||      \
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	223d      	movs	r2, #61	; 0x3d
 800111c:	5c9b      	ldrb	r3, [r3, r2]
 800111e:	b2db      	uxtb	r3, r3

    return HAL_BUSY;
  }

  /* Check if CAN state is not busy for RX FIFO1 */
  if ((FIFONumber == CAN_FIFO1) && ((hcan->State == HAL_CAN_STATE_BUSY_RX1) ||        \
 8001120:	2b52      	cmp	r3, #82	; 0x52
 8001122:	d00b      	beq.n	800113c <HAL_CAN_Receive_IT+0xa0>
                                    (hcan->State == HAL_CAN_STATE_BUSY_TX_RX1) ||      \
                                    (hcan->State == HAL_CAN_STATE_BUSY_RX0_RX1) ||     \
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	223d      	movs	r2, #61	; 0x3d
 8001128:	5c9b      	ldrb	r3, [r3, r2]
 800112a:	b2db      	uxtb	r3, r3
    return HAL_BUSY;
  }

  /* Check if CAN state is not busy for RX FIFO1 */
  if ((FIFONumber == CAN_FIFO1) && ((hcan->State == HAL_CAN_STATE_BUSY_RX1) ||        \
                                    (hcan->State == HAL_CAN_STATE_BUSY_TX_RX1) ||      \
 800112c:	2b62      	cmp	r3, #98	; 0x62
 800112e:	d005      	beq.n	800113c <HAL_CAN_Receive_IT+0xa0>
                                    (hcan->State == HAL_CAN_STATE_BUSY_RX0_RX1) ||     \
                                    (hcan->State == HAL_CAN_STATE_BUSY_TX_RX0_RX1)))
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	223d      	movs	r2, #61	; 0x3d
 8001134:	5c9b      	ldrb	r3, [r3, r2]
 8001136:	b2db      	uxtb	r3, r3
  }

  /* Check if CAN state is not busy for RX FIFO1 */
  if ((FIFONumber == CAN_FIFO1) && ((hcan->State == HAL_CAN_STATE_BUSY_RX1) ||        \
                                    (hcan->State == HAL_CAN_STATE_BUSY_TX_RX1) ||      \
                                    (hcan->State == HAL_CAN_STATE_BUSY_RX0_RX1) ||     \
 8001138:	2b72      	cmp	r3, #114	; 0x72
 800113a:	d105      	bne.n	8001148 <HAL_CAN_Receive_IT+0xac>
                                    (hcan->State == HAL_CAN_STATE_BUSY_TX_RX0_RX1)))
  {
    /* Process unlocked */
    __HAL_UNLOCK(hcan);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	223c      	movs	r2, #60	; 0x3c
 8001140:	2100      	movs	r1, #0
 8001142:	5499      	strb	r1, [r3, r2]

    return HAL_BUSY;
 8001144:	2302      	movs	r3, #2
 8001146:	e066      	b.n	8001216 <HAL_CAN_Receive_IT+0x17a>
  }

  /* Change CAN state */
  if (FIFONumber == CAN_FIFO0)
 8001148:	1cfb      	adds	r3, r7, #3
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d11e      	bne.n	800118e <HAL_CAN_Receive_IT+0xf2>
  {
    switch(hcan->State)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	223d      	movs	r2, #61	; 0x3d
 8001154:	5c9b      	ldrb	r3, [r3, r2]
 8001156:	b2db      	uxtb	r3, r3
 8001158:	2b32      	cmp	r3, #50	; 0x32
 800115a:	d008      	beq.n	800116e <HAL_CAN_Receive_IT+0xd2>
 800115c:	2b52      	cmp	r3, #82	; 0x52
 800115e:	d00b      	beq.n	8001178 <HAL_CAN_Receive_IT+0xdc>
 8001160:	2b12      	cmp	r3, #18
 8001162:	d10e      	bne.n	8001182 <HAL_CAN_Receive_IT+0xe6>
    {
      case(HAL_CAN_STATE_BUSY_TX):
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	223d      	movs	r2, #61	; 0x3d
 8001168:	2142      	movs	r1, #66	; 0x42
 800116a:	5499      	strb	r1, [r3, r2]
        break;
 800116c:	e02d      	b.n	80011ca <HAL_CAN_Receive_IT+0x12e>
      case(HAL_CAN_STATE_BUSY_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_RX0_RX1;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	223d      	movs	r2, #61	; 0x3d
 8001172:	2162      	movs	r1, #98	; 0x62
 8001174:	5499      	strb	r1, [r3, r2]
        break;
 8001176:	e028      	b.n	80011ca <HAL_CAN_Receive_IT+0x12e>
      case(HAL_CAN_STATE_BUSY_TX_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0_RX1;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	223d      	movs	r2, #61	; 0x3d
 800117c:	2172      	movs	r1, #114	; 0x72
 800117e:	5499      	strb	r1, [r3, r2]
        break;
 8001180:	e023      	b.n	80011ca <HAL_CAN_Receive_IT+0x12e>
      default: /* HAL_CAN_STATE_READY */
        hcan->State = HAL_CAN_STATE_BUSY_RX0;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	223d      	movs	r2, #61	; 0x3d
 8001186:	2122      	movs	r1, #34	; 0x22
 8001188:	5499      	strb	r1, [r3, r2]
        break;
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	e01d      	b.n	80011ca <HAL_CAN_Receive_IT+0x12e>
    }
  }
  else /* FIFONumber == CAN_FIFO1 */
  {
    switch(hcan->State)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	223d      	movs	r2, #61	; 0x3d
 8001192:	5c9b      	ldrb	r3, [r3, r2]
 8001194:	b2db      	uxtb	r3, r3
 8001196:	2b22      	cmp	r3, #34	; 0x22
 8001198:	d008      	beq.n	80011ac <HAL_CAN_Receive_IT+0x110>
 800119a:	2b42      	cmp	r3, #66	; 0x42
 800119c:	d00b      	beq.n	80011b6 <HAL_CAN_Receive_IT+0x11a>
 800119e:	2b12      	cmp	r3, #18
 80011a0:	d10e      	bne.n	80011c0 <HAL_CAN_Receive_IT+0x124>
    {
      case(HAL_CAN_STATE_BUSY_TX):
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX1;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	223d      	movs	r2, #61	; 0x3d
 80011a6:	2152      	movs	r1, #82	; 0x52
 80011a8:	5499      	strb	r1, [r3, r2]
        break;
 80011aa:	e00e      	b.n	80011ca <HAL_CAN_Receive_IT+0x12e>
      case(HAL_CAN_STATE_BUSY_RX0):
        hcan->State = HAL_CAN_STATE_BUSY_RX0_RX1;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	223d      	movs	r2, #61	; 0x3d
 80011b0:	2162      	movs	r1, #98	; 0x62
 80011b2:	5499      	strb	r1, [r3, r2]
        break;
 80011b4:	e009      	b.n	80011ca <HAL_CAN_Receive_IT+0x12e>
      case(HAL_CAN_STATE_BUSY_TX_RX0):
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0_RX1;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	223d      	movs	r2, #61	; 0x3d
 80011ba:	2172      	movs	r1, #114	; 0x72
 80011bc:	5499      	strb	r1, [r3, r2]
        break;
 80011be:	e004      	b.n	80011ca <HAL_CAN_Receive_IT+0x12e>
      default: /* HAL_CAN_STATE_READY */
        hcan->State = HAL_CAN_STATE_BUSY_RX1;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	223d      	movs	r2, #61	; 0x3d
 80011c4:	2132      	movs	r1, #50	; 0x32
 80011c6:	5499      	strb	r1, [r3, r2]
        break;
 80011c8:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Set CAN error code to none */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	641a      	str	r2, [r3, #64]	; 0x40
  /*  - Enable Error warning Interrupt */
  /*  - Enable Error passive Interrupt */
  /*  - Enable Bus-off Interrupt */
  /*  - Enable Last error code Interrupt */
  /*  - Enable Error Interrupt */
  __HAL_CAN_ENABLE_IT(hcan, CAN_IT_EWG |
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	6812      	ldr	r2, [r2, #0]
 80011d8:	6952      	ldr	r2, [r2, #20]
 80011da:	218f      	movs	r1, #143	; 0x8f
 80011dc:	0209      	lsls	r1, r1, #8
 80011de:	430a      	orrs	r2, r1
 80011e0:	615a      	str	r2, [r3, #20]
                            CAN_IT_BOF |
                            CAN_IT_LEC |
                            CAN_IT_ERR);

  /* Process unlocked */
  __HAL_UNLOCK(hcan);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	223c      	movs	r2, #60	; 0x3c
 80011e6:	2100      	movs	r1, #0
 80011e8:	5499      	strb	r1, [r3, r2]

  if(FIFONumber == CAN_FIFO0)
 80011ea:	1cfb      	adds	r3, r7, #3
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d108      	bne.n	8001204 <HAL_CAN_Receive_IT+0x168>
  {
    /* Enable FIFO 0 overrun and message pending Interrupt */
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FOV0 | CAN_IT_FMP0);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	6812      	ldr	r2, [r2, #0]
 80011fa:	6952      	ldr	r2, [r2, #20]
 80011fc:	210a      	movs	r1, #10
 80011fe:	430a      	orrs	r2, r1
 8001200:	615a      	str	r2, [r3, #20]
 8001202:	e007      	b.n	8001214 <HAL_CAN_Receive_IT+0x178>
  }
  else
  {
    /* Enable FIFO 1 overrun and message pending Interrupt */
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FOV1 | CAN_IT_FMP1);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	687a      	ldr	r2, [r7, #4]
 800120a:	6812      	ldr	r2, [r2, #0]
 800120c:	6952      	ldr	r2, [r2, #20]
 800120e:	2150      	movs	r1, #80	; 0x50
 8001210:	430a      	orrs	r2, r1
 8001212:	615a      	str	r2, [r3, #20]
  }
  
  /* Return function status */
  return HAL_OK;
 8001214:	2300      	movs	r3, #0
}
 8001216:	0018      	movs	r0, r3
 8001218:	46bd      	mov	sp, r7
 800121a:	b002      	add	sp, #8
 800121c:	bd80      	pop	{r7, pc}
 800121e:	46c0      	nop			; (mov r8, r8)

08001220 <HAL_CAN_IRQHandler>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef* hcan)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001228:	2300      	movs	r3, #0
 800122a:	60fb      	str	r3, [r7, #12]

  /* Check Overrun flag for FIFO0 */
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_FOV0))    &&
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	2210      	movs	r2, #16
 8001234:	4013      	ands	r3, r2
 8001236:	d00e      	beq.n	8001256 <HAL_CAN_IRQHandler+0x36>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FOV0)))
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	695b      	ldr	r3, [r3, #20]
 800123e:	2208      	movs	r2, #8
 8001240:	4013      	ands	r3, r2
void HAL_CAN_IRQHandler(CAN_HandleTypeDef* hcan)
{
  uint32_t errorcode = HAL_CAN_ERROR_NONE;

  /* Check Overrun flag for FIFO0 */
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_FOV0))    &&
 8001242:	d008      	beq.n	8001256 <HAL_CAN_IRQHandler+0x36>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FOV0)))
  {
    /* Set CAN error code to FOV0 error */
    errorcode |= HAL_CAN_ERROR_FOV0;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	2280      	movs	r2, #128	; 0x80
 8001248:	0092      	lsls	r2, r2, #2
 800124a:	4313      	orrs	r3, r2
 800124c:	60fb      	str	r3, [r7, #12]

    /* Clear FIFO0 Overrun Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2210      	movs	r2, #16
 8001254:	60da      	str	r2, [r3, #12]
  }

  /* Check Overrun flag for FIFO1 */
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_FOV1))    &&
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	691b      	ldr	r3, [r3, #16]
 800125c:	2210      	movs	r2, #16
 800125e:	4013      	ands	r3, r2
 8001260:	d00e      	beq.n	8001280 <HAL_CAN_IRQHandler+0x60>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FOV1)))
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	695b      	ldr	r3, [r3, #20]
 8001268:	2240      	movs	r2, #64	; 0x40
 800126a:	4013      	ands	r3, r2
    /* Clear FIFO0 Overrun Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
  }

  /* Check Overrun flag for FIFO1 */
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_FOV1))    &&
 800126c:	d008      	beq.n	8001280 <HAL_CAN_IRQHandler+0x60>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FOV1)))
  {
    /* Set CAN error code to FOV1 error */
    errorcode |= HAL_CAN_ERROR_FOV1;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	2280      	movs	r2, #128	; 0x80
 8001272:	00d2      	lsls	r2, r2, #3
 8001274:	4313      	orrs	r3, r2
 8001276:	60fb      	str	r3, [r7, #12]

    /* Clear FIFO1 Overrun Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2210      	movs	r2, #16
 800127e:	611a      	str	r2, [r3, #16]
  }

  /* Check End of transmission flag */
  if(__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_TME))
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	695b      	ldr	r3, [r3, #20]
 8001286:	2201      	movs	r2, #1
 8001288:	4013      	ands	r3, r2
 800128a:	d03d      	beq.n	8001308 <HAL_CAN_IRQHandler+0xe8>
  {
    /* Check Transmit request completion status */
    if((__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_0)) ||
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	4a96      	ldr	r2, [pc, #600]	; (80014ec <HAL_CAN_IRQHandler+0x2cc>)
 8001294:	4013      	ands	r3, r2
 8001296:	4a95      	ldr	r2, [pc, #596]	; (80014ec <HAL_CAN_IRQHandler+0x2cc>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d00f      	beq.n	80012bc <HAL_CAN_IRQHandler+0x9c>
       (__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_1)) ||
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	4a93      	ldr	r2, [pc, #588]	; (80014f0 <HAL_CAN_IRQHandler+0x2d0>)
 80012a4:	4013      	ands	r3, r2

  /* Check End of transmission flag */
  if(__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_TME))
  {
    /* Check Transmit request completion status */
    if((__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_0)) ||
 80012a6:	4a92      	ldr	r2, [pc, #584]	; (80014f0 <HAL_CAN_IRQHandler+0x2d0>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d007      	beq.n	80012bc <HAL_CAN_IRQHandler+0x9c>
       (__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_1)) ||
       (__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_2)))
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	4a90      	ldr	r2, [pc, #576]	; (80014f4 <HAL_CAN_IRQHandler+0x2d4>)
 80012b4:	4013      	ands	r3, r2
  /* Check End of transmission flag */
  if(__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_TME))
  {
    /* Check Transmit request completion status */
    if((__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_0)) ||
       (__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_1)) ||
 80012b6:	4a8f      	ldr	r2, [pc, #572]	; (80014f4 <HAL_CAN_IRQHandler+0x2d4>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d125      	bne.n	8001308 <HAL_CAN_IRQHandler+0xe8>
       (__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_2)))
    {
      /* Check Transmit success */
      if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_TXOK0)) ||
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	2202      	movs	r2, #2
 80012c4:	4013      	ands	r3, r2
 80012c6:	d10d      	bne.n	80012e4 <HAL_CAN_IRQHandler+0xc4>
         (__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_TXOK1)) ||
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	689a      	ldr	r2, [r3, #8]
 80012ce:	2380      	movs	r3, #128	; 0x80
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	4013      	ands	r3, r2
    if((__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_0)) ||
       (__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_1)) ||
       (__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_2)))
    {
      /* Check Transmit success */
      if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_TXOK0)) ||
 80012d4:	d106      	bne.n	80012e4 <HAL_CAN_IRQHandler+0xc4>
         (__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_TXOK1)) ||
         (__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_TXOK2)))
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	689a      	ldr	r2, [r3, #8]
 80012dc:	2380      	movs	r3, #128	; 0x80
 80012de:	029b      	lsls	r3, r3, #10
 80012e0:	4013      	ands	r3, r2
       (__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_1)) ||
       (__HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_2)))
    {
      /* Check Transmit success */
      if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_TXOK0)) ||
         (__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_TXOK1)) ||
 80012e2:	d004      	beq.n	80012ee <HAL_CAN_IRQHandler+0xce>
         (__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_TXOK2)))
      {
        /* Call transmit function */
        CAN_Transmit_IT(hcan);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	0018      	movs	r0, r3
 80012e8:	f000 f91a 	bl	8001520 <CAN_Transmit_IT>
 80012ec:	e004      	b.n	80012f8 <HAL_CAN_IRQHandler+0xd8>
      }
      else /* Transmit failure */
      {
        /* Set CAN error code to TXFAIL error */
        errorcode |= HAL_CAN_ERROR_TXFAIL;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	2280      	movs	r2, #128	; 0x80
 80012f2:	0112      	lsls	r2, r2, #4
 80012f4:	4313      	orrs	r3, r2
 80012f6:	60fb      	str	r3, [r7, #12]
      }

      /* Clear transmission status flags (RQCPx and TXOKx) */
      SET_BIT(hcan->Instance->TSR, CAN_TSR_RQCP0  | CAN_TSR_RQCP1  | CAN_TSR_RQCP2 | \
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	6812      	ldr	r2, [r2, #0]
 8001300:	6892      	ldr	r2, [r2, #8]
 8001302:	497d      	ldr	r1, [pc, #500]	; (80014f8 <HAL_CAN_IRQHandler+0x2d8>)
 8001304:	430a      	orrs	r2, r1
 8001306:	609a      	str	r2, [r3, #8]
                                   CAN_FLAG_TXOK0 | CAN_FLAG_TXOK1 | CAN_FLAG_TXOK2);
    }
  }
  
  /* Check End of reception flag for FIFO0 */
  if((__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP0)) &&
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	695b      	ldr	r3, [r3, #20]
 800130e:	2202      	movs	r2, #2
 8001310:	4013      	ands	r3, r2
 8001312:	d00a      	beq.n	800132a <HAL_CAN_IRQHandler+0x10a>
     (__HAL_CAN_MSG_PENDING(hcan, CAN_FIFO0) != 0U))
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	68db      	ldr	r3, [r3, #12]
 800131a:	2203      	movs	r2, #3
 800131c:	4013      	ands	r3, r2
                                   CAN_FLAG_TXOK0 | CAN_FLAG_TXOK1 | CAN_FLAG_TXOK2);
    }
  }
  
  /* Check End of reception flag for FIFO0 */
  if((__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP0)) &&
 800131e:	d004      	beq.n	800132a <HAL_CAN_IRQHandler+0x10a>
     (__HAL_CAN_MSG_PENDING(hcan, CAN_FIFO0) != 0U))
  {
    /* Call receive function */
    CAN_Receive_IT(hcan, CAN_FIFO0);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2100      	movs	r1, #0
 8001324:	0018      	movs	r0, r3
 8001326:	f000 f93f 	bl	80015a8 <CAN_Receive_IT>
  }
  
  /* Check End of reception flag for FIFO1 */
  if((__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP1)) &&
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	695b      	ldr	r3, [r3, #20]
 8001330:	2210      	movs	r2, #16
 8001332:	4013      	ands	r3, r2
 8001334:	d00a      	beq.n	800134c <HAL_CAN_IRQHandler+0x12c>
     (__HAL_CAN_MSG_PENDING(hcan, CAN_FIFO1) != 0U))
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	691b      	ldr	r3, [r3, #16]
 800133c:	2203      	movs	r2, #3
 800133e:	4013      	ands	r3, r2
    /* Call receive function */
    CAN_Receive_IT(hcan, CAN_FIFO0);
  }
  
  /* Check End of reception flag for FIFO1 */
  if((__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP1)) &&
 8001340:	d004      	beq.n	800134c <HAL_CAN_IRQHandler+0x12c>
     (__HAL_CAN_MSG_PENDING(hcan, CAN_FIFO1) != 0U))
  {
    /* Call receive function */
    CAN_Receive_IT(hcan, CAN_FIFO1);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2101      	movs	r1, #1
 8001346:	0018      	movs	r0, r3
 8001348:	f000 f92e 	bl	80015a8 <CAN_Receive_IT>
  }
  
  /* Set error code in handle */
  hcan->ErrorCode |= errorcode;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	431a      	orrs	r2, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	641a      	str	r2, [r3, #64]	; 0x40

  /* Check Error Warning Flag */
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EWG))    &&
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	699b      	ldr	r3, [r3, #24]
 800135e:	2201      	movs	r2, #1
 8001360:	4013      	ands	r3, r2
 8001362:	d013      	beq.n	800138c <HAL_CAN_IRQHandler+0x16c>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EWG)) &&
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	695a      	ldr	r2, [r3, #20]
 800136a:	2380      	movs	r3, #128	; 0x80
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	4013      	ands	r3, r2
  
  /* Set error code in handle */
  hcan->ErrorCode |= errorcode;

  /* Check Error Warning Flag */
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EWG))    &&
 8001370:	d00c      	beq.n	800138c <HAL_CAN_IRQHandler+0x16c>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EWG)) &&
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	695a      	ldr	r2, [r3, #20]
 8001378:	2380      	movs	r3, #128	; 0x80
 800137a:	021b      	lsls	r3, r3, #8
 800137c:	4013      	ands	r3, r2
  /* Set error code in handle */
  hcan->ErrorCode |= errorcode;

  /* Check Error Warning Flag */
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EWG))    &&
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EWG)) &&
 800137e:	d005      	beq.n	800138c <HAL_CAN_IRQHandler+0x16c>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
  {
    /* Set CAN error code to EWG error */
    hcan->ErrorCode |= HAL_CAN_ERROR_EWG;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001384:	2201      	movs	r2, #1
 8001386:	431a      	orrs	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	641a      	str	r2, [r3, #64]	; 0x40
    /* No need for clear of Error Warning Flag as read-only */
  }
  
  /* Check Error Passive Flag */
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EPV))    &&
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	699b      	ldr	r3, [r3, #24]
 8001392:	2202      	movs	r2, #2
 8001394:	4013      	ands	r3, r2
 8001396:	d013      	beq.n	80013c0 <HAL_CAN_IRQHandler+0x1a0>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EPV)) &&
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	695a      	ldr	r2, [r3, #20]
 800139e:	2380      	movs	r3, #128	; 0x80
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	4013      	ands	r3, r2
    hcan->ErrorCode |= HAL_CAN_ERROR_EWG;
    /* No need for clear of Error Warning Flag as read-only */
  }
  
  /* Check Error Passive Flag */
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EPV))    &&
 80013a4:	d00c      	beq.n	80013c0 <HAL_CAN_IRQHandler+0x1a0>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EPV)) &&
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	695a      	ldr	r2, [r3, #20]
 80013ac:	2380      	movs	r3, #128	; 0x80
 80013ae:	021b      	lsls	r3, r3, #8
 80013b0:	4013      	ands	r3, r2
    /* No need for clear of Error Warning Flag as read-only */
  }
  
  /* Check Error Passive Flag */
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EPV))    &&
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EPV)) &&
 80013b2:	d005      	beq.n	80013c0 <HAL_CAN_IRQHandler+0x1a0>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
  {
    /* Set CAN error code to EPV error */
    hcan->ErrorCode |= HAL_CAN_ERROR_EPV;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b8:	2202      	movs	r2, #2
 80013ba:	431a      	orrs	r2, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	641a      	str	r2, [r3, #64]	; 0x40
    /* No need for clear of Error Passive Flag as read-only */ 
  }
  
  /* Check Bus-Off Flag */
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_BOF))    &&
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	699b      	ldr	r3, [r3, #24]
 80013c6:	2204      	movs	r2, #4
 80013c8:	4013      	ands	r3, r2
 80013ca:	d013      	beq.n	80013f4 <HAL_CAN_IRQHandler+0x1d4>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_BOF)) &&
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	695a      	ldr	r2, [r3, #20]
 80013d2:	2380      	movs	r3, #128	; 0x80
 80013d4:	00db      	lsls	r3, r3, #3
 80013d6:	4013      	ands	r3, r2
    hcan->ErrorCode |= HAL_CAN_ERROR_EPV;
    /* No need for clear of Error Passive Flag as read-only */ 
  }
  
  /* Check Bus-Off Flag */
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_BOF))    &&
 80013d8:	d00c      	beq.n	80013f4 <HAL_CAN_IRQHandler+0x1d4>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_BOF)) &&
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	695a      	ldr	r2, [r3, #20]
 80013e0:	2380      	movs	r3, #128	; 0x80
 80013e2:	021b      	lsls	r3, r3, #8
 80013e4:	4013      	ands	r3, r2
    /* No need for clear of Error Passive Flag as read-only */ 
  }
  
  /* Check Bus-Off Flag */
  if((__HAL_CAN_GET_FLAG(hcan, CAN_FLAG_BOF))    &&
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_BOF)) &&
 80013e6:	d005      	beq.n	80013f4 <HAL_CAN_IRQHandler+0x1d4>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
  {
    /* Set CAN error code to BOF error */
    hcan->ErrorCode |= HAL_CAN_ERROR_BOF;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ec:	2204      	movs	r2, #4
 80013ee:	431a      	orrs	r2, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	641a      	str	r2, [r3, #64]	; 0x40
    /* No need for clear of Bus-Off Flag as read-only */
  }
  
  /* Check Last error code Flag */
  if((!HAL_IS_BIT_CLR(hcan->Instance->ESR, CAN_ESR_LEC)) &&
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	699b      	ldr	r3, [r3, #24]
 80013fa:	2270      	movs	r2, #112	; 0x70
 80013fc:	4013      	ands	r3, r2
 80013fe:	d054      	beq.n	80014aa <HAL_CAN_IRQHandler+0x28a>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_LEC))         &&
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	695a      	ldr	r2, [r3, #20]
 8001406:	2380      	movs	r3, #128	; 0x80
 8001408:	011b      	lsls	r3, r3, #4
 800140a:	4013      	ands	r3, r2
    hcan->ErrorCode |= HAL_CAN_ERROR_BOF;
    /* No need for clear of Bus-Off Flag as read-only */
  }
  
  /* Check Last error code Flag */
  if((!HAL_IS_BIT_CLR(hcan->Instance->ESR, CAN_ESR_LEC)) &&
 800140c:	d04d      	beq.n	80014aa <HAL_CAN_IRQHandler+0x28a>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_LEC))         &&
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	695a      	ldr	r2, [r3, #20]
 8001414:	2380      	movs	r3, #128	; 0x80
 8001416:	021b      	lsls	r3, r3, #8
 8001418:	4013      	ands	r3, r2
    /* No need for clear of Bus-Off Flag as read-only */
  }
  
  /* Check Last error code Flag */
  if((!HAL_IS_BIT_CLR(hcan->Instance->ESR, CAN_ESR_LEC)) &&
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_LEC))         &&
 800141a:	d046      	beq.n	80014aa <HAL_CAN_IRQHandler+0x28a>
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
  {
    switch(hcan->Instance->ESR & CAN_ESR_LEC)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	699b      	ldr	r3, [r3, #24]
 8001422:	2270      	movs	r2, #112	; 0x70
 8001424:	4013      	ands	r3, r2
 8001426:	2b30      	cmp	r3, #48	; 0x30
 8001428:	d01a      	beq.n	8001460 <HAL_CAN_IRQHandler+0x240>
 800142a:	d804      	bhi.n	8001436 <HAL_CAN_IRQHandler+0x216>
 800142c:	2b10      	cmp	r3, #16
 800142e:	d009      	beq.n	8001444 <HAL_CAN_IRQHandler+0x224>
 8001430:	2b20      	cmp	r3, #32
 8001432:	d00e      	beq.n	8001452 <HAL_CAN_IRQHandler+0x232>
      case(CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
          /* Set CAN error code to CRC error */
          hcan->ErrorCode |= HAL_CAN_ERROR_CRC;
          break;
      default:
          break;
 8001434:	e031      	b.n	800149a <HAL_CAN_IRQHandler+0x27a>
  /* Check Last error code Flag */
  if((!HAL_IS_BIT_CLR(hcan->Instance->ESR, CAN_ESR_LEC)) &&
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_LEC))         &&
     (__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR)))
  {
    switch(hcan->Instance->ESR & CAN_ESR_LEC)
 8001436:	2b50      	cmp	r3, #80	; 0x50
 8001438:	d020      	beq.n	800147c <HAL_CAN_IRQHandler+0x25c>
 800143a:	2b60      	cmp	r3, #96	; 0x60
 800143c:	d025      	beq.n	800148a <HAL_CAN_IRQHandler+0x26a>
 800143e:	2b40      	cmp	r3, #64	; 0x40
 8001440:	d015      	beq.n	800146e <HAL_CAN_IRQHandler+0x24e>
      case(CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
          /* Set CAN error code to CRC error */
          hcan->ErrorCode |= HAL_CAN_ERROR_CRC;
          break;
      default:
          break;
 8001442:	e02a      	b.n	800149a <HAL_CAN_IRQHandler+0x27a>
  {
    switch(hcan->Instance->ESR & CAN_ESR_LEC)
    {
      case(CAN_ESR_LEC_0):
          /* Set CAN error code to STF error */
          hcan->ErrorCode |= HAL_CAN_ERROR_STF;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001448:	2208      	movs	r2, #8
 800144a:	431a      	orrs	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 8001450:	e023      	b.n	800149a <HAL_CAN_IRQHandler+0x27a>
      case(CAN_ESR_LEC_1):
          /* Set CAN error code to FOR error */
          hcan->ErrorCode |= HAL_CAN_ERROR_FOR;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	2210      	movs	r2, #16
 8001458:	431a      	orrs	r2, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 800145e:	e01c      	b.n	800149a <HAL_CAN_IRQHandler+0x27a>
      case(CAN_ESR_LEC_1 | CAN_ESR_LEC_0):
          /* Set CAN error code to ACK error */
          hcan->ErrorCode |= HAL_CAN_ERROR_ACK;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001464:	2220      	movs	r2, #32
 8001466:	431a      	orrs	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 800146c:	e015      	b.n	800149a <HAL_CAN_IRQHandler+0x27a>
      case(CAN_ESR_LEC_2):
          /* Set CAN error code to BR error */
          hcan->ErrorCode |= HAL_CAN_ERROR_BR;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	2240      	movs	r2, #64	; 0x40
 8001474:	431a      	orrs	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 800147a:	e00e      	b.n	800149a <HAL_CAN_IRQHandler+0x27a>
      case(CAN_ESR_LEC_2 | CAN_ESR_LEC_0):
          /* Set CAN error code to BD error */
          hcan->ErrorCode |= HAL_CAN_ERROR_BD;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001480:	2280      	movs	r2, #128	; 0x80
 8001482:	431a      	orrs	r2, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 8001488:	e007      	b.n	800149a <HAL_CAN_IRQHandler+0x27a>
      case(CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
          /* Set CAN error code to CRC error */
          hcan->ErrorCode |= HAL_CAN_ERROR_CRC;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148e:	2280      	movs	r2, #128	; 0x80
 8001490:	0052      	lsls	r2, r2, #1
 8001492:	431a      	orrs	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 8001498:	46c0      	nop			; (mov r8, r8)
      default:
          break;
    }

    /* Clear Last error code Flag */ 
    CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	6812      	ldr	r2, [r2, #0]
 80014a2:	6992      	ldr	r2, [r2, #24]
 80014a4:	2170      	movs	r1, #112	; 0x70
 80014a6:	438a      	bics	r2, r1
 80014a8:	619a      	str	r2, [r3, #24]
  }

  /* Call the Error call Back in case of Errors */
  if(hcan->ErrorCode != HAL_CAN_ERROR_NONE)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d017      	beq.n	80014e2 <HAL_CAN_IRQHandler+0x2c2>
  {
    /* Clear ERRI Flag */ 
    SET_BIT(hcan->Instance->MSR, CAN_MSR_ERRI);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	6812      	ldr	r2, [r2, #0]
 80014ba:	6852      	ldr	r2, [r2, #4]
 80014bc:	2104      	movs	r1, #4
 80014be:	430a      	orrs	r2, r1
 80014c0:	605a      	str	r2, [r3, #4]

    /* Set the CAN state ready to be able to start again the process */
    hcan->State = HAL_CAN_STATE_READY;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	223d      	movs	r2, #61	; 0x3d
 80014c6:	2101      	movs	r1, #1
 80014c8:	5499      	strb	r1, [r3, r2]
    /*  - Disable FIFO 0 message pending Interrupt */
    /*  - Disable FIFO 0 Overrun Interrupt */
    /*  - Disable FIFO 1 message pending Interrupt */
    /*  - Disable FIFO 1 Overrun Interrupt */
    /*  - Disable Transmit mailbox empty Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG |
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	6812      	ldr	r2, [r2, #0]
 80014d2:	6952      	ldr	r2, [r2, #20]
 80014d4:	4909      	ldr	r1, [pc, #36]	; (80014fc <HAL_CAN_IRQHandler+0x2dc>)
 80014d6:	400a      	ands	r2, r1
 80014d8:	615a      	str	r2, [r3, #20]
                               CAN_IT_FMP1|
                               CAN_IT_FOV1|
                               CAN_IT_TME  );

    /* Call Error callback function */
    HAL_CAN_ErrorCallback(hcan);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	0018      	movs	r0, r3
 80014de:	f000 f817 	bl	8001510 <HAL_CAN_ErrorCallback>
  }  
}
 80014e2:	46c0      	nop			; (mov r8, r8)
 80014e4:	46bd      	mov	sp, r7
 80014e6:	b004      	add	sp, #16
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	46c0      	nop			; (mov r8, r8)
 80014ec:	04000001 	.word	0x04000001
 80014f0:	08000100 	.word	0x08000100
 80014f4:	10010000 	.word	0x10010000
 80014f8:	00010519 	.word	0x00010519
 80014fc:	ffff70a4 	.word	0xffff70a4

08001500 <HAL_CAN_TxCpltCallback>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxCpltCallback(CAN_HandleTypeDef* hcan)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxCpltCallback could be implemented in the user file
   */
}
 8001508:	46c0      	nop			; (mov r8, r8)
 800150a:	46bd      	mov	sp, r7
 800150c:	b002      	add	sp, #8
 800150e:	bd80      	pop	{r7, pc}

08001510 <HAL_CAN_ErrorCallback>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001518:	46c0      	nop			; (mov r8, r8)
 800151a:	46bd      	mov	sp, r7
 800151c:	b002      	add	sp, #8
 800151e:	bd80      	pop	{r7, pc}

08001520 <CAN_Transmit_IT>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.  
  * @retval HAL status
  */
static HAL_StatusTypeDef CAN_Transmit_IT(CAN_HandleTypeDef* hcan)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  /* Disable Transmit mailbox empty Interrupt */
  __HAL_CAN_DISABLE_IT(hcan, CAN_IT_TME);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	6812      	ldr	r2, [r2, #0]
 8001530:	6952      	ldr	r2, [r2, #20]
 8001532:	2101      	movs	r1, #1
 8001534:	438a      	bics	r2, r1
 8001536:	615a      	str	r2, [r3, #20]
  
  if(hcan->State == HAL_CAN_STATE_BUSY_TX)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	223d      	movs	r2, #61	; 0x3d
 800153c:	5c9b      	ldrb	r3, [r3, r2]
 800153e:	b2db      	uxtb	r3, r3
 8001540:	2b12      	cmp	r3, #18
 8001542:	d107      	bne.n	8001554 <CAN_Transmit_IT+0x34>
    /*  - Disable Error warning Interrupt */
    /*  - Disable Error passive Interrupt */
    /*  - Disable Bus-off Interrupt */
    /*  - Disable Last error code Interrupt */
    /*  - Disable Error Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG |
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	6812      	ldr	r2, [r2, #0]
 800154c:	6952      	ldr	r2, [r2, #20]
 800154e:	4915      	ldr	r1, [pc, #84]	; (80015a4 <CAN_Transmit_IT+0x84>)
 8001550:	400a      	ands	r2, r1
 8001552:	615a      	str	r2, [r3, #20]
                               CAN_IT_LEC |
                               CAN_IT_ERR );
  }

  /* Change CAN state */
  switch(hcan->State)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	223d      	movs	r2, #61	; 0x3d
 8001558:	5c9b      	ldrb	r3, [r3, r2]
 800155a:	b2db      	uxtb	r3, r3
 800155c:	2b52      	cmp	r3, #82	; 0x52
 800155e:	d008      	beq.n	8001572 <CAN_Transmit_IT+0x52>
 8001560:	2b72      	cmp	r3, #114	; 0x72
 8001562:	d00b      	beq.n	800157c <CAN_Transmit_IT+0x5c>
 8001564:	2b42      	cmp	r3, #66	; 0x42
 8001566:	d10e      	bne.n	8001586 <CAN_Transmit_IT+0x66>
  {
    case(HAL_CAN_STATE_BUSY_TX_RX0):
      hcan->State = HAL_CAN_STATE_BUSY_RX0;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	223d      	movs	r2, #61	; 0x3d
 800156c:	2122      	movs	r1, #34	; 0x22
 800156e:	5499      	strb	r1, [r3, r2]
      break;
 8001570:	e00e      	b.n	8001590 <CAN_Transmit_IT+0x70>
    case(HAL_CAN_STATE_BUSY_TX_RX1):
      hcan->State = HAL_CAN_STATE_BUSY_RX1;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	223d      	movs	r2, #61	; 0x3d
 8001576:	2132      	movs	r1, #50	; 0x32
 8001578:	5499      	strb	r1, [r3, r2]
      break;
 800157a:	e009      	b.n	8001590 <CAN_Transmit_IT+0x70>
    case(HAL_CAN_STATE_BUSY_TX_RX0_RX1):
      hcan->State = HAL_CAN_STATE_BUSY_RX0_RX1;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	223d      	movs	r2, #61	; 0x3d
 8001580:	2162      	movs	r1, #98	; 0x62
 8001582:	5499      	strb	r1, [r3, r2]
      break;
 8001584:	e004      	b.n	8001590 <CAN_Transmit_IT+0x70>
    default: /* HAL_CAN_STATE_BUSY_TX */
      hcan->State = HAL_CAN_STATE_READY;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	223d      	movs	r2, #61	; 0x3d
 800158a:	2101      	movs	r1, #1
 800158c:	5499      	strb	r1, [r3, r2]
      break;
 800158e:	46c0      	nop			; (mov r8, r8)
  }

  /* Transmission complete callback */ 
  HAL_CAN_TxCpltCallback(hcan);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	0018      	movs	r0, r3
 8001594:	f7ff ffb4 	bl	8001500 <HAL_CAN_TxCpltCallback>
  
  return HAL_OK;
 8001598:	2300      	movs	r3, #0
}
 800159a:	0018      	movs	r0, r3
 800159c:	46bd      	mov	sp, r7
 800159e:	b002      	add	sp, #8
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	46c0      	nop			; (mov r8, r8)
 80015a4:	ffff70ff 	.word	0xffff70ff

080015a8 <CAN_Receive_IT>:
  * @param  FIFONumber: Specify the FIFO number    
  * @retval HAL status
  * @retval None
  */
static HAL_StatusTypeDef CAN_Receive_IT(CAN_HandleTypeDef* hcan, uint8_t FIFONumber)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	000a      	movs	r2, r1
 80015b2:	1cfb      	adds	r3, r7, #3
 80015b4:	701a      	strb	r2, [r3, #0]
  CanRxMsgTypeDef* pRxMsg = NULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	60fb      	str	r3, [r7, #12]

  /* Set RxMsg pointer */
  if(FIFONumber == CAN_FIFO0)
 80015ba:	1cfb      	adds	r3, r7, #3
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d103      	bne.n	80015ca <CAN_Receive_IT+0x22>
  {
    pRxMsg = hcan->pRxMsg;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	e002      	b.n	80015d0 <CAN_Receive_IT+0x28>
  }
  else /* FIFONumber == CAN_FIFO1 */
  {
    pRxMsg = hcan->pRx1Msg;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015ce:	60fb      	str	r3, [r7, #12]
  }

  /* Get the Id */
  pRxMsg->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	1cfa      	adds	r2, r7, #3
 80015d6:	7812      	ldrb	r2, [r2, #0]
 80015d8:	321b      	adds	r2, #27
 80015da:	0112      	lsls	r2, r2, #4
 80015dc:	58d3      	ldr	r3, [r2, r3]
 80015de:	2204      	movs	r2, #4
 80015e0:	401a      	ands	r2, r3
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	609a      	str	r2, [r3, #8]
  if (pRxMsg->IDE == CAN_ID_STD)
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d10c      	bne.n	8001608 <CAN_Receive_IT+0x60>
  {
    pRxMsg->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[FIFONumber].RIR) >> CAN_TI0R_STID_Pos;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	1cfa      	adds	r2, r7, #3
 80015f4:	7812      	ldrb	r2, [r2, #0]
 80015f6:	321b      	adds	r2, #27
 80015f8:	0112      	lsls	r2, r2, #4
 80015fa:	58d3      	ldr	r3, [r2, r3]
 80015fc:	0d5b      	lsrs	r3, r3, #21
 80015fe:	055b      	lsls	r3, r3, #21
 8001600:	0d5a      	lsrs	r2, r3, #21
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	e00b      	b.n	8001620 <CAN_Receive_IT+0x78>
  }
  else
  {
    pRxMsg->ExtId = (0xFFFFFFF8U & hcan->Instance->sFIFOMailBox[FIFONumber].RIR) >> CAN_RI0R_EXID_Pos;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	1cfa      	adds	r2, r7, #3
 800160e:	7812      	ldrb	r2, [r2, #0]
 8001610:	321b      	adds	r2, #27
 8001612:	0112      	lsls	r2, r2, #4
 8001614:	58d3      	ldr	r3, [r2, r3]
 8001616:	2207      	movs	r2, #7
 8001618:	4393      	bics	r3, r2
 800161a:	08da      	lsrs	r2, r3, #3
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	605a      	str	r2, [r3, #4]
  }
  pRxMsg->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[FIFONumber].RIR) >> CAN_RI0R_RTR_Pos;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	1cfa      	adds	r2, r7, #3
 8001626:	7812      	ldrb	r2, [r2, #0]
 8001628:	321b      	adds	r2, #27
 800162a:	0112      	lsls	r2, r2, #4
 800162c:	58d3      	ldr	r3, [r2, r3]
 800162e:	2202      	movs	r2, #2
 8001630:	4013      	ands	r3, r2
 8001632:	085a      	lsrs	r2, r3, #1
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	60da      	str	r2, [r3, #12]
  /* Get the DLC */
  pRxMsg->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	1cfb      	adds	r3, r7, #3
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	331b      	adds	r3, #27
 8001642:	011b      	lsls	r3, r3, #4
 8001644:	18d3      	adds	r3, r2, r3
 8001646:	3304      	adds	r3, #4
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	220f      	movs	r2, #15
 800164c:	401a      	ands	r2, r3
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	611a      	str	r2, [r3, #16]
  /* Get the FMI */
  pRxMsg->FMI = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	1cfb      	adds	r3, r7, #3
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	331b      	adds	r3, #27
 800165c:	011b      	lsls	r3, r3, #4
 800165e:	18d3      	adds	r3, r2, r3
 8001660:	3304      	adds	r3, #4
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	23ff      	movs	r3, #255	; 0xff
 8001666:	021b      	lsls	r3, r3, #8
 8001668:	4013      	ands	r3, r2
 800166a:	0a1a      	lsrs	r2, r3, #8
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	61da      	str	r2, [r3, #28]
  /* Get the FIFONumber */
  pRxMsg->FIFONumber = FIFONumber;
 8001670:	1cfb      	adds	r3, r7, #3
 8001672:	781a      	ldrb	r2, [r3, #0]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	621a      	str	r2, [r3, #32]
  /* Get the data field */
  pRxMsg->Data[0] = (CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA0_Pos;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6819      	ldr	r1, [r3, #0]
 800167c:	1cfb      	adds	r3, r7, #3
 800167e:	781a      	ldrb	r2, [r3, #0]
 8001680:	23dc      	movs	r3, #220	; 0xdc
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	0112      	lsls	r2, r2, #4
 8001686:	188a      	adds	r2, r1, r2
 8001688:	18d3      	adds	r3, r2, r3
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	b2da      	uxtb	r2, r3
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	751a      	strb	r2, [r3, #20]
  pRxMsg->Data[1] = (CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA1_Pos;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6819      	ldr	r1, [r3, #0]
 8001696:	1cfb      	adds	r3, r7, #3
 8001698:	781a      	ldrb	r2, [r3, #0]
 800169a:	23dc      	movs	r3, #220	; 0xdc
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	0112      	lsls	r2, r2, #4
 80016a0:	188a      	adds	r2, r1, r2
 80016a2:	18d3      	adds	r3, r2, r3
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	23ff      	movs	r3, #255	; 0xff
 80016a8:	021b      	lsls	r3, r3, #8
 80016aa:	4013      	ands	r3, r2
 80016ac:	0a1b      	lsrs	r3, r3, #8
 80016ae:	b2da      	uxtb	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	755a      	strb	r2, [r3, #21]
  pRxMsg->Data[2] = (CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA2_Pos;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6819      	ldr	r1, [r3, #0]
 80016b8:	1cfb      	adds	r3, r7, #3
 80016ba:	781a      	ldrb	r2, [r3, #0]
 80016bc:	23dc      	movs	r3, #220	; 0xdc
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	0112      	lsls	r2, r2, #4
 80016c2:	188a      	adds	r2, r1, r2
 80016c4:	18d3      	adds	r3, r2, r3
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	23ff      	movs	r3, #255	; 0xff
 80016ca:	041b      	lsls	r3, r3, #16
 80016cc:	4013      	ands	r3, r2
 80016ce:	0c1b      	lsrs	r3, r3, #16
 80016d0:	b2da      	uxtb	r2, r3
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	759a      	strb	r2, [r3, #22]
  pRxMsg->Data[3] = (CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA3_Pos;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6819      	ldr	r1, [r3, #0]
 80016da:	1cfb      	adds	r3, r7, #3
 80016dc:	781a      	ldrb	r2, [r3, #0]
 80016de:	23dc      	movs	r3, #220	; 0xdc
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	0112      	lsls	r2, r2, #4
 80016e4:	188a      	adds	r2, r1, r2
 80016e6:	18d3      	adds	r3, r2, r3
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	0e1b      	lsrs	r3, r3, #24
 80016ec:	061b      	lsls	r3, r3, #24
 80016ee:	0e1b      	lsrs	r3, r3, #24
 80016f0:	b2da      	uxtb	r2, r3
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	75da      	strb	r2, [r3, #23]
  pRxMsg->Data[4] = (CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR) >> CAN_RDH0R_DATA4_Pos;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6819      	ldr	r1, [r3, #0]
 80016fa:	1cfb      	adds	r3, r7, #3
 80016fc:	781a      	ldrb	r2, [r3, #0]
 80016fe:	23de      	movs	r3, #222	; 0xde
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	0112      	lsls	r2, r2, #4
 8001704:	188a      	adds	r2, r1, r2
 8001706:	18d3      	adds	r3, r2, r3
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	b2da      	uxtb	r2, r3
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	761a      	strb	r2, [r3, #24]
  pRxMsg->Data[5] = (CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR) >> CAN_RDH0R_DATA5_Pos;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6819      	ldr	r1, [r3, #0]
 8001714:	1cfb      	adds	r3, r7, #3
 8001716:	781a      	ldrb	r2, [r3, #0]
 8001718:	23de      	movs	r3, #222	; 0xde
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	0112      	lsls	r2, r2, #4
 800171e:	188a      	adds	r2, r1, r2
 8001720:	18d3      	adds	r3, r2, r3
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	23ff      	movs	r3, #255	; 0xff
 8001726:	021b      	lsls	r3, r3, #8
 8001728:	4013      	ands	r3, r2
 800172a:	0a1b      	lsrs	r3, r3, #8
 800172c:	b2da      	uxtb	r2, r3
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	765a      	strb	r2, [r3, #25]
  pRxMsg->Data[6] = (CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR) >> CAN_RDH0R_DATA6_Pos;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6819      	ldr	r1, [r3, #0]
 8001736:	1cfb      	adds	r3, r7, #3
 8001738:	781a      	ldrb	r2, [r3, #0]
 800173a:	23de      	movs	r3, #222	; 0xde
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	0112      	lsls	r2, r2, #4
 8001740:	188a      	adds	r2, r1, r2
 8001742:	18d3      	adds	r3, r2, r3
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	23ff      	movs	r3, #255	; 0xff
 8001748:	041b      	lsls	r3, r3, #16
 800174a:	4013      	ands	r3, r2
 800174c:	0c1b      	lsrs	r3, r3, #16
 800174e:	b2da      	uxtb	r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	769a      	strb	r2, [r3, #26]
  pRxMsg->Data[7] = (CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR) >> CAN_RDH0R_DATA7_Pos;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6819      	ldr	r1, [r3, #0]
 8001758:	1cfb      	adds	r3, r7, #3
 800175a:	781a      	ldrb	r2, [r3, #0]
 800175c:	23de      	movs	r3, #222	; 0xde
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	0112      	lsls	r2, r2, #4
 8001762:	188a      	adds	r2, r1, r2
 8001764:	18d3      	adds	r3, r2, r3
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	0e1b      	lsrs	r3, r3, #24
 800176a:	061b      	lsls	r3, r3, #24
 800176c:	0e1b      	lsrs	r3, r3, #24
 800176e:	b2da      	uxtb	r2, r3
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	76da      	strb	r2, [r3, #27]

  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 8001774:	1cfb      	adds	r3, r7, #3
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d110      	bne.n	800179e <CAN_Receive_IT+0x1f6>
  {
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO0);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	6812      	ldr	r2, [r2, #0]
 8001784:	68d2      	ldr	r2, [r2, #12]
 8001786:	2120      	movs	r1, #32
 8001788:	430a      	orrs	r2, r1
 800178a:	60da      	str	r2, [r3, #12]
    
    /* Disable FIFO 0 overrun and message pending Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FOV0 | CAN_IT_FMP0);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	6812      	ldr	r2, [r2, #0]
 8001794:	6952      	ldr	r2, [r2, #20]
 8001796:	210a      	movs	r1, #10
 8001798:	438a      	bics	r2, r1
 800179a:	615a      	str	r2, [r3, #20]
 800179c:	e00f      	b.n	80017be <CAN_Receive_IT+0x216>
  }
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO1);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	6812      	ldr	r2, [r2, #0]
 80017a6:	6912      	ldr	r2, [r2, #16]
 80017a8:	2120      	movs	r1, #32
 80017aa:	430a      	orrs	r2, r1
 80017ac:	611a      	str	r2, [r3, #16]
    
    /* Disable FIFO 1 overrun and message pending Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FOV1 | CAN_IT_FMP1);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	6812      	ldr	r2, [r2, #0]
 80017b6:	6952      	ldr	r2, [r2, #20]
 80017b8:	2150      	movs	r1, #80	; 0x50
 80017ba:	438a      	bics	r2, r1
 80017bc:	615a      	str	r2, [r3, #20]
  }
  
  if((hcan->State == HAL_CAN_STATE_BUSY_RX0) || (hcan->State == HAL_CAN_STATE_BUSY_RX1))
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	223d      	movs	r2, #61	; 0x3d
 80017c2:	5c9b      	ldrb	r3, [r3, r2]
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	2b22      	cmp	r3, #34	; 0x22
 80017c8:	d005      	beq.n	80017d6 <CAN_Receive_IT+0x22e>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	223d      	movs	r2, #61	; 0x3d
 80017ce:	5c9b      	ldrb	r3, [r3, r2]
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	2b32      	cmp	r3, #50	; 0x32
 80017d4:	d107      	bne.n	80017e6 <CAN_Receive_IT+0x23e>
    /*  - Disable Error warning Interrupt */
    /*  - Disable Error passive Interrupt */
    /*  - Disable Bus-off Interrupt */
    /*  - Disable Last error code Interrupt */
    /*  - Disable Error Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG |
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	6812      	ldr	r2, [r2, #0]
 80017de:	6952      	ldr	r2, [r2, #20]
 80017e0:	4926      	ldr	r1, [pc, #152]	; (800187c <CAN_Receive_IT+0x2d4>)
 80017e2:	400a      	ands	r2, r1
 80017e4:	615a      	str	r2, [r3, #20]
                               CAN_IT_LEC |
                               CAN_IT_ERR );
  }

  /* Change CAN state */
  if (FIFONumber == CAN_FIFO0)
 80017e6:	1cfb      	adds	r3, r7, #3
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d11e      	bne.n	800182c <CAN_Receive_IT+0x284>
  {
    switch(hcan->State)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	223d      	movs	r2, #61	; 0x3d
 80017f2:	5c9b      	ldrb	r3, [r3, r2]
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	2b62      	cmp	r3, #98	; 0x62
 80017f8:	d008      	beq.n	800180c <CAN_Receive_IT+0x264>
 80017fa:	2b72      	cmp	r3, #114	; 0x72
 80017fc:	d00b      	beq.n	8001816 <CAN_Receive_IT+0x26e>
 80017fe:	2b42      	cmp	r3, #66	; 0x42
 8001800:	d10e      	bne.n	8001820 <CAN_Receive_IT+0x278>
    {
      case(HAL_CAN_STATE_BUSY_TX_RX0):
        hcan->State = HAL_CAN_STATE_BUSY_TX;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	223d      	movs	r2, #61	; 0x3d
 8001806:	2112      	movs	r1, #18
 8001808:	5499      	strb	r1, [r3, r2]
        break;
 800180a:	e02d      	b.n	8001868 <CAN_Receive_IT+0x2c0>
      case(HAL_CAN_STATE_BUSY_RX0_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_RX1;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	223d      	movs	r2, #61	; 0x3d
 8001810:	2132      	movs	r1, #50	; 0x32
 8001812:	5499      	strb	r1, [r3, r2]
        break;
 8001814:	e028      	b.n	8001868 <CAN_Receive_IT+0x2c0>
      case(HAL_CAN_STATE_BUSY_TX_RX0_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX1;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	223d      	movs	r2, #61	; 0x3d
 800181a:	2152      	movs	r1, #82	; 0x52
 800181c:	5499      	strb	r1, [r3, r2]
        break;
 800181e:	e023      	b.n	8001868 <CAN_Receive_IT+0x2c0>
      default: /* HAL_CAN_STATE_BUSY_RX0 */
        hcan->State = HAL_CAN_STATE_READY;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	223d      	movs	r2, #61	; 0x3d
 8001824:	2101      	movs	r1, #1
 8001826:	5499      	strb	r1, [r3, r2]
        break;
 8001828:	46c0      	nop			; (mov r8, r8)
 800182a:	e01d      	b.n	8001868 <CAN_Receive_IT+0x2c0>
    }
  }
  else /* FIFONumber == CAN_FIFO1 */
  {
    switch(hcan->State)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	223d      	movs	r2, #61	; 0x3d
 8001830:	5c9b      	ldrb	r3, [r3, r2]
 8001832:	b2db      	uxtb	r3, r3
 8001834:	2b62      	cmp	r3, #98	; 0x62
 8001836:	d008      	beq.n	800184a <CAN_Receive_IT+0x2a2>
 8001838:	2b72      	cmp	r3, #114	; 0x72
 800183a:	d00b      	beq.n	8001854 <CAN_Receive_IT+0x2ac>
 800183c:	2b52      	cmp	r3, #82	; 0x52
 800183e:	d10e      	bne.n	800185e <CAN_Receive_IT+0x2b6>
    {
      case(HAL_CAN_STATE_BUSY_TX_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_TX;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	223d      	movs	r2, #61	; 0x3d
 8001844:	2112      	movs	r1, #18
 8001846:	5499      	strb	r1, [r3, r2]
        break;
 8001848:	e00e      	b.n	8001868 <CAN_Receive_IT+0x2c0>
      case(HAL_CAN_STATE_BUSY_RX0_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_RX0;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	223d      	movs	r2, #61	; 0x3d
 800184e:	2122      	movs	r1, #34	; 0x22
 8001850:	5499      	strb	r1, [r3, r2]
        break;
 8001852:	e009      	b.n	8001868 <CAN_Receive_IT+0x2c0>
      case(HAL_CAN_STATE_BUSY_TX_RX0_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	223d      	movs	r2, #61	; 0x3d
 8001858:	2142      	movs	r1, #66	; 0x42
 800185a:	5499      	strb	r1, [r3, r2]
        break;
 800185c:	e004      	b.n	8001868 <CAN_Receive_IT+0x2c0>
      default: /* HAL_CAN_STATE_BUSY_RX1 */
        hcan->State = HAL_CAN_STATE_READY;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	223d      	movs	r2, #61	; 0x3d
 8001862:	2101      	movs	r1, #1
 8001864:	5499      	strb	r1, [r3, r2]
        break;
 8001866:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Receive complete callback */ 
  HAL_CAN_RxCpltCallback(hcan);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	0018      	movs	r0, r3
 800186c:	f000 f940 	bl	8001af0 <HAL_CAN_RxCpltCallback>

  /* Return function status */
  return HAL_OK;
 8001870:	2300      	movs	r3, #0
}
 8001872:	0018      	movs	r0, r3
 8001874:	46bd      	mov	sp, r7
 8001876:	b004      	add	sp, #16
 8001878:	bd80      	pop	{r7, pc}
 800187a:	46c0      	nop			; (mov r8, r8)
 800187c:	ffff70ff 	.word	0xffff70ff

08001880 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001884:	f000 f804 	bl	8001890 <HAL_SYSTICK_Callback>
}
 8001888:	46c0      	nop			; (mov r8, r8)
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	46c0      	nop			; (mov r8, r8)

08001890 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001894:	46c0      	nop			; (mov r8, r8)
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	46c0      	nop			; (mov r8, r8)

0800189c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	0008      	movs	r0, r1
 80018a6:	0011      	movs	r1, r2
 80018a8:	1cbb      	adds	r3, r7, #2
 80018aa:	1c02      	adds	r2, r0, #0
 80018ac:	801a      	strh	r2, [r3, #0]
 80018ae:	1c7b      	adds	r3, r7, #1
 80018b0:	1c0a      	adds	r2, r1, #0
 80018b2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018b4:	1c7b      	adds	r3, r7, #1
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d004      	beq.n	80018c6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018bc:	1cbb      	adds	r3, r7, #2
 80018be:	881a      	ldrh	r2, [r3, #0]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018c4:	e003      	b.n	80018ce <HAL_GPIO_WritePin+0x32>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018c6:	1cbb      	adds	r3, r7, #2
 80018c8:	881a      	ldrh	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 80018ce:	46c0      	nop			; (mov r8, r8)
 80018d0:	46bd      	mov	sp, r7
 80018d2:	b002      	add	sp, #8
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	46c0      	nop			; (mov r8, r8)

080018d8 <main>:

void gear_up();
void gear_down();

int main(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GEAR_CUT_GPIO_Port, GEAR_CUT_Pin, GPIO_PIN_RESET);
 80018dc:	2380      	movs	r3, #128	; 0x80
 80018de:	0059      	lsls	r1, r3, #1
 80018e0:	2390      	movs	r3, #144	; 0x90
 80018e2:	05db      	lsls	r3, r3, #23
 80018e4:	2200      	movs	r2, #0
 80018e6:	0018      	movs	r0, r3
 80018e8:	f7ff ffd8 	bl	800189c <HAL_GPIO_WritePin>

	memset(&can_filter, 0, sizeof(can_filter));
 80018ec:	4b4e      	ldr	r3, [pc, #312]	; (8001a28 <main+0x150>)
 80018ee:	2228      	movs	r2, #40	; 0x28
 80018f0:	2100      	movs	r1, #0
 80018f2:	0018      	movs	r0, r3
 80018f4:	f000 f9fb 	bl	8001cee <memset>
	can_filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80018f8:	4b4b      	ldr	r3, [pc, #300]	; (8001a28 <main+0x150>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	611a      	str	r2, [r3, #16]
	can_filter.FilterMode = CAN_FILTERMODE_IDMASK;
 80018fe:	4b4a      	ldr	r3, [pc, #296]	; (8001a28 <main+0x150>)
 8001900:	2200      	movs	r2, #0
 8001902:	619a      	str	r2, [r3, #24]
	can_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8001904:	4b48      	ldr	r3, [pc, #288]	; (8001a28 <main+0x150>)
 8001906:	2201      	movs	r2, #1
 8001908:	61da      	str	r2, [r3, #28]
	can_filter.FilterActivation = ENABLE;
 800190a:	4b47      	ldr	r3, [pc, #284]	; (8001a28 <main+0x150>)
 800190c:	2201      	movs	r2, #1
 800190e:	621a      	str	r2, [r3, #32]

	hcan.pRxMsg = &rx_msg;
 8001910:	4b46      	ldr	r3, [pc, #280]	; (8001a2c <main+0x154>)
 8001912:	4a47      	ldr	r2, [pc, #284]	; (8001a30 <main+0x158>)
 8001914:	635a      	str	r2, [r3, #52]	; 0x34

	HAL_CAN_Receive_IT(&hcan, CAN_FIFO0);
 8001916:	4b45      	ldr	r3, [pc, #276]	; (8001a2c <main+0x154>)
 8001918:	2100      	movs	r1, #0
 800191a:	0018      	movs	r0, r3
 800191c:	f7ff fbbe 	bl	800109c <HAL_CAN_Receive_IT>

	static uint32_t tick_100ms = 0, tick_1s = 0;

	while(1) {

		if( ELAPSED_TIME(tick_100ms) >= 100 ) ADD_STATE(gmu_state, TICK_100MS);
 8001920:	f7ff fb94 	bl	800104c <HAL_GetTick>
 8001924:	0002      	movs	r2, r0
 8001926:	4b43      	ldr	r3, [pc, #268]	; (8001a34 <main+0x15c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2263      	movs	r2, #99	; 0x63
 800192e:	429a      	cmp	r2, r3
 8001930:	419b      	sbcs	r3, r3
 8001932:	425b      	negs	r3, r3
 8001934:	b2db      	uxtb	r3, r3
 8001936:	2b00      	cmp	r3, #0
 8001938:	d007      	beq.n	800194a <main+0x72>
 800193a:	4b3f      	ldr	r3, [pc, #252]	; (8001a38 <main+0x160>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	b2db      	uxtb	r3, r3
 8001940:	2240      	movs	r2, #64	; 0x40
 8001942:	4313      	orrs	r3, r2
 8001944:	b2da      	uxtb	r2, r3
 8001946:	4b3c      	ldr	r3, [pc, #240]	; (8001a38 <main+0x160>)
 8001948:	701a      	strb	r2, [r3, #0]
		if( ELAPSED_TIME(tick_1s) >= 1000 ) ADD_STATE(gmu_state, TICK_1S);
 800194a:	f7ff fb7f 	bl	800104c <HAL_GetTick>
 800194e:	0002      	movs	r2, r0
 8001950:	4b3a      	ldr	r3, [pc, #232]	; (8001a3c <main+0x164>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	4a3a      	ldr	r2, [pc, #232]	; (8001a40 <main+0x168>)
 8001958:	429a      	cmp	r2, r3
 800195a:	419b      	sbcs	r3, r3
 800195c:	425b      	negs	r3, r3
 800195e:	b2db      	uxtb	r3, r3
 8001960:	2b00      	cmp	r3, #0
 8001962:	d008      	beq.n	8001976 <main+0x9e>
 8001964:	4b34      	ldr	r3, [pc, #208]	; (8001a38 <main+0x160>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	b2db      	uxtb	r3, r3
 800196a:	2280      	movs	r2, #128	; 0x80
 800196c:	4252      	negs	r2, r2
 800196e:	4313      	orrs	r3, r2
 8001970:	b2da      	uxtb	r2, r3
 8001972:	4b31      	ldr	r3, [pc, #196]	; (8001a38 <main+0x160>)
 8001974:	701a      	strb	r2, [r3, #0]

		if( gmu_state & GEAR_UP) {
 8001976:	4b30      	ldr	r3, [pc, #192]	; (8001a38 <main+0x160>)
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	b2db      	uxtb	r3, r3
 800197c:	001a      	movs	r2, r3
 800197e:	2301      	movs	r3, #1
 8001980:	4013      	ands	r3, r2
 8001982:	1e5a      	subs	r2, r3, #1
 8001984:	4193      	sbcs	r3, r2
 8001986:	b2db      	uxtb	r3, r3
 8001988:	2b00      	cmp	r3, #0
 800198a:	d009      	beq.n	80019a0 <main+0xc8>
			gear_up();
 800198c:	f000 f85a 	bl	8001a44 <_Z7gear_upv>
			REMOVE_STATE(gmu_state, GEAR_UP);
 8001990:	4b29      	ldr	r3, [pc, #164]	; (8001a38 <main+0x160>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	b2db      	uxtb	r3, r3
 8001996:	2201      	movs	r2, #1
 8001998:	4393      	bics	r3, r2
 800199a:	b2da      	uxtb	r2, r3
 800199c:	4b26      	ldr	r3, [pc, #152]	; (8001a38 <main+0x160>)
 800199e:	701a      	strb	r2, [r3, #0]
		}

		if( gmu_state & GEAR_DOWN) {
 80019a0:	4b25      	ldr	r3, [pc, #148]	; (8001a38 <main+0x160>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	001a      	movs	r2, r3
 80019a8:	2302      	movs	r3, #2
 80019aa:	4013      	ands	r3, r2
 80019ac:	1e5a      	subs	r2, r3, #1
 80019ae:	4193      	sbcs	r3, r2
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d009      	beq.n	80019ca <main+0xf2>
			gear_down();
 80019b6:	f000 f873 	bl	8001aa0 <_Z9gear_downv>
			REMOVE_STATE(gmu_state, GEAR_DOWN);
 80019ba:	4b1f      	ldr	r3, [pc, #124]	; (8001a38 <main+0x160>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	2202      	movs	r2, #2
 80019c2:	4393      	bics	r3, r2
 80019c4:	b2da      	uxtb	r2, r3
 80019c6:	4b1c      	ldr	r3, [pc, #112]	; (8001a38 <main+0x160>)
 80019c8:	701a      	strb	r2, [r3, #0]
		}

		if( gmu_state & TICK_100MS ) {
 80019ca:	4b1b      	ldr	r3, [pc, #108]	; (8001a38 <main+0x160>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	001a      	movs	r2, r3
 80019d2:	2340      	movs	r3, #64	; 0x40
 80019d4:	4013      	ands	r3, r2
 80019d6:	1e5a      	subs	r2, r3, #1
 80019d8:	4193      	sbcs	r3, r2
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d00c      	beq.n	80019fa <main+0x122>

			REMOVE_STATE(gmu_state, TICK_100MS);
 80019e0:	4b15      	ldr	r3, [pc, #84]	; (8001a38 <main+0x160>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	2240      	movs	r2, #64	; 0x40
 80019e8:	4393      	bics	r3, r2
 80019ea:	b2da      	uxtb	r2, r3
 80019ec:	4b12      	ldr	r3, [pc, #72]	; (8001a38 <main+0x160>)
 80019ee:	701a      	strb	r2, [r3, #0]
			tick_100ms = HAL_GetTick();
 80019f0:	f7ff fb2c 	bl	800104c <HAL_GetTick>
 80019f4:	0002      	movs	r2, r0
 80019f6:	4b0f      	ldr	r3, [pc, #60]	; (8001a34 <main+0x15c>)
 80019f8:	601a      	str	r2, [r3, #0]
		}

		if( gmu_state & TICK_1S ) {
 80019fa:	4b0f      	ldr	r3, [pc, #60]	; (8001a38 <main+0x160>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	b25b      	sxtb	r3, r3
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	09db      	lsrs	r3, r3, #7
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d089      	beq.n	8001920 <main+0x48>

			REMOVE_STATE(gmu_state, TICK_1S);
 8001a0c:	4b0a      	ldr	r3, [pc, #40]	; (8001a38 <main+0x160>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	227f      	movs	r2, #127	; 0x7f
 8001a14:	4013      	ands	r3, r2
 8001a16:	b2da      	uxtb	r2, r3
 8001a18:	4b07      	ldr	r3, [pc, #28]	; (8001a38 <main+0x160>)
 8001a1a:	701a      	strb	r2, [r3, #0]
			tick_1s = HAL_GetTick();
 8001a1c:	f7ff fb16 	bl	800104c <HAL_GetTick>
 8001a20:	0002      	movs	r2, r0
 8001a22:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <main+0x164>)
 8001a24:	601a      	str	r2, [r3, #0]

	HAL_CAN_Receive_IT(&hcan, CAN_FIFO0);

	static uint32_t tick_100ms = 0, tick_1s = 0;

	while(1) {
 8001a26:	e77b      	b.n	8001920 <main+0x48>
 8001a28:	20000080 	.word	0x20000080
 8001a2c:	200000dc 	.word	0x200000dc
 8001a30:	200000a8 	.word	0x200000a8
 8001a34:	200000d0 	.word	0x200000d0
 8001a38:	200000cc 	.word	0x200000cc
 8001a3c:	200000d4 	.word	0x200000d4
 8001a40:	000003e7 	.word	0x000003e7

08001a44 <_Z7gear_upv>:

	}
}

void gear_up()
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
	// start gear up
	HAL_GPIO_WritePin(GEAR_UP_GPIO_Port, GEAR_UP_Pin, GPIO_PIN_SET);
 8001a48:	2380      	movs	r3, #128	; 0x80
 8001a4a:	011b      	lsls	r3, r3, #4
 8001a4c:	4813      	ldr	r0, [pc, #76]	; (8001a9c <_Z7gear_upv+0x58>)
 8001a4e:	2201      	movs	r2, #1
 8001a50:	0019      	movs	r1, r3
 8001a52:	f7ff ff23 	bl	800189c <HAL_GPIO_WritePin>
	// valve delay
	HAL_Delay(20);
 8001a56:	2014      	movs	r0, #20
 8001a58:	f7ff fb02 	bl	8001060 <HAL_Delay>
	// actuator travel delay
	HAL_Delay(80);
 8001a5c:	2050      	movs	r0, #80	; 0x50
 8001a5e:	f7ff faff 	bl	8001060 <HAL_Delay>
	// gear cut
	HAL_GPIO_WritePin(GEAR_CUT_GPIO_Port, GEAR_CUT_Pin, GPIO_PIN_SET);
 8001a62:	2380      	movs	r3, #128	; 0x80
 8001a64:	0059      	lsls	r1, r3, #1
 8001a66:	2390      	movs	r3, #144	; 0x90
 8001a68:	05db      	lsls	r3, r3, #23
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	0018      	movs	r0, r3
 8001a6e:	f7ff ff15 	bl	800189c <HAL_GPIO_WritePin>
	// gear cut delay
	HAL_Delay(100);
 8001a72:	2064      	movs	r0, #100	; 0x64
 8001a74:	f7ff faf4 	bl	8001060 <HAL_Delay>
	// gear cut off
	HAL_GPIO_WritePin(GEAR_CUT_GPIO_Port, GEAR_CUT_Pin, GPIO_PIN_RESET);
 8001a78:	2380      	movs	r3, #128	; 0x80
 8001a7a:	0059      	lsls	r1, r3, #1
 8001a7c:	2390      	movs	r3, #144	; 0x90
 8001a7e:	05db      	lsls	r3, r3, #23
 8001a80:	2200      	movs	r2, #0
 8001a82:	0018      	movs	r0, r3
 8001a84:	f7ff ff0a 	bl	800189c <HAL_GPIO_WritePin>
	// gear up off
	HAL_GPIO_WritePin(GEAR_UP_GPIO_Port, GEAR_UP_Pin, GPIO_PIN_RESET);
 8001a88:	2380      	movs	r3, #128	; 0x80
 8001a8a:	011b      	lsls	r3, r3, #4
 8001a8c:	4803      	ldr	r0, [pc, #12]	; (8001a9c <_Z7gear_upv+0x58>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	0019      	movs	r1, r3
 8001a92:	f7ff ff03 	bl	800189c <HAL_GPIO_WritePin>
}
 8001a96:	46c0      	nop			; (mov r8, r8)
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	48000400 	.word	0x48000400

08001aa0 <_Z9gear_downv>:

void gear_down()
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
	// start gear down
	HAL_GPIO_WritePin(GEAR_DOWN_GPIO_Port, GEAR_DOWN_Pin, GPIO_PIN_SET);
 8001aa4:	4b11      	ldr	r3, [pc, #68]	; (8001aec <_Z9gear_downv+0x4c>)
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	2104      	movs	r1, #4
 8001aaa:	0018      	movs	r0, r3
 8001aac:	f7ff fef6 	bl	800189c <HAL_GPIO_WritePin>
	// valve delay
	HAL_Delay(20);
 8001ab0:	2014      	movs	r0, #20
 8001ab2:	f7ff fad5 	bl	8001060 <HAL_Delay>
	// actuator travel delay
	HAL_Delay(80);
 8001ab6:	2050      	movs	r0, #80	; 0x50
 8001ab8:	f7ff fad2 	bl	8001060 <HAL_Delay>
	// clutch on
	HAL_GPIO_WritePin(CLUTCH_GPIO_Port, CLUTCH_Pin, GPIO_PIN_SET);
 8001abc:	4b0b      	ldr	r3, [pc, #44]	; (8001aec <_Z9gear_downv+0x4c>)
 8001abe:	2201      	movs	r2, #1
 8001ac0:	2101      	movs	r1, #1
 8001ac2:	0018      	movs	r0, r3
 8001ac4:	f7ff feea 	bl	800189c <HAL_GPIO_WritePin>
	// clutch delay
	HAL_Delay(100);
 8001ac8:	2064      	movs	r0, #100	; 0x64
 8001aca:	f7ff fac9 	bl	8001060 <HAL_Delay>
	// clutch off
	HAL_GPIO_WritePin(CLUTCH_GPIO_Port, CLUTCH_Pin, GPIO_PIN_RESET);
 8001ace:	4b07      	ldr	r3, [pc, #28]	; (8001aec <_Z9gear_downv+0x4c>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	2101      	movs	r1, #1
 8001ad4:	0018      	movs	r0, r3
 8001ad6:	f7ff fee1 	bl	800189c <HAL_GPIO_WritePin>
	// gear down off
	HAL_GPIO_WritePin(GEAR_DOWN_GPIO_Port, GEAR_DOWN_Pin, GPIO_PIN_RESET);
 8001ada:	4b04      	ldr	r3, [pc, #16]	; (8001aec <_Z9gear_downv+0x4c>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	2104      	movs	r1, #4
 8001ae0:	0018      	movs	r0, r3
 8001ae2:	f7ff fedb 	bl	800189c <HAL_GPIO_WritePin>
}
 8001ae6:	46c0      	nop			; (mov r8, r8)
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	48000400 	.word	0x48000400

08001af0 <HAL_CAN_RxCpltCallback>:

void HAL_CAN_RxCpltCallback(CAN_HandleTypeDef* hcan)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
	if(rx_msg.StdId == 0 && rx_msg.DLC == 1 && rx_msg.Data[0] == 0xFF)
 8001af8:	4b16      	ldr	r3, [pc, #88]	; (8001b54 <HAL_CAN_RxCpltCallback+0x64>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d110      	bne.n	8001b22 <HAL_CAN_RxCpltCallback+0x32>
 8001b00:	4b14      	ldr	r3, [pc, #80]	; (8001b54 <HAL_CAN_RxCpltCallback+0x64>)
 8001b02:	691b      	ldr	r3, [r3, #16]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d10c      	bne.n	8001b22 <HAL_CAN_RxCpltCallback+0x32>
 8001b08:	4b12      	ldr	r3, [pc, #72]	; (8001b54 <HAL_CAN_RxCpltCallback+0x64>)
 8001b0a:	7d1b      	ldrb	r3, [r3, #20]
 8001b0c:	2bff      	cmp	r3, #255	; 0xff
 8001b0e:	d108      	bne.n	8001b22 <HAL_CAN_RxCpltCallback+0x32>
	{
		ADD_STATE(gmu_state, GEAR_UP);
 8001b10:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <HAL_CAN_RxCpltCallback+0x68>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2201      	movs	r2, #1
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	4b0e      	ldr	r3, [pc, #56]	; (8001b58 <HAL_CAN_RxCpltCallback+0x68>)
 8001b1e:	701a      	strb	r2, [r3, #0]
	} else if(rx_msg.StdId == 1 && rx_msg.DLC == 1 && rx_msg.Data[0] == 0xFF)
	{
		ADD_STATE(gmu_state, GEAR_DOWN);
	}
}
 8001b20:	e013      	b.n	8001b4a <HAL_CAN_RxCpltCallback+0x5a>
void HAL_CAN_RxCpltCallback(CAN_HandleTypeDef* hcan)
{
	if(rx_msg.StdId == 0 && rx_msg.DLC == 1 && rx_msg.Data[0] == 0xFF)
	{
		ADD_STATE(gmu_state, GEAR_UP);
	} else if(rx_msg.StdId == 1 && rx_msg.DLC == 1 && rx_msg.Data[0] == 0xFF)
 8001b22:	4b0c      	ldr	r3, [pc, #48]	; (8001b54 <HAL_CAN_RxCpltCallback+0x64>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d10f      	bne.n	8001b4a <HAL_CAN_RxCpltCallback+0x5a>
 8001b2a:	4b0a      	ldr	r3, [pc, #40]	; (8001b54 <HAL_CAN_RxCpltCallback+0x64>)
 8001b2c:	691b      	ldr	r3, [r3, #16]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d10b      	bne.n	8001b4a <HAL_CAN_RxCpltCallback+0x5a>
 8001b32:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <HAL_CAN_RxCpltCallback+0x64>)
 8001b34:	7d1b      	ldrb	r3, [r3, #20]
 8001b36:	2bff      	cmp	r3, #255	; 0xff
 8001b38:	d107      	bne.n	8001b4a <HAL_CAN_RxCpltCallback+0x5a>
	{
		ADD_STATE(gmu_state, GEAR_DOWN);
 8001b3a:	4b07      	ldr	r3, [pc, #28]	; (8001b58 <HAL_CAN_RxCpltCallback+0x68>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	2202      	movs	r2, #2
 8001b42:	4313      	orrs	r3, r2
 8001b44:	b2da      	uxtb	r2, r3
 8001b46:	4b04      	ldr	r3, [pc, #16]	; (8001b58 <HAL_CAN_RxCpltCallback+0x68>)
 8001b48:	701a      	strb	r2, [r3, #0]
	}
}
 8001b4a:	46c0      	nop			; (mov r8, r8)
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	b002      	add	sp, #8
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	46c0      	nop			; (mov r8, r8)
 8001b54:	200000a8 	.word	0x200000a8
 8001b58:	200000cc 	.word	0x200000cc

08001b5c <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b60:	46c0      	nop			; (mov r8, r8)
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	46c0      	nop			; (mov r8, r8)

08001b68 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
  }
 8001b6c:	e7fe      	b.n	8001b6c <HardFault_Handler+0x4>
 8001b6e:	46c0      	nop			; (mov r8, r8)

08001b70 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001b74:	46c0      	nop			; (mov r8, r8)
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	46c0      	nop			; (mov r8, r8)

08001b7c <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b80:	46c0      	nop			; (mov r8, r8)
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	46c0      	nop			; (mov r8, r8)

08001b88 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b8c:	f7ff fa52 	bl	8001034 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8001b90:	f7ff fe76 	bl	8001880 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b94:	46c0      	nop			; (mov r8, r8)
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	46c0      	nop			; (mov r8, r8)

08001b9c <CEC_CAN_IRQHandler>:

/**
* @brief This function handles HDMI-CEC and CAN global interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
*/
void CEC_CAN_IRQHandler(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001ba0:	4b03      	ldr	r3, [pc, #12]	; (8001bb0 <CEC_CAN_IRQHandler+0x14>)
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	f7ff fb3c 	bl	8001220 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 8001ba8:	46c0      	nop			; (mov r8, r8)
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	46c0      	nop			; (mov r8, r8)
 8001bb0:	200000dc 	.word	0x200000dc

08001bb4 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8001bb8:	4b1a      	ldr	r3, [pc, #104]	; (8001c24 <SystemInit+0x70>)
 8001bba:	4a1a      	ldr	r2, [pc, #104]	; (8001c24 <SystemInit+0x70>)
 8001bbc:	6812      	ldr	r2, [r2, #0]
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8001bc4:	4b17      	ldr	r3, [pc, #92]	; (8001c24 <SystemInit+0x70>)
 8001bc6:	4a17      	ldr	r2, [pc, #92]	; (8001c24 <SystemInit+0x70>)
 8001bc8:	6852      	ldr	r2, [r2, #4]
 8001bca:	4917      	ldr	r1, [pc, #92]	; (8001c28 <SystemInit+0x74>)
 8001bcc:	400a      	ands	r2, r1
 8001bce:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8001bd0:	4b14      	ldr	r3, [pc, #80]	; (8001c24 <SystemInit+0x70>)
 8001bd2:	4a14      	ldr	r2, [pc, #80]	; (8001c24 <SystemInit+0x70>)
 8001bd4:	6812      	ldr	r2, [r2, #0]
 8001bd6:	4915      	ldr	r1, [pc, #84]	; (8001c2c <SystemInit+0x78>)
 8001bd8:	400a      	ands	r2, r1
 8001bda:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8001bdc:	4b11      	ldr	r3, [pc, #68]	; (8001c24 <SystemInit+0x70>)
 8001bde:	4a11      	ldr	r2, [pc, #68]	; (8001c24 <SystemInit+0x70>)
 8001be0:	6812      	ldr	r2, [r2, #0]
 8001be2:	4913      	ldr	r1, [pc, #76]	; (8001c30 <SystemInit+0x7c>)
 8001be4:	400a      	ands	r2, r1
 8001be6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8001be8:	4b0e      	ldr	r3, [pc, #56]	; (8001c24 <SystemInit+0x70>)
 8001bea:	4a0e      	ldr	r2, [pc, #56]	; (8001c24 <SystemInit+0x70>)
 8001bec:	6852      	ldr	r2, [r2, #4]
 8001bee:	4911      	ldr	r1, [pc, #68]	; (8001c34 <SystemInit+0x80>)
 8001bf0:	400a      	ands	r2, r1
 8001bf2:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8001bf4:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <SystemInit+0x70>)
 8001bf6:	4a0b      	ldr	r2, [pc, #44]	; (8001c24 <SystemInit+0x70>)
 8001bf8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001bfa:	210f      	movs	r1, #15
 8001bfc:	438a      	bics	r2, r1
 8001bfe:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F071xB)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFCEACU;
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
 8001c00:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <SystemInit+0x70>)
 8001c02:	4a08      	ldr	r2, [pc, #32]	; (8001c24 <SystemInit+0x70>)
 8001c04:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c06:	490c      	ldr	r1, [pc, #48]	; (8001c38 <SystemInit+0x84>)
 8001c08:	400a      	ands	r2, r1
 8001c0a:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8001c0c:	4b05      	ldr	r3, [pc, #20]	; (8001c24 <SystemInit+0x70>)
 8001c0e:	4a05      	ldr	r2, [pc, #20]	; (8001c24 <SystemInit+0x70>)
 8001c10:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c12:	2101      	movs	r1, #1
 8001c14:	438a      	bics	r2, r1
 8001c16:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001c18:	4b02      	ldr	r3, [pc, #8]	; (8001c24 <SystemInit+0x70>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	609a      	str	r2, [r3, #8]

}
 8001c1e:	46c0      	nop			; (mov r8, r8)
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40021000 	.word	0x40021000
 8001c28:	08ffb80c 	.word	0x08ffb80c
 8001c2c:	fef6ffff 	.word	0xfef6ffff
 8001c30:	fffbffff 	.word	0xfffbffff
 8001c34:	ffc0ffff 	.word	0xffc0ffff
 8001c38:	fff0feac 	.word	0xfff0feac

08001c3c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c3c:	480d      	ldr	r0, [pc, #52]	; (8001c74 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c3e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001c40:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001c42:	e003      	b.n	8001c4c <LoopCopyDataInit>

08001c44 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001c44:	4b0c      	ldr	r3, [pc, #48]	; (8001c78 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8001c46:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001c48:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001c4a:	3104      	adds	r1, #4

08001c4c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001c4c:	480b      	ldr	r0, [pc, #44]	; (8001c7c <LoopForever+0xa>)
  ldr r3, =_edata
 8001c4e:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <LoopForever+0xe>)
  adds r2, r0, r1
 8001c50:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001c52:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001c54:	d3f6      	bcc.n	8001c44 <CopyDataInit>
  ldr r2, =_sbss
 8001c56:	4a0b      	ldr	r2, [pc, #44]	; (8001c84 <LoopForever+0x12>)
  b LoopFillZerobss
 8001c58:	e002      	b.n	8001c60 <LoopFillZerobss>

08001c5a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001c5a:	2300      	movs	r3, #0
  str  r3, [r2]
 8001c5c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c5e:	3204      	adds	r2, #4

08001c60 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8001c60:	4b09      	ldr	r3, [pc, #36]	; (8001c88 <LoopForever+0x16>)
  cmp r2, r3
 8001c62:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001c64:	d3f9      	bcc.n	8001c5a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001c66:	f7ff ffa5 	bl	8001bb4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001c6a:	f000 f811 	bl	8001c90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c6e:	f7ff fe33 	bl	80018d8 <main>

08001c72 <LoopForever>:

LoopForever:
    b LoopForever
 8001c72:	e7fe      	b.n	8001c72 <LoopForever>

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c74:	20008000 	.word	0x20008000
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 8001c78:	08001ef0 	.word	0x08001ef0
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 8001c7c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001c80:	20000064 	.word	0x20000064
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 8001c84:	20000064 	.word	0x20000064
  str  r3, [r2]
  adds r2, r2, #4


LoopFillZerobss:
  ldr r3, = _ebss
 8001c88:	20000124 	.word	0x20000124

08001c8c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c8c:	e7fe      	b.n	8001c8c <ADC1_COMP_IRQHandler>
	...

08001c90 <__libc_init_array>:
 8001c90:	4b0e      	ldr	r3, [pc, #56]	; (8001ccc <__libc_init_array+0x3c>)
 8001c92:	b570      	push	{r4, r5, r6, lr}
 8001c94:	2500      	movs	r5, #0
 8001c96:	001e      	movs	r6, r3
 8001c98:	4c0d      	ldr	r4, [pc, #52]	; (8001cd0 <__libc_init_array+0x40>)
 8001c9a:	1ae4      	subs	r4, r4, r3
 8001c9c:	10a4      	asrs	r4, r4, #2
 8001c9e:	42a5      	cmp	r5, r4
 8001ca0:	d004      	beq.n	8001cac <__libc_init_array+0x1c>
 8001ca2:	00ab      	lsls	r3, r5, #2
 8001ca4:	58f3      	ldr	r3, [r6, r3]
 8001ca6:	4798      	blx	r3
 8001ca8:	3501      	adds	r5, #1
 8001caa:	e7f8      	b.n	8001c9e <__libc_init_array+0xe>
 8001cac:	f000 f88a 	bl	8001dc4 <_init>
 8001cb0:	4b08      	ldr	r3, [pc, #32]	; (8001cd4 <__libc_init_array+0x44>)
 8001cb2:	2500      	movs	r5, #0
 8001cb4:	001e      	movs	r6, r3
 8001cb6:	4c08      	ldr	r4, [pc, #32]	; (8001cd8 <__libc_init_array+0x48>)
 8001cb8:	1ae4      	subs	r4, r4, r3
 8001cba:	10a4      	asrs	r4, r4, #2
 8001cbc:	42a5      	cmp	r5, r4
 8001cbe:	d004      	beq.n	8001cca <__libc_init_array+0x3a>
 8001cc0:	00ab      	lsls	r3, r5, #2
 8001cc2:	58f3      	ldr	r3, [r6, r3]
 8001cc4:	4798      	blx	r3
 8001cc6:	3501      	adds	r5, #1
 8001cc8:	e7f8      	b.n	8001cbc <__libc_init_array+0x2c>
 8001cca:	bd70      	pop	{r4, r5, r6, pc}
 8001ccc:	08001ee8 	.word	0x08001ee8
 8001cd0:	08001ee8 	.word	0x08001ee8
 8001cd4:	08001ee8 	.word	0x08001ee8
 8001cd8:	08001eec 	.word	0x08001eec

08001cdc <memcpy>:
 8001cdc:	2300      	movs	r3, #0
 8001cde:	b510      	push	{r4, lr}
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d003      	beq.n	8001cec <memcpy+0x10>
 8001ce4:	5ccc      	ldrb	r4, [r1, r3]
 8001ce6:	54c4      	strb	r4, [r0, r3]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	e7f9      	b.n	8001ce0 <memcpy+0x4>
 8001cec:	bd10      	pop	{r4, pc}

08001cee <memset>:
 8001cee:	0003      	movs	r3, r0
 8001cf0:	1882      	adds	r2, r0, r2
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d002      	beq.n	8001cfc <memset+0xe>
 8001cf6:	7019      	strb	r1, [r3, #0]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	e7fa      	b.n	8001cf2 <memset+0x4>
 8001cfc:	4770      	bx	lr

08001cfe <abort>:
 8001cfe:	b510      	push	{r4, lr}
 8001d00:	2006      	movs	r0, #6
 8001d02:	f000 f82d 	bl	8001d60 <raise>
 8001d06:	2001      	movs	r0, #1
 8001d08:	f000 f85a 	bl	8001dc0 <_exit>

08001d0c <_raise_r>:
 8001d0c:	b570      	push	{r4, r5, r6, lr}
 8001d0e:	0004      	movs	r4, r0
 8001d10:	1e0d      	subs	r5, r1, #0
 8001d12:	2d1f      	cmp	r5, #31
 8001d14:	d904      	bls.n	8001d20 <_raise_r+0x14>
 8001d16:	2316      	movs	r3, #22
 8001d18:	6003      	str	r3, [r0, #0]
 8001d1a:	2001      	movs	r0, #1
 8001d1c:	4240      	negs	r0, r0
 8001d1e:	e01e      	b.n	8001d5e <_raise_r+0x52>
 8001d20:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001d22:	2a00      	cmp	r2, #0
 8001d24:	d004      	beq.n	8001d30 <_raise_r+0x24>
 8001d26:	008b      	lsls	r3, r1, #2
 8001d28:	18d2      	adds	r2, r2, r3
 8001d2a:	6813      	ldr	r3, [r2, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d108      	bne.n	8001d42 <_raise_r+0x36>
 8001d30:	0020      	movs	r0, r4
 8001d32:	f000 f831 	bl	8001d98 <_getpid_r>
 8001d36:	002a      	movs	r2, r5
 8001d38:	0001      	movs	r1, r0
 8001d3a:	0020      	movs	r0, r4
 8001d3c:	f000 f81a 	bl	8001d74 <_kill_r>
 8001d40:	e00d      	b.n	8001d5e <_raise_r+0x52>
 8001d42:	2000      	movs	r0, #0
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d00a      	beq.n	8001d5e <_raise_r+0x52>
 8001d48:	1c59      	adds	r1, r3, #1
 8001d4a:	d103      	bne.n	8001d54 <_raise_r+0x48>
 8001d4c:	3317      	adds	r3, #23
 8001d4e:	6023      	str	r3, [r4, #0]
 8001d50:	3001      	adds	r0, #1
 8001d52:	e004      	b.n	8001d5e <_raise_r+0x52>
 8001d54:	2400      	movs	r4, #0
 8001d56:	0028      	movs	r0, r5
 8001d58:	6014      	str	r4, [r2, #0]
 8001d5a:	4798      	blx	r3
 8001d5c:	0020      	movs	r0, r4
 8001d5e:	bd70      	pop	{r4, r5, r6, pc}

08001d60 <raise>:
 8001d60:	b510      	push	{r4, lr}
 8001d62:	4b03      	ldr	r3, [pc, #12]	; (8001d70 <raise+0x10>)
 8001d64:	0001      	movs	r1, r0
 8001d66:	6818      	ldr	r0, [r3, #0]
 8001d68:	f7ff ffd0 	bl	8001d0c <_raise_r>
 8001d6c:	bd10      	pop	{r4, pc}
 8001d6e:	46c0      	nop			; (mov r8, r8)
 8001d70:	20000060 	.word	0x20000060

08001d74 <_kill_r>:
 8001d74:	2300      	movs	r3, #0
 8001d76:	b570      	push	{r4, r5, r6, lr}
 8001d78:	4c06      	ldr	r4, [pc, #24]	; (8001d94 <_kill_r+0x20>)
 8001d7a:	0005      	movs	r5, r0
 8001d7c:	0008      	movs	r0, r1
 8001d7e:	0011      	movs	r1, r2
 8001d80:	6023      	str	r3, [r4, #0]
 8001d82:	f000 f815 	bl	8001db0 <_kill>
 8001d86:	1c43      	adds	r3, r0, #1
 8001d88:	d103      	bne.n	8001d92 <_kill_r+0x1e>
 8001d8a:	6823      	ldr	r3, [r4, #0]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d000      	beq.n	8001d92 <_kill_r+0x1e>
 8001d90:	602b      	str	r3, [r5, #0]
 8001d92:	bd70      	pop	{r4, r5, r6, pc}
 8001d94:	20000120 	.word	0x20000120

08001d98 <_getpid_r>:
 8001d98:	b510      	push	{r4, lr}
 8001d9a:	f000 f801 	bl	8001da0 <_getpid>
 8001d9e:	bd10      	pop	{r4, pc}

08001da0 <_getpid>:
 8001da0:	2258      	movs	r2, #88	; 0x58
 8001da2:	2001      	movs	r0, #1
 8001da4:	4b01      	ldr	r3, [pc, #4]	; (8001dac <_getpid+0xc>)
 8001da6:	4240      	negs	r0, r0
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	4770      	bx	lr
 8001dac:	20000120 	.word	0x20000120

08001db0 <_kill>:
 8001db0:	2258      	movs	r2, #88	; 0x58
 8001db2:	2001      	movs	r0, #1
 8001db4:	4b01      	ldr	r3, [pc, #4]	; (8001dbc <_kill+0xc>)
 8001db6:	4240      	negs	r0, r0
 8001db8:	601a      	str	r2, [r3, #0]
 8001dba:	4770      	bx	lr
 8001dbc:	20000120 	.word	0x20000120

08001dc0 <_exit>:
 8001dc0:	e7fe      	b.n	8001dc0 <_exit>
	...

08001dc4 <_init>:
 8001dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dc6:	46c0      	nop			; (mov r8, r8)
 8001dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dca:	bc08      	pop	{r3}
 8001dcc:	469e      	mov	lr, r3
 8001dce:	4770      	bx	lr

08001dd0 <_fini>:
 8001dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dd2:	46c0      	nop			; (mov r8, r8)
 8001dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dd6:	bc08      	pop	{r3}
 8001dd8:	469e      	mov	lr, r3
 8001dda:	4770      	bx	lr
